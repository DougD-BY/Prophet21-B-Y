using System;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Linq;

namespace P21.Entity
{
    public partial class P21DataContext : DbContext
    {
        public P21DataContext()
            : base("name=P21DataContext")
        {
        }

        public virtual DbSet<accnt_group_mx> accnt_group_mx { get; set; }
        public virtual DbSet<accnt_group_mx2> accnt_group_mx2 { get; set; }
        public virtual DbSet<accnts_x_accnt_group> accnts_x_accnt_group { get; set; }
        public virtual DbSet<account_group_hdr> account_group_hdr { get; set; }
        public virtual DbSet<account_group_line> account_group_line { get; set; }
        public virtual DbSet<account_x_currency> account_x_currency { get; set; }
        public virtual DbSet<ach_override> ach_override { get; set; }
        public virtual DbSet<ach_transmission_file> ach_transmission_file { get; set; }
        public virtual DbSet<activant_layout_def> activant_layout_def { get; set; }
        public virtual DbSet<activity> activities { get; set; }
        public virtual DbSet<activity_reminder> activity_reminder { get; set; }
        public virtual DbSet<activity_trans> activity_trans { get; set; }
        public virtual DbSet<ad_role_x_users> ad_role_x_users { get; set; }
        public virtual DbSet<address> addresses { get; set; }
        public virtual DbSet<address_dea> address_dea { get; set; }
        public virtual DbSet<address_freight_display> address_freight_display { get; set; }
        public virtual DbSet<address_history> address_history { get; set; }
        public virtual DbSet<address_x_dea_license> address_x_dea_license { get; set; }
        public virtual DbSet<address_x_restricted_class> address_x_restricted_class { get; set; }
        public virtual DbSet<adjustment_criteria> adjustment_criteria { get; set; }
        public virtual DbSet<ads_audit_accounting_ar> ads_audit_accounting_ar { get; set; }
        public virtual DbSet<ads_audit_commission> ads_audit_commission { get; set; }
        public virtual DbSet<ads_audit_customer> ads_audit_customer { get; set; }
        public virtual DbSet<ads_audit_invoice> ads_audit_invoice { get; set; }
        public virtual DbSet<ads_audit_order> ads_audit_order { get; set; }
        public virtual DbSet<ads_audit_run> ads_audit_run { get; set; }
        public virtual DbSet<ads_metric_configuration> ads_metric_configuration { get; set; }
        public virtual DbSet<affinity_hierarchy> affinity_hierarchy { get; set; }
        public virtual DbSet<agile_connect_systems> agile_connect_systems { get; set; }
        public virtual DbSet<aha_security> aha_security { get; set; }
        public virtual DbSet<aia_element> aia_element { get; set; }
        public virtual DbSet<aiag_label> aiag_label { get; set; }
        public virtual DbSet<alarm_code> alarm_code { get; set; }
        public virtual DbSet<alarm_code_x_inv_mast> alarm_code_x_inv_mast { get; set; }
        public virtual DbSet<alert_collaborate> alert_collaborate { get; set; }
        public virtual DbSet<alert_implementation> alert_implementation { get; set; }
        public virtual DbSet<Alert_implementation_query> Alert_implementation_query { get; set; }
        public virtual DbSet<alert_message> alert_message { get; set; }
        public virtual DbSet<alert_queued_mail> alert_queued_mail { get; set; }
        public virtual DbSet<alert_recipient> alert_recipient { get; set; }
        public virtual DbSet<alert_recipient_role> alert_recipient_role { get; set; }
        public virtual DbSet<alert_task> alert_task { get; set; }
        public virtual DbSet<alert_task_aux_assignee> alert_task_aux_assignee { get; set; }
        public virtual DbSet<alert_task_aux_role> alert_task_aux_role { get; set; }
        public virtual DbSet<alert_type> alert_type { get; set; }
        public virtual DbSet<alert_type_x_token> alert_type_x_token { get; set; }
        public virtual DbSet<alternate_code> alternate_code { get; set; }
        public virtual DbSet<alternate_code_aux_info> alternate_code_aux_info { get; set; }
        public virtual DbSet<alternate_oe_settings> alternate_oe_settings { get; set; }
        public virtual DbSet<anticipated_allocation> anticipated_allocation { get; set; }
        public virtual DbSet<ap_system_parameters> ap_system_parameters { get; set; }
        public virtual DbSet<api_data_access_x_roles> api_data_access_x_roles { get; set; }
        public virtual DbSet<apinv_hdr> apinv_hdr { get; set; }
        public virtual DbSet<apinv_hdr_174> apinv_hdr_174 { get; set; }
        public virtual DbSet<apinv_hdr_audit_trail> apinv_hdr_audit_trail { get; set; }
        public virtual DbSet<apinv_hdr_edit> apinv_hdr_edit { get; set; }
        public virtual DbSet<apinv_hdr_ud> apinv_hdr_ud { get; set; }
        public virtual DbSet<apinv_hdr_vat> apinv_hdr_vat { get; set; }
        public virtual DbSet<apinv_hdr_x_inventory_receipts> apinv_hdr_x_inventory_receipts { get; set; }
        public virtual DbSet<apinv_line> apinv_line { get; set; }
        public virtual DbSet<apinv_line_disputed_vouch> apinv_line_disputed_vouch { get; set; }
        public virtual DbSet<apinv_line_edit> apinv_line_edit { get; set; }
        public virtual DbSet<apinv_line_x_inv_receipts_line> apinv_line_x_inv_receipts_line { get; set; }
        public virtual DbSet<application_resource_file> application_resource_file { get; set; }
        public virtual DbSet<application_security> application_security { get; set; }
        public virtual DbSet<appointment> appointments { get; set; }
        public virtual DbSet<appointment_exception> appointment_exception { get; set; }
        public virtual DbSet<ar_allowed_amt_distribution> ar_allowed_amt_distribution { get; set; }
        public virtual DbSet<ar_payment_details> ar_payment_details { get; set; }
        public virtual DbSet<ar_receipts> ar_receipts { get; set; }
        public virtual DbSet<ar_receipts_detail> ar_receipts_detail { get; set; }
        public virtual DbSet<ar_system_parameters> ar_system_parameters { get; set; }
        public virtual DbSet<area> areas { get; set; }
        public virtual DbSet<area_x_custom_column> area_x_custom_column { get; set; }
        public virtual DbSet<asb_call_criteria> asb_call_criteria { get; set; }
        public virtual DbSet<asb_delivery_method> asb_delivery_method { get; set; }
        public virtual DbSet<assembly_class> assembly_class { get; set; }
        public virtual DbSet<assembly_hdr> assembly_hdr { get; set; }
        public virtual DbSet<assembly_hdr_location> assembly_hdr_location { get; set; }
        public virtual DbSet<assembly_hdr_make_days> assembly_hdr_make_days { get; set; }
        public virtual DbSet<assembly_line> assembly_line { get; set; }
        public virtual DbSet<assembly_line_tally> assembly_line_tally { get; set; }
        public virtual DbSet<assignment> assignments { get; set; }
        public virtual DbSet<attribute> attributes { get; set; }
        public virtual DbSet<attribute_group> attribute_group { get; set; }
        public virtual DbSet<attribute_value> attribute_value { get; set; }
        public virtual DbSet<attribute_x_attribute_group> attribute_x_attribute_group { get; set; }
        public virtual DbSet<audit_trail> audit_trail { get; set; }
        public virtual DbSet<audit_trail_support> audit_trail_support { get; set; }
        public virtual DbSet<auto_test_detail> auto_test_detail { get; set; }
        public virtual DbSet<auto_test_hdr> auto_test_hdr { get; set; }
        public virtual DbSet<auto_test_log_message> auto_test_log_message { get; set; }
        public virtual DbSet<auto_test_run> auto_test_run { get; set; }
        public virtual DbSet<auto_test_type> auto_test_type { get; set; }
        public virtual DbSet<average_inventory_value> average_inventory_value { get; set; }
        public virtual DbSet<b2b_temp_assembly_detail> b2b_temp_assembly_detail { get; set; }
        public virtual DbSet<b2b_temp_assembly_header> b2b_temp_assembly_header { get; set; }
        public virtual DbSet<b2b_temp_category_image> b2b_temp_category_image { get; set; }
        public virtual DbSet<b2b_temp_category_link> b2b_temp_category_link { get; set; }
        public virtual DbSet<b2b_temp_category_x_item> b2b_temp_category_x_item { get; set; }
        public virtual DbSet<b2b_temp_class> b2b_temp_class { get; set; }
        public virtual DbSet<b2b_temp_contact> b2b_temp_contact { get; set; }
        public virtual DbSet<b2b_temp_contract_detail> b2b_temp_contract_detail { get; set; }
        public virtual DbSet<b2b_temp_contract_hdr> b2b_temp_contract_hdr { get; set; }
        public virtual DbSet<b2b_temp_corporation> b2b_temp_corporation { get; set; }
        public virtual DbSet<b2b_temp_corporation_customer> b2b_temp_corporation_customer { get; set; }
        public virtual DbSet<b2b_temp_credit_card> b2b_temp_credit_card { get; set; }
        public virtual DbSet<b2b_temp_creditcard_processor> b2b_temp_creditcard_processor { get; set; }
        public virtual DbSet<b2b_temp_creditcard_processor_x_location> b2b_temp_creditcard_processor_x_location { get; set; }
        public virtual DbSet<b2b_temp_cust_item> b2b_temp_cust_item { get; set; }
        public virtual DbSet<b2b_temp_customer> b2b_temp_customer { get; set; }
        public virtual DbSet<b2b_temp_customer_goal_detail> b2b_temp_customer_goal_detail { get; set; }
        public virtual DbSet<b2b_temp_customer_goal_hdr> b2b_temp_customer_goal_hdr { get; set; }
        public virtual DbSet<b2b_temp_customer_x_dealer_type> b2b_temp_customer_x_dealer_type { get; set; }
        public virtual DbSet<b2b_temp_dealer> b2b_temp_dealer { get; set; }
        public virtual DbSet<b2b_temp_dealer_type> b2b_temp_dealer_type { get; set; }
        public virtual DbSet<b2b_temp_district> b2b_temp_district { get; set; }
        public virtual DbSet<b2b_temp_freight_code> b2b_temp_freight_code { get; set; }
        public virtual DbSet<b2b_temp_item> b2b_temp_item { get; set; }
        public virtual DbSet<b2b_temp_item_alternate> b2b_temp_item_alternate { get; set; }
        public virtual DbSet<b2b_temp_item_category> b2b_temp_item_category { get; set; }
        public virtual DbSet<b2b_temp_item_category_description> b2b_temp_item_category_description { get; set; }
        public virtual DbSet<b2b_temp_item_category_hierarchy> b2b_temp_item_category_hierarchy { get; set; }
        public virtual DbSet<b2b_temp_item_document> b2b_temp_item_document { get; set; }
        public virtual DbSet<b2b_temp_item_image> b2b_temp_item_image { get; set; }
        public virtual DbSet<b2b_temp_item_location> b2b_temp_item_location { get; set; }
        public virtual DbSet<b2b_temp_item_location_bin> b2b_temp_item_location_bin { get; set; }
        public virtual DbSet<b2b_temp_item_notepad> b2b_temp_item_notepad { get; set; }
        public virtual DbSet<b2b_temp_item_spec_page> b2b_temp_item_spec_page { get; set; }
        public virtual DbSet<b2b_temp_item_substitute> b2b_temp_item_substitute { get; set; }
        public virtual DbSet<b2b_temp_item_supplier_x_location> b2b_temp_item_supplier_x_location { get; set; }
        public virtual DbSet<b2b_temp_item_uom> b2b_temp_item_uom { get; set; }
        public virtual DbSet<b2b_temp_location> b2b_temp_location { get; set; }
        public virtual DbSet<b2b_temp_monthly_category_sale> b2b_temp_monthly_category_sale { get; set; }
        public virtual DbSet<b2b_temp_order_surcharge> b2b_temp_order_surcharge { get; set; }
        public virtual DbSet<b2b_temp_past_purchases> b2b_temp_past_purchases { get; set; }
        public virtual DbSet<b2b_temp_quote_list_detail> b2b_temp_quote_list_detail { get; set; }
        public virtual DbSet<b2b_temp_quote_list_header> b2b_temp_quote_list_header { get; set; }
        public virtual DbSet<b2b_temp_reason> b2b_temp_reason { get; set; }
        public virtual DbSet<b2b_temp_rewards_program_entry_year> b2b_temp_rewards_program_entry_year { get; set; }
        public virtual DbSet<b2b_temp_ship_to> b2b_temp_ship_to { get; set; }
        public virtual DbSet<b2b_temp_shipping_method> b2b_temp_shipping_method { get; set; }
        public virtual DbSet<b2b_temp_shipping_method_x_freight_code> b2b_temp_shipping_method_x_freight_code { get; set; }
        public virtual DbSet<b2b_temp_system_setting> b2b_temp_system_setting { get; set; }
        public virtual DbSet<b2b_temp_vendor> b2b_temp_vendor { get; set; }
        public virtual DbSet<b2b_temp_vendor_category> b2b_temp_vendor_category { get; set; }
        public virtual DbSet<b2b_temp_vendor_link> b2b_temp_vendor_link { get; set; }
        public virtual DbSet<b2b_temp_warranty_claim_dealer_failure_code> b2b_temp_warranty_claim_dealer_failure_code { get; set; }
        public virtual DbSet<b2b_temp_warranty_claim_dealer_failure_code_x_supplier> b2b_temp_warranty_claim_dealer_failure_code_x_supplier { get; set; }
        public virtual DbSet<b2b_temp_warranty_claim_item_detail> b2b_temp_warranty_claim_item_detail { get; set; }
        public virtual DbSet<b2b_temp_warranty_claim_item_equipment> b2b_temp_warranty_claim_item_equipment { get; set; }
        public virtual DbSet<b2b_temp_warranty_claim_product_group_detail> b2b_temp_warranty_claim_product_group_detail { get; set; }
        public virtual DbSet<b2b_temp_warranty_claim_product_group_equipment> b2b_temp_warranty_claim_product_group_equipment { get; set; }
        public virtual DbSet<b2b_temp_warranty_claim_product_group_serial_template> b2b_temp_warranty_claim_product_group_serial_template { get; set; }
        public virtual DbSet<b2b_temp_warranty_claim_supplier_claim_detail> b2b_temp_warranty_claim_supplier_claim_detail { get; set; }
        public virtual DbSet<b2b_temp_warranty_claim_supplier_detail> b2b_temp_warranty_claim_supplier_detail { get; set; }
        public virtual DbSet<b2b_transfer_tracking> b2b_transfer_tracking { get; set; }
        public virtual DbSet<b3_customs_info> b3_customs_info { get; set; }
        public virtual DbSet<balance> balances { get; set; }
        public virtual DbSet<balances_reporting_curr> balances_reporting_curr { get; set; }
        public virtual DbSet<bank_accounts> bank_accounts { get; set; }
        public virtual DbSet<bank_accounts_eft> bank_accounts_eft { get; set; }
        public virtual DbSet<bank_accounts_reconciliation> bank_accounts_reconciliation { get; set; }
        public virtual DbSet<bhl_release_bin> bhl_release_bin { get; set; }
        public virtual DbSet<bill_hold_hdr> bill_hold_hdr { get; set; }
        public virtual DbSet<bill_hold_line> bill_hold_line { get; set; }
        public virtual DbSet<bill_hold_line_x_adjust> bill_hold_line_x_adjust { get; set; }
        public virtual DbSet<bill_of_lading_detail> bill_of_lading_detail { get; set; }
        public virtual DbSet<bill_of_lading_hdr> bill_of_lading_hdr { get; set; }
        public virtual DbSet<bill_to_category> bill_to_category { get; set; }
        public virtual DbSet<bill_to_category_items> bill_to_category_items { get; set; }
        public virtual DbSet<bin> bins { get; set; }
        public virtual DbSet<bin_movement_import_log> bin_movement_import_log { get; set; }
        public virtual DbSet<bin_picking_problem_info> bin_picking_problem_info { get; set; }
        public virtual DbSet<bin_replenishment> bin_replenishment { get; set; }
        public virtual DbSet<bin_replenishment_order> bin_replenishment_order { get; set; }
        public virtual DbSet<bin_rma> bin_rma { get; set; }
        public virtual DbSet<bin_type> bin_type { get; set; }
        public virtual DbSet<bin_ud> bin_ud { get; set; }
        public virtual DbSet<bin_zone> bin_zone { get; set; }
        public virtual DbSet<bin_zone_group> bin_zone_group { get; set; }
        public virtual DbSet<bin_zone_x_bin_zone_group> bin_zone_x_bin_zone_group { get; set; }
        public virtual DbSet<block_pt_scan> block_pt_scan { get; set; }
        public virtual DbSet<boeing_caller_10000> boeing_caller_10000 { get; set; }
        public virtual DbSet<boeing_order_10000> boeing_order_10000 { get; set; }
        public virtual DbSet<boeing_order_xref_10000> boeing_order_xref_10000 { get; set; }
        public virtual DbSet<boeing_po_10000> boeing_po_10000 { get; set; }
        public virtual DbSet<boeing_shipping_10000> boeing_shipping_10000 { get; set; }
        public virtual DbSet<box> boxes { get; set; }
        public virtual DbSet<box_item_x_each_item> box_item_x_each_item { get; set; }
        public virtual DbSet<branch> branches { get; set; }
        public virtual DbSet<branch_inv_no_display> branch_inv_no_display { get; set; }
        public virtual DbSet<builders_selection_sheet> builders_selection_sheet { get; set; }
        public virtual DbSet<business_object_key_fields> business_object_key_fields { get; set; }
        public virtual DbSet<business_rule> business_rule { get; set; }
        public virtual DbSet<business_rule_data_element> business_rule_data_element { get; set; }
        public virtual DbSet<business_rule_event> business_rule_event { get; set; }
        public virtual DbSet<business_rule_event_class> business_rule_event_class { get; set; }
        public virtual DbSet<business_rule_event_extd_info> business_rule_event_extd_info { get; set; }
        public virtual DbSet<business_rule_event_key> business_rule_event_key { get; set; }
        public virtual DbSet<business_rule_log> business_rule_log { get; set; }
        public virtual DbSet<business_rule_rmb> business_rule_rmb { get; set; }
        public virtual DbSet<business_rule_x_roles> business_rule_x_roles { get; set; }
        public virtual DbSet<business_rule_x_users> business_rule_x_users { get; set; }
        public virtual DbSet<buy_get_locs> buy_get_locs { get; set; }
        public virtual DbSet<buy_get_supplier_redemption_info> buy_get_supplier_redemption_info { get; set; }
        public virtual DbSet<buy_get_x_rewards_program> buy_get_x_rewards_program { get; set; }
        public virtual DbSet<buy_list_hdr> buy_list_hdr { get; set; }
        public virtual DbSet<buy_list_line> buy_list_line { get; set; }
        public virtual DbSet<buying_trend_customer_item_list> buying_trend_customer_item_list { get; set; }
        public virtual DbSet<buying_trend_earliest_sales_bucket> buying_trend_earliest_sales_bucket { get; set; }
        public virtual DbSet<buying_trend_final_form> buying_trend_final_form { get; set; }
        public virtual DbSet<buying_trend_history> buying_trend_history { get; set; }
        public virtual DbSet<buying_trend_invoice_line_bucket> buying_trend_invoice_line_bucket { get; set; }
        public virtual DbSet<calendar_based_delivery> calendar_based_delivery { get; set; }
        public virtual DbSet<calendar_based_reading_hist> calendar_based_reading_hist { get; set; }
        public virtual DbSet<calendar_measure_10005> calendar_measure_10005 { get; set; }
        public virtual DbSet<call_category> call_category { get; set; }
        public virtual DbSet<call_log> call_log { get; set; }
        public virtual DbSet<canadian_customs_form> canadian_customs_form { get; set; }
        public virtual DbSet<cancel_pick_ticket_tag> cancel_pick_ticket_tag { get; set; }
        public virtual DbSet<cardlock_tax_type> cardlock_tax_type { get; set; }
        public virtual DbSet<carrier> carriers { get; set; }
        public virtual DbSet<carrier_194> carrier_194 { get; set; }
        public virtual DbSet<carrier_2164> carrier_2164 { get; set; }
        public virtual DbSet<carrier_analytics_contract_pricing> carrier_analytics_contract_pricing { get; set; }
        public virtual DbSet<carrier_analytics_item_pricing> carrier_analytics_item_pricing { get; set; }
        public virtual DbSet<carrier_bill_of_lading> carrier_bill_of_lading { get; set; }
        public virtual DbSet<carrier_contract_customer> carrier_contract_customer { get; set; }
        public virtual DbSet<carrier_contract_hdr> carrier_contract_hdr { get; set; }
        public virtual DbSet<carrier_contract_line> carrier_contract_line { get; set; }
        public virtual DbSet<carrier_contract_qty_used_hist> carrier_contract_qty_used_hist { get; set; }
        public virtual DbSet<carrier_contract_ship_to> carrier_contract_ship_to { get; set; }
        public virtual DbSet<carrier_contract_z_line> carrier_contract_z_line { get; set; }
        public virtual DbSet<carrier_cube_factor> carrier_cube_factor { get; set; }
        public virtual DbSet<carrier_cube_modifier> carrier_cube_modifier { get; set; }
        public virtual DbSet<carrier_data> carrier_data { get; set; }
        public virtual DbSet<carrier_data_detail> carrier_data_detail { get; set; }
        public virtual DbSet<carrier_data_x_package> carrier_data_x_package { get; set; }
        public virtual DbSet<carrier_data_x_shipment> carrier_data_x_shipment { get; set; }
        public virtual DbSet<carrier_info> carrier_info { get; set; }
        public virtual DbSet<carrier_integration_direct_ship_data> carrier_integration_direct_ship_data { get; set; }
        public virtual DbSet<carrier_package_type> carrier_package_type { get; set; }
        public virtual DbSet<carrier_pick_location> carrier_pick_location { get; set; }
        public virtual DbSet<carrier_pick_location_zone> carrier_pick_location_zone { get; set; }
        public virtual DbSet<carrier_priority> carrier_priority { get; set; }
        public virtual DbSet<carrier_provider_type> carrier_provider_type { get; set; }
        public virtual DbSet<carrier_reference> carrier_reference { get; set; }
        public virtual DbSet<carrier_service_type> carrier_service_type { get; set; }
        public virtual DbSet<carrier_ship_method> carrier_ship_method { get; set; }
        public virtual DbSet<carrier_ship_via> carrier_ship_via { get; set; }
        public virtual DbSet<carrier_shipping_charge> carrier_shipping_charge { get; set; }
        public virtual DbSet<carrier_shipping_document> carrier_shipping_document { get; set; }
        public virtual DbSet<carrier_size_category_cube_factor> carrier_size_category_cube_factor { get; set; }
        public virtual DbSet<carrier_size_category_cube_modifier> carrier_size_category_cube_modifier { get; set; }
        public virtual DbSet<carrier_x_freight_code> carrier_x_freight_code { get; set; }
        public virtual DbSet<cartaporte_cfdi> cartaporte_cfdi { get; set; }
        public virtual DbSet<cartaporte_detail> cartaporte_detail { get; set; }
        public virtual DbSet<cartaporte_hdr> cartaporte_hdr { get; set; }
        public virtual DbSet<cartaporte_hdr_x_document> cartaporte_hdr_x_document { get; set; }
        public virtual DbSet<cartaporte_hdr_x_driver> cartaporte_hdr_x_driver { get; set; }
        public virtual DbSet<cartaporte_hdr_x_location> cartaporte_hdr_x_location { get; set; }
        public virtual DbSet<cartaporte_hdr_x_trailer> cartaporte_hdr_x_trailer { get; set; }
        public virtual DbSet<cash_drawer> cash_drawer { get; set; }
        public virtual DbSet<cash_drawer_default_user> cash_drawer_default_user { get; set; }
        public virtual DbSet<cash_drawer_history> cash_drawer_history { get; set; }
        public virtual DbSet<cash_drawer_transaction> cash_drawer_transaction { get; set; }
        public virtual DbSet<cash_transfer> cash_transfer { get; set; }
        public virtual DbSet<castrol_trans_summary> castrol_trans_summary { get; set; }
        public virtual DbSet<category> categories { get; set; }
        public virtual DbSet<category_x_activity> category_x_activity { get; set; }
        public virtual DbSet<cc_columns> cc_columns { get; set; }
        public virtual DbSet<cc_payment_type_x_processor> cc_payment_type_x_processor { get; set; }
        public virtual DbSet<cc_processor_x_location> cc_processor_x_location { get; set; }
        public virtual DbSet<cc_processor_x_tripos_instance> cc_processor_x_tripos_instance { get; set; }
        public virtual DbSet<cc_tables> cc_tables { get; set; }
        public virtual DbSet<cell_definition> cell_definition { get; set; }
        public virtual DbSet<cell_range> cell_range { get; set; }
        public virtual DbSet<centeron_order_import> centeron_order_import { get; set; }
        public virtual DbSet<centeron_route_export> centeron_route_export { get; set; }
        public virtual DbSet<centeron_route_import> centeron_route_import { get; set; }
        public virtual DbSet<centeron_tank_monitor> centeron_tank_monitor { get; set; }
        public virtual DbSet<certification_level> certification_level { get; set; }
        public virtual DbSet<cfdi_payment_receipts_line> cfdi_payment_receipts_line { get; set; }
        public virtual DbSet<cfdi_type_mx> cfdi_type_mx { get; set; }
        public virtual DbSet<cfdi_usage_mx> cfdi_usage_mx { get; set; }
        public virtual DbSet<chart_of_accts> chart_of_accts { get; set; }
        public virtual DbSet<chart_of_accts_edi> chart_of_accts_edi { get; set; }
        public virtual DbSet<check_payment_details> check_payment_details { get; set; }
        public virtual DbSet<_class> classes { get; set; }
        public virtual DbSet<class_name_x_form_code> class_name_x_form_code { get; set; }
        public virtual DbSet<clippership_return_10004> clippership_return_10004 { get; set; }
        public virtual DbSet<clippership_return_nfa_1934> clippership_return_nfa_1934 { get; set; }
        public virtual DbSet<code_group_p21> code_group_p21 { get; set; }
        public virtual DbSet<code_p21> code_p21 { get; set; }
        public virtual DbSet<code_x_code_group_p21> code_x_code_group_p21 { get; set; }
        public virtual DbSet<code_x_code_p21> code_x_code_p21 { get; set; }
        public virtual DbSet<collaborate_message_queue> collaborate_message_queue { get; set; }
        public virtual DbSet<collaborate_settings> collaborate_settings { get; set; }
        public virtual DbSet<collaborate_subscriber> collaborate_subscriber { get; set; }
        public virtual DbSet<column> columns { get; set; }
        public virtual DbSet<comm_defaults_days_overdue> comm_defaults_days_overdue { get; set; }
        public virtual DbSet<comm_run_line_rma_linked> comm_run_line_rma_linked { get; set; }
        public virtual DbSet<commission_defaults> commission_defaults { get; set; }
        public virtual DbSet<commission_rule> commission_rule { get; set; }
        public virtual DbSet<commission_rule_detail> commission_rule_detail { get; set; }
        public virtual DbSet<commission_run> commission_run { get; set; }
        public virtual DbSet<commission_run_exception> commission_run_exception { get; set; }
        public virtual DbSet<commission_run_line> commission_run_line { get; set; }
        public virtual DbSet<commission_run_line_rule> commission_run_line_rule { get; set; }
        public virtual DbSet<commission_run_rule> commission_run_rule { get; set; }
        public virtual DbSet<commission_schedule> commission_schedule { get; set; }
        public virtual DbSet<commission_schedule_detail> commission_schedule_detail { get; set; }
        public virtual DbSet<commodity_code> commodity_code { get; set; }
        public virtual DbSet<company> companies { get; set; }
        public virtual DbSet<company_111> company_111 { get; set; }
        public virtual DbSet<company_322> company_322 { get; set; }
        public virtual DbSet<company_agent> company_agent { get; set; }
        public virtual DbSet<company_ar_info> company_ar_info { get; set; }
        public virtual DbSet<company_attachments> company_attachments { get; set; }
        public virtual DbSet<company_cfdi_configuration> company_cfdi_configuration { get; set; }
        public virtual DbSet<company_cost_var_info> company_cost_var_info { get; set; }
        public virtual DbSet<company_cust_size_limits> company_cust_size_limits { get; set; }
        public virtual DbSet<company_daily_deposit_counter> company_daily_deposit_counter { get; set; }
        public virtual DbSet<company_direct_ship> company_direct_ship { get; set; }
        public virtual DbSet<company_distranet_info> company_distranet_info { get; set; }
        public virtual DbSet<company_edi_setting> company_edi_setting { get; set; }
        public virtual DbSet<company_eft_options> company_eft_options { get; set; }
        public virtual DbSet<company_ext_tax_gl_by_state> company_ext_tax_gl_by_state { get; set; }
        public virtual DbSet<company_ext_tax_nexus_state> company_ext_tax_nexus_state { get; set; }
        public virtual DbSet<company_form_template> company_form_template { get; set; }
        public virtual DbSet<company_greeting_10016> company_greeting_10016 { get; set; }
        public virtual DbSet<company_inv_no_display> company_inv_no_display { get; set; }
        public virtual DbSet<company_iva_tax> company_iva_tax { get; set; }
        public virtual DbSet<company_language> company_language { get; set; }
        public virtual DbSet<company_lc_search_order> company_lc_search_order { get; set; }
        public virtual DbSet<company_lost_sales> company_lost_sales { get; set; }
        public virtual DbSet<company_mac_adjustment> company_mac_adjustment { get; set; }
        public virtual DbSet<company_price_rounding_rules> company_price_rounding_rules { get; set; }
        public virtual DbSet<company_so_options> company_so_options { get; set; }
        public virtual DbSet<company_strategic_pricing> company_strategic_pricing { get; set; }
        public virtual DbSet<company_tax_registration> company_tax_registration { get; set; }
        public virtual DbSet<company_trade> company_trade { get; set; }
        public virtual DbSet<company_uk_mtd_setting> company_uk_mtd_setting { get; set; }
        public virtual DbSet<company_voucher_variance> company_voucher_variance { get; set; }
        public virtual DbSet<company_wit> company_wit { get; set; }
        public virtual DbSet<company_work_day> company_work_day { get; set; }
        public virtual DbSet<company_x_dimension> company_x_dimension { get; set; }
        public virtual DbSet<company_x_oe_loc> company_x_oe_loc { get; set; }
        public virtual DbSet<competitor> competitors { get; set; }
        public virtual DbSet<competitor_representative> competitor_representative { get; set; }
        public virtual DbSet<condition> conditions { get; set; }
        public virtual DbSet<connector_event> connector_event { get; set; }
        public virtual DbSet<conoco_export_history> conoco_export_history { get; set; }
        public virtual DbSet<cons_ap_log> cons_ap_log { get; set; }
        public virtual DbSet<cons_ap_log_voucher_exception> cons_ap_log_voucher_exception { get; set; }
        public virtual DbSet<cons_ap_vendors> cons_ap_vendors { get; set; }
        public virtual DbSet<cons_ap_vouchers> cons_ap_vouchers { get; set; }
        public virtual DbSet<consignment_billing_cycle> consignment_billing_cycle { get; set; }
        public virtual DbSet<consignment_bin_count> consignment_bin_count { get; set; }
        public virtual DbSet<consolidated_asn_pick_ticket> consolidated_asn_pick_ticket { get; set; }
        public virtual DbSet<consolidated_invoices_xref> consolidated_invoices_xref { get; set; }
        public virtual DbSet<consolidated_picking_hdr> consolidated_picking_hdr { get; set; }
        public virtual DbSet<consolidated_picking_line> consolidated_picking_line { get; set; }
        public virtual DbSet<contact_document> contact_document { get; set; }
        public virtual DbSet<contact_filter_tracking> contact_filter_tracking { get; set; }
        public virtual DbSet<contact_insurance> contact_insurance { get; set; }
        public virtual DbSet<contact_lead_source> contact_lead_source { get; set; }
        public virtual DbSet<contact_role> contact_role { get; set; }
        public virtual DbSet<contact_salesrep> contact_salesrep { get; set; }
        public virtual DbSet<contact_type> contact_type { get; set; }
        public virtual DbSet<contact_x_oe_hdr> contact_x_oe_hdr { get; set; }
        public virtual DbSet<contactlist> contactlists { get; set; }
        public virtual DbSet<contact> contacts { get; set; }
        public virtual DbSet<contacts_335> contacts_335 { get; set; }
        public virtual DbSet<contacts_outlook_sync_criteria> contacts_outlook_sync_criteria { get; set; }
        public virtual DbSet<contacts_x_ship_to> contacts_x_ship_to { get; set; }
        public virtual DbSet<contacts_x_supplier> contacts_x_supplier { get; set; }
        public virtual DbSet<container_building> container_building { get; set; }
        public virtual DbSet<container_building_po> container_building_po { get; set; }
        public virtual DbSet<container_receipts_freight_po> container_receipts_freight_po { get; set; }
        public virtual DbSet<container_receipts_hdr> container_receipts_hdr { get; set; }
        public virtual DbSet<container_receipts_line> container_receipts_line { get; set; }
        public virtual DbSet<container_type> container_type { get; set; }
        public virtual DbSet<contract_review> contract_review { get; set; }
        public virtual DbSet<contract_x_contract_class> contract_x_contract_class { get; set; }
        public virtual DbSet<coop_gl_account> coop_gl_account { get; set; }
        public virtual DbSet<copy_item_sql> copy_item_sql { get; set; }
        public virtual DbSet<copy_item_table> copy_item_table { get; set; }
        public virtual DbSet<copy_table_data_x_argument> copy_table_data_x_argument { get; set; }
        public virtual DbSet<copy_table_data_x_argument_val> copy_table_data_x_argument_val { get; set; }
        public virtual DbSet<copy_table_data_x_clause> copy_table_data_x_clause { get; set; }
        public virtual DbSet<copy_table_data_x_column> copy_table_data_x_column { get; set; }
        public virtual DbSet<copy_table_data_x_column_val> copy_table_data_x_column_val { get; set; }
        public virtual DbSet<copy_table_data_x_counter> copy_table_data_x_counter { get; set; }
        public virtual DbSet<copy_table_data_x_process> copy_table_data_x_process { get; set; }
        public virtual DbSet<copy_table_data_x_table> copy_table_data_x_table { get; set; }
        public virtual DbSet<core_class> core_class { get; set; }
        public virtual DbSet<core_status_family_detail> core_status_family_detail { get; set; }
        public virtual DbSet<core_status_family_hdr> core_status_family_hdr { get; set; }
        public virtual DbSet<corp_id> corp_id { get; set; }
        public virtual DbSet<counter> counters { get; set; }
        public virtual DbSet<country> countries { get; set; }
        public virtual DbSet<country_mx> country_mx { get; set; }
        public virtual DbSet<county> counties { get; set; }
        public virtual DbSet<cpa_customer_watchlist> cpa_customer_watchlist { get; set; }
        public virtual DbSet<cpa_gl_account_excluded_x_branch> cpa_gl_account_excluded_x_branch { get; set; }
        public virtual DbSet<cpa_grade_notes> cpa_grade_notes { get; set; }
        public virtual DbSet<cpa_indirect_cost> cpa_indirect_cost { get; set; }
        public virtual DbSet<cpa_indirect_cost_x_gl_account> cpa_indirect_cost_x_gl_account { get; set; }
        public virtual DbSet<cpa_net_profit_configuration> cpa_net_profit_configuration { get; set; }
        public virtual DbSet<cpa_scorecard_configuration> cpa_scorecard_configuration { get; set; }
        public virtual DbSet<cpa_scorecard_configuration_x_metric> cpa_scorecard_configuration_x_metric { get; set; }
        public virtual DbSet<credinv_x_invhdr_x_fcinv> credinv_x_invhdr_x_fcinv { get; set; }
        public virtual DbSet<credit_memo_code> credit_memo_code { get; set; }
        public virtual DbSet<credit_status> credit_status { get; set; }
        public virtual DbSet<credit_status_2164> credit_status_2164 { get; set; }
        public virtual DbSet<creditcard_avs_response_handling> creditcard_avs_response_handling { get; set; }
        public virtual DbSet<creditcard_emv> creditcard_emv { get; set; }
        public virtual DbSet<creditcard_emv_tags> creditcard_emv_tags { get; set; }
        public virtual DbSet<creditcard_payment_details> creditcard_payment_details { get; set; }
        public virtual DbSet<creditcard_proc_comp_user> creditcard_proc_comp_user { get; set; }
        public virtual DbSet<creditcard_processor> creditcard_processor { get; set; }
        public virtual DbSet<creditcard_processor_x_users> creditcard_processor_x_users { get; set; }
        public virtual DbSet<creditcard_signature> creditcard_signature { get; set; }
        public virtual DbSet<creditcard_transaction_receipt> creditcard_transaction_receipt { get; set; }
        public virtual DbSet<creditcard_transrequest> creditcard_transrequest { get; set; }
        public virtual DbSet<creditcard_transresponse> creditcard_transresponse { get; set; }
        public virtual DbSet<creditcard_transtype> creditcard_transtype { get; set; }
        public virtual DbSet<creditcard_validation> creditcard_validation { get; set; }
        public virtual DbSet<crew> crews { get; set; }
        public virtual DbSet<crm_contact_information> crm_contact_information { get; set; }
        public virtual DbSet<crm_run> crm_run { get; set; }
        public virtual DbSet<crystal_external_report> crystal_external_report { get; set; }
        public virtual DbSet<crystal_external_report_x_role> crystal_external_report_x_role { get; set; }
        public virtual DbSet<cube_factor> cube_factor { get; set; }
        public virtual DbSet<cube_modifier> cube_modifier { get; set; }
        public virtual DbSet<currency_contract> currency_contract { get; set; }
        public virtual DbSet<currency_hdr> currency_hdr { get; set; }
        public virtual DbSet<currency_hdr_warning_parameters> currency_hdr_warning_parameters { get; set; }
        public virtual DbSet<currency_line> currency_line { get; set; }
        public virtual DbSet<currency_sat_iso> currency_sat_iso { get; set; }
        public virtual DbSet<currency_variance_account> currency_variance_account { get; set; }
        public virtual DbSet<currency_x_sat_code> currency_x_sat_code { get; set; }
        public virtual DbSet<cust_defaults> cust_defaults { get; set; }
        public virtual DbSet<cust_defaults_email_defaults> cust_defaults_email_defaults { get; set; }
        public virtual DbSet<cust_defaults_foreign> cust_defaults_foreign { get; set; }
        public virtual DbSet<cust_defaults_labels> cust_defaults_labels { get; set; }
        public virtual DbSet<cust_defaults_merge_cust> cust_defaults_merge_cust { get; set; }
        public virtual DbSet<cust_defaults_strategic> cust_defaults_strategic { get; set; }
        public virtual DbSet<cust_defaults_terms_acct> cust_defaults_terms_acct { get; set; }
        public virtual DbSet<cust_part_no_group_hdr> cust_part_no_group_hdr { get; set; }
        public virtual DbSet<cust_part_no_group_line> cust_part_no_group_line { get; set; }
        public virtual DbSet<cust_part_no_notepad> cust_part_no_notepad { get; set; }
        public virtual DbSet<cust_x_inv_loc_edi32_discontinued_sent> cust_x_inv_loc_edi32_discontinued_sent { get; set; }
        public virtual DbSet<cust_x_inv_mast_edi846> cust_x_inv_mast_edi846 { get; set; }
        public virtual DbSet<cust_x_invsupplier_freight> cust_x_invsupplier_freight { get; set; }
        public virtual DbSet<custom_column_data_customer> custom_column_data_customer { get; set; }
        public virtual DbSet<custom_column_data_shipto> custom_column_data_shipto { get; set; }
        public virtual DbSet<custom_column_data_supplier> custom_column_data_supplier { get; set; }
        public virtual DbSet<custom_column_data_vendor> custom_column_data_vendor { get; set; }
        public virtual DbSet<custom_column_definition> custom_column_definition { get; set; }
        public virtual DbSet<custom_column_list> custom_column_list { get; set; }
        public virtual DbSet<custom_objects> custom_objects { get; set; }
        public virtual DbSet<custom_objects_detail> custom_objects_detail { get; set; }
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<customer_10011> customer_10011 { get; set; }
        public virtual DbSet<customer_194> customer_194 { get; set; }
        public virtual DbSet<customer_2164> customer_2164 { get; set; }
        public virtual DbSet<customer_322> customer_322 { get; set; }
        public virtual DbSet<customer_723> customer_723 { get; set; }
        public virtual DbSet<customer_activity> customer_activity { get; set; }
        public virtual DbSet<customer_activity_link> customer_activity_link { get; set; }
        public virtual DbSet<customer_activity_type> customer_activity_type { get; set; }
        public virtual DbSet<customer_aha> customer_aha { get; set; }
        public virtual DbSet<customer_call> customer_call { get; set; }
        public virtual DbSet<customer_call_inv_detail> customer_call_inv_detail { get; set; }
        public virtual DbSet<customer_category> customer_category { get; set; }
        public virtual DbSet<customer_class_order_charge> customer_class_order_charge { get; set; }
        public virtual DbSet<customer_class_x_inventory_class> customer_class_x_inventory_class { get; set; }
        public virtual DbSet<customer_cons_inv_cardlock> customer_cons_inv_cardlock { get; set; }
        public virtual DbSet<customer_contract> customer_contract { get; set; }
        public virtual DbSet<customer_contract_class> customer_contract_class { get; set; }
        public virtual DbSet<customer_coop_advert_allowance> customer_coop_advert_allowance { get; set; }
        public virtual DbSet<customer_core_tracking> customer_core_tracking { get; set; }
        public virtual DbSet<customer_coupon> customer_coupon { get; set; }
        public virtual DbSet<customer_credit_history> customer_credit_history { get; set; }
        public virtual DbSet<customer_credit_history_daily> customer_credit_history_daily { get; set; }
        public virtual DbSet<customer_document> customer_document { get; set; }
        public virtual DbSet<customer_dynamic_dataset> customer_dynamic_dataset { get; set; }
        public virtual DbSet<customer_dynamic_dataset_detail> customer_dynamic_dataset_detail { get; set; }
        public virtual DbSet<customer_edi_setting> customer_edi_setting { get; set; }
        public virtual DbSet<customer_edi_trans_detail> customer_edi_trans_detail { get; set; }
        public virtual DbSet<customer_edi_transaction> customer_edi_transaction { get; set; }
        public virtual DbSet<customer_eft> customer_eft { get; set; }
        public virtual DbSet<customer_email_defaults> customer_email_defaults { get; set; }
        public virtual DbSet<customer_email_subject> customer_email_subject { get; set; }
        public virtual DbSet<customer_fedex> customer_fedex { get; set; }
        public virtual DbSet<customer_form_template> customer_form_template { get; set; }
        public virtual DbSet<customer_freight_charge> customer_freight_charge { get; set; }
        public virtual DbSet<customer_freight_display> customer_freight_display { get; set; }
        public virtual DbSet<customer_freight_options> customer_freight_options { get; set; }
        public virtual DbSet<customer_gl_code> customer_gl_code { get; set; }
        public virtual DbSet<customer_goal_detail> customer_goal_detail { get; set; }
        public virtual DbSet<customer_goal_hdr> customer_goal_hdr { get; set; }
        public virtual DbSet<customer_gpo> customer_gpo { get; set; }
        public virtual DbSet<customer_help> customer_help { get; set; }
        public virtual DbSet<customer_high_radius> customer_high_radius { get; set; }
        public virtual DbSet<customer_invoice_surcharge> customer_invoice_surcharge { get; set; }
        public virtual DbSet<customer_item_comm_class> customer_item_comm_class { get; set; }
        public virtual DbSet<customer_item_reserve> customer_item_reserve { get; set; }
        public virtual DbSet<customer_iva_tax> customer_iva_tax { get; set; }
        public virtual DbSet<customer_kit_markup> customer_kit_markup { get; set; }
        public virtual DbSet<customer_language> customer_language { get; set; }
        public virtual DbSet<customer_lot_requirement> customer_lot_requirement { get; set; }
        public virtual DbSet<customer_merge_audit> customer_merge_audit { get; set; }
        public virtual DbSet<customer_merge_cust> customer_merge_cust { get; set; }
        public virtual DbSet<customer_merge_verification> customer_merge_verification { get; set; }
        public virtual DbSet<customer_notepad> customer_notepad { get; set; }
        public virtual DbSet<customer_oe_info> customer_oe_info { get; set; }
        public virtual DbSet<customer_order_duplicate_check> customer_order_duplicate_check { get; set; }
        public virtual DbSet<customer_order_history> customer_order_history { get; set; }
        public virtual DbSet<customer_order_history_daily> customer_order_history_daily { get; set; }
        public virtual DbSet<customer_order_surcharge> customer_order_surcharge { get; set; }
        public virtual DbSet<customer_package_hdr> customer_package_hdr { get; set; }
        public virtual DbSet<customer_package_hdr_xfer> customer_package_hdr_xfer { get; set; }
        public virtual DbSet<customer_package_line> customer_package_line { get; set; }
        public virtual DbSet<customer_package_line_xfer> customer_package_line_xfer { get; set; }
        public virtual DbSet<customer_profitability_role> customer_profitability_role { get; set; }
        public virtual DbSet<customer_retail> customer_retail { get; set; }
        public virtual DbSet<customer_retail_item> customer_retail_item { get; set; }
        public virtual DbSet<customer_retail_pricing> customer_retail_pricing { get; set; }
        public virtual DbSet<customer_salesrep> customer_salesrep { get; set; }
        public virtual DbSet<customer_salesrep_location> customer_salesrep_location { get; set; }
        public virtual DbSet<customer_sensitivity_matrix> customer_sensitivity_matrix { get; set; }
        public virtual DbSet<customer_single_discount> customer_single_discount { get; set; }
        public virtual DbSet<customer_state_taxable_setting> customer_state_taxable_setting { get; set; }
        public virtual DbSet<customer_statement_history> customer_statement_history { get; set; }
        public virtual DbSet<customer_strategic_item> customer_strategic_item { get; set; }
        public virtual DbSet<customer_strategic_pricing> customer_strategic_pricing { get; set; }
        public virtual DbSet<customer_supplier> customer_supplier { get; set; }
        public virtual DbSet<customer_supplier_freight> customer_supplier_freight { get; set; }
        public virtual DbSet<customer_terms> customer_terms { get; set; }
        public virtual DbSet<customer_tpw> customer_tpw { get; set; }
        public virtual DbSet<customer_tradenet> customer_tradenet { get; set; }
        public virtual DbSet<customer_type> customer_type { get; set; }
        public virtual DbSet<customer_vat> customer_vat { get; set; }
        public virtual DbSet<customer_volume_discount> customer_volume_discount { get; set; }
        public virtual DbSet<customer_weboe> customer_weboe { get; set; }
        public virtual DbSet<customer_x_contract_class> customer_x_contract_class { get; set; }
        public virtual DbSet<customer_x_dealer_type> customer_x_dealer_type { get; set; }
        public virtual DbSet<customer_x_integration> customer_x_integration { get; set; }
        public virtual DbSet<customer_x_inv_mast> customer_x_inv_mast { get; set; }
        public virtual DbSet<customer_x_restricted_class> customer_x_restricted_class { get; set; }
        public virtual DbSet<customer_x_rewards_program> customer_x_rewards_program { get; set; }
        public virtual DbSet<customer_x_shipto_credit_history_daily> customer_x_shipto_credit_history_daily { get; set; }
        public virtual DbSet<customer_x_vendor> customer_x_vendor { get; set; }
        public virtual DbSet<customs_declaration_mx> customs_declaration_mx { get; set; }
        public virtual DbSet<customs_duty_rate> customs_duty_rate { get; set; }
        public virtual DbSet<customs_mx> customs_mx { get; set; }
        public virtual DbSet<customs_patent_mx> customs_patent_mx { get; set; }
        public virtual DbSet<cycle_count_accuracy> cycle_count_accuracy { get; set; }
        public virtual DbSet<cycle_count_detail> cycle_count_detail { get; set; }
        public virtual DbSet<cycle_count_hdr> cycle_count_hdr { get; set; }
        public virtual DbSet<cycle_count_loc_criteria> cycle_count_loc_criteria { get; set; }
        public virtual DbSet<cycle_count_product_group> cycle_count_product_group { get; set; }
        public virtual DbSet<cycle_count_purchase_class> cycle_count_purchase_class { get; set; }
        public virtual DbSet<data_ident_x_data_ident_group> data_ident_x_data_ident_group { get; set; }
        public virtual DbSet<data_identifier> data_identifier { get; set; }
        public virtual DbSet<data_identifier_group> data_identifier_group { get; set; }
        public virtual DbSet<datasource> datasources { get; set; }
        public virtual DbSet<datasource_detail> datasource_detail { get; set; }
        public virtual DbSet<datasource_x_roles> datasource_x_roles { get; set; }
        public virtual DbSet<datasource_x_users> datasource_x_users { get; set; }
        public virtual DbSet<datastream> datastreams { get; set; }
        public virtual DbSet<datatypes_with_no_parens> datatypes_with_no_parens { get; set; }
        public virtual DbSet<db_driven_maint> db_driven_maint { get; set; }
        public virtual DbSet<db_driven_maint_key> db_driven_maint_key { get; set; }
        public virtual DbSet<db_sql> db_sql { get; set; }
        public virtual DbSet<dbmail_information> dbmail_information { get; set; }
        public virtual DbSet<dc_nav_drill> dc_nav_drill { get; set; }
        public virtual DbSet<dc_nav_drill_source_user> dc_nav_drill_source_user { get; set; }
        public virtual DbSet<dc_nav_drill_x_roles> dc_nav_drill_x_roles { get; set; }
        public virtual DbSet<dc_nav_drill_x_users> dc_nav_drill_x_users { get; set; }
        public virtual DbSet<dc_nav_source_request> dc_nav_source_request { get; set; }
        public virtual DbSet<dc_security> dc_security { get; set; }
        public virtual DbSet<dc_security_detail> dc_security_detail { get; set; }
        public virtual DbSet<dc_security_x_roles> dc_security_x_roles { get; set; }
        public virtual DbSet<dc_security_x_users> dc_security_x_users { get; set; }
        public virtual DbSet<dct_layout_column> dct_layout_column { get; set; }
        public virtual DbSet<dct_layout_file> dct_layout_file { get; set; }
        public virtual DbSet<dct_layout_hdr> dct_layout_hdr { get; set; }
        public virtual DbSet<dct_layout_rule> dct_layout_rule { get; set; }
        public virtual DbSet<dct_lookup_detail> dct_lookup_detail { get; set; }
        public virtual DbSet<dct_lookup_hdr> dct_lookup_hdr { get; set; }
        public virtual DbSet<dct_transaction> dct_transaction { get; set; }
        public virtual DbSet<dct_transaction_config> dct_transaction_config { get; set; }
        public virtual DbSet<dct_transaction_table> dct_transaction_table { get; set; }
        public virtual DbSet<dct_transaction_table_config> dct_transaction_table_config { get; set; }
        public virtual DbSet<dct_transaction_table_rule> dct_transaction_table_rule { get; set; }
        public virtual DbSet<dea_license> dea_license { get; set; }
        public virtual DbSet<dealer_comm_tax_line> dealer_comm_tax_line { get; set; }
        public virtual DbSet<dealer_commission> dealer_commission { get; set; }
        public virtual DbSet<dealer_commission_payments> dealer_commission_payments { get; set; }
        public virtual DbSet<dealer_commission_receipts> dealer_commission_receipts { get; set; }
        public virtual DbSet<dealer_type> dealer_type { get; set; }
        public virtual DbSet<dealer_warranty_failure_code> dealer_warranty_failure_code { get; set; }
        public virtual DbSet<deallocate_transactions_run> deallocate_transactions_run { get; set; }
        public virtual DbSet<decoder_comb_segment_dtl> decoder_comb_segment_dtl { get; set; }
        public virtual DbSet<decoder_comb_segment_hdr> decoder_comb_segment_hdr { get; set; }
        public virtual DbSet<decoder_segment_dtl> decoder_segment_dtl { get; set; }
        public virtual DbSet<decoder_segment_dtl_breaks> decoder_segment_dtl_breaks { get; set; }
        public virtual DbSet<decoder_segment_hdr> decoder_segment_hdr { get; set; }
        public virtual DbSet<decoder_segment_hdr_rules> decoder_segment_hdr_rules { get; set; }
        public virtual DbSet<decoder_template_assm_opts> decoder_template_assm_opts { get; set; }
        public virtual DbSet<decoder_template_dtl> decoder_template_dtl { get; set; }
        public virtual DbSet<decoder_template_dtl_rules> decoder_template_dtl_rules { get; set; }
        public virtual DbSet<decoder_template_dtl_val_rules> decoder_template_dtl_val_rules { get; set; }
        public virtual DbSet<decoder_template_hdr> decoder_template_hdr { get; set; }
        public virtual DbSet<decoder_template_hdr_dflt> decoder_template_hdr_dflt { get; set; }
        public virtual DbSet<decoder_template_hdr_mask> decoder_template_hdr_mask { get; set; }
        public virtual DbSet<degree_days> degree_days { get; set; }
        public virtual DbSet<degree_days_delivery> degree_days_delivery { get; set; }
        public virtual DbSet<delivery> deliveries { get; set; }
        public virtual DbSet<delivery_group> delivery_group { get; set; }
        public virtual DbSet<delivery_package> delivery_package { get; set; }
        public virtual DbSet<delivery_pick_ticket> delivery_pick_ticket { get; set; }
        public virtual DbSet<delivery_pick_ticket_detail> delivery_pick_ticket_detail { get; set; }
        public virtual DbSet<delivery_rma> delivery_rma { get; set; }
        public virtual DbSet<delivery_rma_detail> delivery_rma_detail { get; set; }
        public virtual DbSet<delivery_ticket_info> delivery_ticket_info { get; set; }
        public virtual DbSet<delivery_x_delivery_group> delivery_x_delivery_group { get; set; }
        public virtual DbSet<delivery_zone> delivery_zone { get; set; }
        public virtual DbSet<demand_forecast_formula> demand_forecast_formula { get; set; }
        public virtual DbSet<demand_level> demand_level { get; set; }
        public virtual DbSet<demand_line_point> demand_line_point { get; set; }
        public virtual DbSet<demand_pattern_criteria> demand_pattern_criteria { get; set; }
        public virtual DbSet<demand_pattern_run> demand_pattern_run { get; set; }
        public virtual DbSet<demand_pattern_run_seasonal> demand_pattern_run_seasonal { get; set; }
        public virtual DbSet<demand_period> demand_period { get; set; }
        public virtual DbSet<demand_review_adjustment> demand_review_adjustment { get; set; }
        public virtual DbSet<department> departments { get; set; }
        public virtual DbSet<deployed_map> deployed_map { get; set; }
        public virtual DbSet<deployed_maps_mft> deployed_maps_mft { get; set; }
        public virtual DbSet<design> designs { get; set; }
        public virtual DbSet<dim_acct_report_def> dim_acct_report_def { get; set; }
        public virtual DbSet<dimension> dimensions { get; set; }
        public virtual DbSet<direct_mass_update_job> direct_mass_update_job { get; set; }
        public virtual DbSet<direction_recent_search> direction_recent_search { get; set; }
        public virtual DbSet<discount_group> discount_group { get; set; }
        public virtual DbSet<discount_group_defaults> discount_group_defaults { get; set; }
        public virtual DbSet<discount_group_x_restricted_class> discount_group_x_restricted_class { get; set; }
        public virtual DbSet<discount_group_x_rewards_program> discount_group_x_rewards_program { get; set; }
        public virtual DbSet<discount_installment_10005> discount_installment_10005 { get; set; }
        public virtual DbSet<dispatch_user_setting> dispatch_user_setting { get; set; }
        public virtual DbSet<dispatcher_pricing_dtl> dispatcher_pricing_dtl { get; set; }
        public virtual DbSet<dispatcher_pricing_hdr> dispatcher_pricing_hdr { get; set; }
        public virtual DbSet<disputed_voucher_reason> disputed_voucher_reason { get; set; }
        public virtual DbSet<distranet_info> distranet_info { get; set; }
        public virtual DbSet<division> divisions { get; set; }
        public virtual DbSet<document> documents { get; set; }
        public virtual DbSet<document_inout_data> document_inout_data { get; set; }
        public virtual DbSet<document_line_bin> document_line_bin { get; set; }
        public virtual DbSet<document_line_inv_xref_dtl> document_line_inv_xref_dtl { get; set; }
        public virtual DbSet<document_line_inv_xref_hdr> document_line_inv_xref_hdr { get; set; }
        public virtual DbSet<document_line_lot> document_line_lot { get; set; }
        public virtual DbSet<document_line_lot_bin_xref> document_line_lot_bin_xref { get; set; }
        public virtual DbSet<document_line_lot_grid> document_line_lot_grid { get; set; }
        public virtual DbSet<document_line_lot_sub> document_line_lot_sub { get; set; }
        public virtual DbSet<document_line_serial> document_line_serial { get; set; }
        public virtual DbSet<document_link> document_link { get; set; }
        public virtual DbSet<document_link_area> document_link_area { get; set; }
        public virtual DbSet<document_link_docstar> document_link_docstar { get; set; }
        public virtual DbSet<document_link_entity_req> document_link_entity_req { get; set; }
        public virtual DbSet<document_link_key> document_link_key { get; set; }
        public virtual DbSet<document_link_trans_type> document_link_trans_type { get; set; }
        public virtual DbSet<document_link_window> document_link_window { get; set; }
        public virtual DbSet<document_link_window_x_key> document_link_window_x_key { get; set; }
        public virtual DbSet<document_printer_x_loc> document_printer_x_loc { get; set; }
        public virtual DbSet<document_summary> document_summary { get; set; }
        public virtual DbSet<document_transaction_data> document_transaction_data { get; set; }
        public virtual DbSet<document_types> document_types { get; set; }
        public virtual DbSet<door_bin_x_shipping_route> door_bin_x_shipping_route { get; set; }
        public virtual DbSet<downpayment_refund_details> downpayment_refund_details { get; set; }
        public virtual DbSet<drp_item_selection_criteria> drp_item_selection_criteria { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<duty_drawback_hdr> duty_drawback_hdr { get; set; }
        public virtual DbSet<duty_drawback_line> duty_drawback_line { get; set; }
        public virtual DbSet<dw_autopop_cache> dw_autopop_cache { get; set; }
        public virtual DbSet<dw_syntax_cache> dw_syntax_cache { get; set; }
        public virtual DbSet<dw_syntax_cache_window> dw_syntax_cache_window { get; set; }
        public virtual DbSet<dwobject> dwobjects { get; set; }
        public virtual DbSet<dwobject_dependency> dwobject_dependency { get; set; }
        public virtual DbSet<dwobject_syntax> dwobject_syntax { get; set; }
        public virtual DbSet<dynachange> dynachanges { get; set; }
        public virtual DbSet<dynachange_config> dynachange_config { get; set; }
        public virtual DbSet<dynachange_menu> dynachange_menu { get; set; }
        public virtual DbSet<ecc_alternate_code_delete> ecc_alternate_code_delete { get; set; }
        public virtual DbSet<ecc_attribute_x_custom_column> ecc_attribute_x_custom_column { get; set; }
        public virtual DbSet<ecc_column_lookup> ecc_column_lookup { get; set; }
        public virtual DbSet<ecc_contacts_x_ship_to_delete> ecc_contacts_x_ship_to_delete { get; set; }
        public virtual DbSet<ecc_custom_column_mapping> ecc_custom_column_mapping { get; set; }
        public virtual DbSet<ecc_custom_column_mapping_x_column> ecc_custom_column_mapping_x_column { get; set; }
        public virtual DbSet<ecc_custom_column_transfer_type_x_table> ecc_custom_column_transfer_type_x_table { get; set; }
        public virtual DbSet<ecc_customer_detail> ecc_customer_detail { get; set; }
        public virtual DbSet<ecc_document_xref> ecc_document_xref { get; set; }
        public virtual DbSet<ecc_instance> ecc_instance { get; set; }
        public virtual DbSet<ecc_oe_contacts_customer_delete> ecc_oe_contacts_customer_delete { get; set; }
        public virtual DbSet<ecc_p21_get_customer_address_xml> ecc_p21_get_customer_address_xml { get; set; }
        public virtual DbSet<ecc_p21_get_customer_address_xml_work> ecc_p21_get_customer_address_xml_work { get; set; }
        public virtual DbSet<ecc_p21_get_customer_xml> ecc_p21_get_customer_xml { get; set; }
        public virtual DbSet<ecc_p21_get_customer_xml_work> ecc_p21_get_customer_xml_work { get; set; }
        public virtual DbSet<ecc_p21_get_items_xml> ecc_p21_get_items_xml { get; set; }
        public virtual DbSet<ecc_p21_get_items_xml_work> ecc_p21_get_items_xml_work { get; set; }
        public virtual DbSet<ecc_p21_get_locations_xml> ecc_p21_get_locations_xml { get; set; }
        public virtual DbSet<ecc_p21_get_locations_xml_work> ecc_p21_get_locations_xml_work { get; set; }
        public virtual DbSet<ecc_p21_get_oe_contacts_customer_xml> ecc_p21_get_oe_contacts_customer_xml { get; set; }
        public virtual DbSet<ecc_p21_get_oe_contacts_customer_xml_work> ecc_p21_get_oe_contacts_customer_xml_work { get; set; }
        public virtual DbSet<ecc_p21_get_shopping_list_xml> ecc_p21_get_shopping_list_xml { get; set; }
        public virtual DbSet<ecc_p21_get_shopping_list_xml_work> ecc_p21_get_shopping_list_xml_work { get; set; }
        public virtual DbSet<ecc_sb_ALT> ecc_sb_ALT { get; set; }
        public virtual DbSet<ecc_sb_audit> ecc_sb_audit { get; set; }
        public virtual DbSet<ecc_sb_CAD> ecc_sb_CAD { get; set; }
        public virtual DbSet<ecc_sb_CUCO> ecc_sb_CUCO { get; set; }
        public virtual DbSet<ecc_sb_CUS> ecc_sb_CUS { get; set; }
        public virtual DbSet<ecc_sb_STK> ecc_sb_STK { get; set; }
        public virtual DbSet<ecc_sb_STT> ecc_sb_STT { get; set; }
        public virtual DbSet<ecc_ship_to_x_inv_mast_delete> ecc_ship_to_x_inv_mast_delete { get; set; }
        public virtual DbSet<ecc_short_code_delete> ecc_short_code_delete { get; set; }
        public virtual DbSet<ecc_sync_info> ecc_sync_info { get; set; }
        public virtual DbSet<ecc_transaction_order_by> ecc_transaction_order_by { get; set; }
        public virtual DbSet<eco_fee_code> eco_fee_code { get; set; }
        public virtual DbSet<edi_852_reserved_po_info> edi_852_reserved_po_info { get; set; }
        public virtual DbSet<edi_process_info> edi_process_info { get; set; }
        public virtual DbSet<eh_invoice_detail> eh_invoice_detail { get; set; }
        public virtual DbSet<eh_mro_api_log> eh_mro_api_log { get; set; }
        public virtual DbSet<email_log> email_log { get; set; }
        public virtual DbSet<email_notification> email_notification { get; set; }
        public virtual DbSet<email_notification_message> email_notification_message { get; set; }
        public virtual DbSet<email_notification_orders> email_notification_orders { get; set; }
        public virtual DbSet<email_notification_recipient> email_notification_recipient { get; set; }
        public virtual DbSet<email_signature_dflt_user_x_cust> email_signature_dflt_user_x_cust { get; set; }
        public virtual DbSet<enterprise_search> enterprise_search { get; set; }
        public virtual DbSet<epayment_response_code_info> epayment_response_code_info { get; set; }
        public virtual DbSet<epf_config_settings> epf_config_settings { get; set; }
        public virtual DbSet<epf_log> epf_log { get; set; }
        public virtual DbSet<epf_merchant_account> epf_merchant_account { get; set; }
        public virtual DbSet<epf_merchant_account_options> epf_merchant_account_options { get; set; }
        public virtual DbSet<epf_payment_type_mapping> epf_payment_type_mapping { get; set; }
        public virtual DbSet<epf_plugin> epf_plugin { get; set; }
        public virtual DbSet<epf_plugin_log> epf_plugin_log { get; set; }
        public virtual DbSet<epf_processor_account> epf_processor_account { get; set; }
        public virtual DbSet<epf_transaction_detail> epf_transaction_detail { get; set; }
        public virtual DbSet<epic_cart> epic_cart { get; set; }
        public virtual DbSet<equip_engine_type> equip_engine_type { get; set; }
        public virtual DbSet<equip_manufacturer> equip_manufacturer { get; set; }
        public virtual DbSet<equip_model> equip_model { get; set; }
        public virtual DbSet<error_log_autocreate_invreturn> error_log_autocreate_invreturn { get; set; }
        public virtual DbSet<esc_base_view_alias> esc_base_view_alias { get; set; }
        public virtual DbSet<eva_skill_security> eva_skill_security { get; set; }
        public virtual DbSet<eva_skill_security_x_roles> eva_skill_security_x_roles { get; set; }
        public virtual DbSet<eva_skill_security_x_users> eva_skill_security_x_users { get; set; }
        public virtual DbSet<event_order> event_order { get; set; }
        public virtual DbSet<ewing_coupon> ewing_coupon { get; set; }
        public virtual DbSet<ewing_job_line> ewing_job_line { get; set; }
        public virtual DbSet<exchange_rate_current> exchange_rate_current { get; set; }
        public virtual DbSet<export_counter> export_counter { get; set; }
        public virtual DbSet<export_matrix> export_matrix { get; set; }
        public virtual DbSet<ext_crm_setting> ext_crm_setting { get; set; }
        public virtual DbSet<extensibility_dropdown_value> extensibility_dropdown_value { get; set; }
        public virtual DbSet<extensibility_object> extensibility_object { get; set; }
        public virtual DbSet<extensibility_window> extensibility_window { get; set; }
        public virtual DbSet<external_count_hdr> external_count_hdr { get; set; }
        public virtual DbSet<external_count_line> external_count_line { get; set; }
        public virtual DbSet<external_object> external_object { get; set; }
        public virtual DbSet<external_tax_backup_trans> external_tax_backup_trans { get; set; }
        public virtual DbSet<external_tax_detail> external_tax_detail { get; set; }
        public virtual DbSet<external_tax_hdr> external_tax_hdr { get; set; }
        public virtual DbSet<external_tax_line> external_tax_line { get; set; }
        public virtual DbSet<factor_type_mx> factor_type_mx { get; set; }
        public virtual DbSet<fascor_export_data> fascor_export_data { get; set; }
        public virtual DbSet<fascor_export_log> fascor_export_log { get; set; }
        public virtual DbSet<fascor_import_data> fascor_import_data { get; set; }
        public virtual DbSet<fascor_import_ship_temp> fascor_import_ship_temp { get; set; }
        public virtual DbSet<fascor_invdiscrepancy> fascor_invdiscrepancy { get; set; }
        public virtual DbSet<fast_edit_change> fast_edit_change { get; set; }
        public virtual DbSet<fast_edit_detail> fast_edit_detail { get; set; }
        public virtual DbSet<fast_edit_error> fast_edit_error { get; set; }
        public virtual DbSet<fast_edit_hdr> fast_edit_hdr { get; set; }
        public virtual DbSet<fast_edit_template> fast_edit_template { get; set; }
        public virtual DbSet<fast_edit_template_class> fast_edit_template_class { get; set; }
        public virtual DbSet<fast_edit_template_column> fast_edit_template_column { get; set; }
        public virtual DbSet<fast_edit_template_detail> fast_edit_template_detail { get; set; }
        public virtual DbSet<fast_edit_template_query> fast_edit_template_query { get; set; }
        public virtual DbSet<fastedit_results> fastedit_results { get; set; }
        public virtual DbSet<fastedit_results_columns> fastedit_results_columns { get; set; }
        public virtual DbSet<fastedit_results_dataelements> fastedit_results_dataelements { get; set; }
        public virtual DbSet<fastedit_roles> fastedit_roles { get; set; }
        public virtual DbSet<fault_tolerance_area_code> fault_tolerance_area_code { get; set; }
        public virtual DbSet<fault_tolerance_audit_trail> fault_tolerance_audit_trail { get; set; }
        public virtual DbSet<fault_tolerance_problem_code> fault_tolerance_problem_code { get; set; }
        public virtual DbSet<fax_cover> fax_cover { get; set; }
        public virtual DbSet<fc_dataobject> fc_dataobject { get; set; }
        public virtual DbSet<fc_dataobject_column> fc_dataobject_column { get; set; }
        public virtual DbSet<fc_dataobject_table> fc_dataobject_table { get; set; }
        public virtual DbSet<fedex_return_tag> fedex_return_tag { get; set; }
        public virtual DbSet<fedex_return_tag_detail> fedex_return_tag_detail { get; set; }
        public virtual DbSet<fedex_service_type> fedex_service_type { get; set; }
        public virtual DbSet<fedex_shipment_info> fedex_shipment_info { get; set; }
        public virtual DbSet<fedex_smartpost_hub> fedex_smartpost_hub { get; set; }
        public virtual DbSet<feedback_data_audit_trail> feedback_data_audit_trail { get; set; }
        public virtual DbSet<fidelitone_trans_log> fidelitone_trans_log { get; set; }
        public virtual DbSet<field_chooser_area> field_chooser_area { get; set; }
        public virtual DbSet<field_chooser_info> field_chooser_info { get; set; }
        public virtual DbSet<fifo_layer_cost_history> fifo_layer_cost_history { get; set; }
        public virtual DbSet<fifo_layer_transaction> fifo_layer_transaction { get; set; }
        public virtual DbSet<fifo_layers> fifo_layers { get; set; }
        public virtual DbSet<file_folder_upload_log> file_folder_upload_log { get; set; }
        public virtual DbSet<fin_report> fin_report { get; set; }
        public virtual DbSet<fin_report_stats_setup> fin_report_stats_setup { get; set; }
        public virtual DbSet<finance_charge_cycle> finance_charge_cycle { get; set; }
        public virtual DbSet<financial_report_column> financial_report_column { get; set; }
        public virtual DbSet<financial_report_row> financial_report_row { get; set; }
        public virtual DbSet<financial_report_row_x_acct> financial_report_row_x_acct { get; set; }
        public virtual DbSet<floor_plan_10002> floor_plan_10002 { get; set; }
        public virtual DbSet<for_alternate_code> for_alternate_code { get; set; }
        public virtual DbSet<for_inv_mast> for_inv_mast { get; set; }
        public virtual DbSet<for_item_category> for_item_category { get; set; }
        public virtual DbSet<for_item_category_text> for_item_category_text { get; set; }
        public virtual DbSet<for_note> for_note { get; set; }
        public virtual DbSet<form> forms { get; set; }
        public virtual DbSet<form_destination> form_destination { get; set; }
        public virtual DbSet<form_destination_hierarchy> form_destination_hierarchy { get; set; }
        public virtual DbSet<forms_output_log> forms_output_log { get; set; }
        public virtual DbSet<frame_menu> frame_menu { get; set; }
        public virtual DbSet<frame_menu_reporting> frame_menu_reporting { get; set; }
        public virtual DbSet<freight_charge> freight_charge { get; set; }
        public virtual DbSet<freight_charge_break> freight_charge_break { get; set; }
        public virtual DbSet<freight_charge_by_mile_dtl> freight_charge_by_mile_dtl { get; set; }
        public virtual DbSet<freight_charge_by_mile_hdr> freight_charge_by_mile_hdr { get; set; }
        public virtual DbSet<freight_charge_carrier> freight_charge_carrier { get; set; }
        public virtual DbSet<freight_code> freight_code { get; set; }
        public virtual DbSet<freight_code_2186> freight_code_2186 { get; set; }
        public virtual DbSet<freight_code_220> freight_code_220 { get; set; }
        public virtual DbSet<freight_group_charge> freight_group_charge { get; set; }
        public virtual DbSet<freight_group_dtl> freight_group_dtl { get; set; }
        public virtual DbSet<freight_group_hdr> freight_group_hdr { get; set; }
        public virtual DbSet<freight_handling_break> freight_handling_break { get; set; }
        public virtual DbSet<freight_rate_hdr> freight_rate_hdr { get; set; }
        public virtual DbSet<freight_rate_line> freight_rate_line { get; set; }
        public virtual DbSet<freightquote_class> freightquote_class { get; set; }
        public virtual DbSet<freightquote_package_detail> freightquote_package_detail { get; set; }
        public virtual DbSet<freightquote_package_hdr> freightquote_package_hdr { get; set; }
        public virtual DbSet<freightquote_pkg_type> freightquote_pkg_type { get; set; }
        public virtual DbSet<frl_seg_ctrl> frl_seg_ctrl { get; set; }
        public virtual DbSet<frl_seg_desc> frl_seg_desc { get; set; }
        public virtual DbSet<gas_formula_dtl> gas_formula_dtl { get; set; }
        public virtual DbSet<gas_formula_hdr> gas_formula_hdr { get; set; }
        public virtual DbSet<gensco_pricing_request> gensco_pricing_request { get; set; }
        public virtual DbSet<geocom_handheld> geocom_handheld { get; set; }
        public virtual DbSet<gl> gls { get; set; }
        public virtual DbSet<gl_alloc> gl_alloc { get; set; }
        public virtual DbSet<gl_audit_trail> gl_audit_trail { get; set; }
        public virtual DbSet<gl_code> gl_code { get; set; }
        public virtual DbSet<gl_code_list_detail> gl_code_list_detail { get; set; }
        public virtual DbSet<gl_code_list_hdr> gl_code_list_hdr { get; set; }
        public virtual DbSet<gl_dimen_type> gl_dimen_type { get; set; }
        public virtual DbSet<gl_dimen_type_x_value> gl_dimen_type_x_value { get; set; }
        public virtual DbSet<gl_notepad> gl_notepad { get; set; }
        public virtual DbSet<gl_reporting_curr> gl_reporting_curr { get; set; }
        public virtual DbSet<gl_system_parameters> gl_system_parameters { get; set; }
        public virtual DbSet<gl_trans_x_dimension> gl_trans_x_dimension { get; set; }
        public virtual DbSet<gl_trans_x_dimension_audit_trail> gl_trans_x_dimension_audit_trail { get; set; }
        public virtual DbSet<gpor_item_limiter> gpor_item_limiter { get; set; }
        public virtual DbSet<gpor_run> gpor_run { get; set; }
        public virtual DbSet<gpor_run_hdr> gpor_run_hdr { get; set; }
        public virtual DbSet<gpor_supplier_pending_log> gpor_supplier_pending_log { get; set; }
        public virtual DbSet<gpor_vss> gpor_vss { get; set; }
        public virtual DbSet<group_pick_ticket_detail> group_pick_ticket_detail { get; set; }
        public virtual DbSet<group_pick_ticket_hdr> group_pick_ticket_hdr { get; set; }
        public virtual DbSet<group_po_hdr> group_po_hdr { get; set; }
        public virtual DbSet<group_po_line> group_po_line { get; set; }
        public virtual DbSet<group_po_receiving_items> group_po_receiving_items { get; set; }
        public virtual DbSet<grow_metric> grow_metric { get; set; }
        public virtual DbSet<grow_metric_criteria> grow_metric_criteria { get; set; }
        public virtual DbSet<grow_metric_x_roles> grow_metric_x_roles { get; set; }
        public virtual DbSet<grow_metric_x_users> grow_metric_x_users { get; set; }
        public virtual DbSet<gtor_run> gtor_run { get; set; }
        public virtual DbSet<hazmat_class> hazmat_class { get; set; }
        public virtual DbSet<hazmat_code> hazmat_code { get; set; }
        public virtual DbSet<help_access> help_access { get; set; }
        public virtual DbSet<help_topic> help_topic { get; set; }
        public virtual DbSet<icm_customer_item_info> icm_customer_item_info { get; set; }
        public virtual DbSet<ideal_locations_by_zip> ideal_locations_by_zip { get; set; }
        public virtual DbSet<impexp_source> impexp_source { get; set; }
        public virtual DbSet<import_audit> import_audit { get; set; }
        public virtual DbSet<import_audit_settings> import_audit_settings { get; set; }
        public virtual DbSet<import_restart_file> import_restart_file { get; set; }
        public virtual DbSet<import_restart_hdr> import_restart_hdr { get; set; }
        public virtual DbSet<import_restart_requestor> import_restart_requestor { get; set; }
        public virtual DbSet<import_suspense_fkerror> import_suspense_fkerror { get; set; }
        public virtual DbSet<import_suspense_hdr> import_suspense_hdr { get; set; }
        public virtual DbSet<import_suspense_line> import_suspense_line { get; set; }
        public virtual DbSet<import_suspense_settings> import_suspense_settings { get; set; }
        public virtual DbSet<import_temp_table_x_file> import_temp_table_x_file { get; set; }
        public virtual DbSet<import_val_status> import_val_status { get; set; }
        public virtual DbSet<incoming_freight_charge> incoming_freight_charge { get; set; }
        public virtual DbSet<installment_dates_10005> installment_dates_10005 { get; set; }
        public virtual DbSet<installment_frequency_10005> installment_frequency_10005 { get; set; }
        public virtual DbSet<installment_plan_discount_pct> installment_plan_discount_pct { get; set; }
        public virtual DbSet<installment_plans_10005> installment_plans_10005 { get; set; }
        public virtual DbSet<integration_audit> integration_audit { get; set; }
        public virtual DbSet<integration_default> integration_default { get; set; }
        public virtual DbSet<integration_settings> integration_settings { get; set; }
        public virtual DbSet<intercompany_acct> intercompany_acct { get; set; }
        public virtual DbSet<intrastat_currency> intrastat_currency { get; set; }
        public virtual DbSet<intrastat_info> intrastat_info { get; set; }
        public virtual DbSet<inv_accessory> inv_accessory { get; set; }
        public virtual DbSet<inv_adj_hdr> inv_adj_hdr { get; set; }
        public virtual DbSet<inv_adj_line> inv_adj_line { get; set; }
        public virtual DbSet<inv_adj_line_recount_history> inv_adj_line_recount_history { get; set; }
        public virtual DbSet<inv_adj_loc_attribute_group> inv_adj_loc_attribute_group { get; set; }
        public virtual DbSet<inv_alloc_trans> inv_alloc_trans { get; set; }
        public virtual DbSet<inv_bin> inv_bin { get; set; }
        public virtual DbSet<inv_cost_edit> inv_cost_edit { get; set; }
        public virtual DbSet<inv_excise_tax> inv_excise_tax { get; set; }
        public virtual DbSet<inv_group_hdr> inv_group_hdr { get; set; }
        public virtual DbSet<inv_group_loc_allocation> inv_group_loc_allocation { get; set; }
        public virtual DbSet<inv_group_region> inv_group_region { get; set; }
        public virtual DbSet<inv_group_region_loc> inv_group_region_loc { get; set; }
        public virtual DbSet<inv_hdr_dealer_warranty> inv_hdr_dealer_warranty { get; set; }
        public virtual DbSet<inv_hdr_salesrep_rules> inv_hdr_salesrep_rules { get; set; }
        public virtual DbSet<inv_hdr_x_fc_inv> inv_hdr_x_fc_inv { get; set; }
        public virtual DbSet<inv_hdr_x_supplier_detail> inv_hdr_x_supplier_detail { get; set; }
        public virtual DbSet<inv_issues_belting_history> inv_issues_belting_history { get; set; }
        public virtual DbSet<inv_line_dealer_warranty> inv_line_dealer_warranty { get; set; }
        public virtual DbSet<inv_line_salesrep_rules> inv_line_salesrep_rules { get; set; }
        public virtual DbSet<inv_loc> inv_loc { get; set; }
        public virtual DbSet<inv_loc_additional_price> inv_loc_additional_price { get; set; }
        public virtual DbSet<inv_loc_aqnet> inv_loc_aqnet { get; set; }
        public virtual DbSet<inv_loc_cust_reserve> inv_loc_cust_reserve { get; set; }
        public virtual DbSet<inv_loc_expedite_time> inv_loc_expedite_time { get; set; }
        public virtual DbSet<inv_loc_msp> inv_loc_msp { get; set; }
        public virtual DbSet<inv_loc_price_multiplier> inv_loc_price_multiplier { get; set; }
        public virtual DbSet<inv_loc_price_protection> inv_loc_price_protection { get; set; }
        public virtual DbSet<inv_loc_salesrep> inv_loc_salesrep { get; set; }
        public virtual DbSet<inv_loc_stock_status> inv_loc_stock_status { get; set; }
        public virtual DbSet<inv_mast> inv_mast { get; set; }
        public virtual DbSet<inv_mast_15> inv_mast_15 { get; set; }
        public virtual DbSet<inv_mast_194> inv_mast_194 { get; set; }
        public virtual DbSet<inv_mast_2164> inv_mast_2164 { get; set; }
        public virtual DbSet<inv_mast_219> inv_mast_219 { get; set; }
        public virtual DbSet<inv_mast_additional_price> inv_mast_additional_price { get; set; }
        public virtual DbSet<inv_mast_assem_info> inv_mast_assem_info { get; set; }
        public virtual DbSet<inv_mast_config_prompt> inv_mast_config_prompt { get; set; }
        public virtual DbSet<inv_mast_core> inv_mast_core { get; set; }
        public virtual DbSet<inv_mast_coredisc> inv_mast_coredisc { get; set; }
        public virtual DbSet<inv_mast_damaged> inv_mast_damaged { get; set; }
        public virtual DbSet<inv_mast_damaged_documents> inv_mast_damaged_documents { get; set; }
        public virtual DbSet<inv_mast_damaged_image> inv_mast_damaged_image { get; set; }
        public virtual DbSet<inv_mast_dea> inv_mast_dea { get; set; }
        public virtual DbSet<inv_mast_dealer_warranty> inv_mast_dealer_warranty { get; set; }
        public virtual DbSet<inv_mast_dealer_warranty_equip> inv_mast_dealer_warranty_equip { get; set; }
        public virtual DbSet<inv_mast_default> inv_mast_default { get; set; }
        public virtual DbSet<inv_mast_default_x_company> inv_mast_default_x_company { get; set; }
        public virtual DbSet<inv_mast_document> inv_mast_document { get; set; }
        public virtual DbSet<inv_mast_eco_fee> inv_mast_eco_fee { get; set; }
        public virtual DbSet<inv_mast_equip> inv_mast_equip { get; set; }
        public virtual DbSet<inv_mast_freight_option> inv_mast_freight_option { get; set; }
        public virtual DbSet<inv_mast_intrastat> inv_mast_intrastat { get; set; }
        public virtual DbSet<inv_mast_labels> inv_mast_labels { get; set; }
        public virtual DbSet<inv_mast_language> inv_mast_language { get; set; }
        public virtual DbSet<inv_mast_lifo_pool> inv_mast_lifo_pool { get; set; }
        public virtual DbSet<inv_mast_links> inv_mast_links { get; set; }
        public virtual DbSet<inv_mast_lot> inv_mast_lot { get; set; }
        public virtual DbSet<inv_mast_msds> inv_mast_msds { get; set; }
        public virtual DbSet<inv_mast_state_tax> inv_mast_state_tax { get; set; }
        public virtual DbSet<inv_mast_strategic_pricing> inv_mast_strategic_pricing { get; set; }
        public virtual DbSet<inv_mast_taxinfo> inv_mast_taxinfo { get; set; }
        public virtual DbSet<inv_mast_tire_proration> inv_mast_tire_proration { get; set; }
        public virtual DbSet<inv_mast_trackabout> inv_mast_trackabout { get; set; }
        public virtual DbSet<inv_mast_trade> inv_mast_trade { get; set; }
        public virtual DbSet<inv_mast_ud> inv_mast_ud { get; set; }
        public virtual DbSet<inv_mast_web_desc> inv_mast_web_desc { get; set; }
        public virtual DbSet<inv_mast_x_company> inv_mast_x_company { get; set; }
        public virtual DbSet<inv_mast_x_integration> inv_mast_x_integration { get; set; }
        public virtual DbSet<inv_mast_x_product_service_mx> inv_mast_x_product_service_mx { get; set; }
        public virtual DbSet<inv_mast_x_restricted_class> inv_mast_x_restricted_class { get; set; }
        public virtual DbSet<inv_mast_x_rewards_program> inv_mast_x_rewards_program { get; set; }
        public virtual DbSet<inv_period_usage> inv_period_usage { get; set; }
        public virtual DbSet<inv_period_usage_temp> inv_period_usage_temp { get; set; }
        public virtual DbSet<inv_ranking_criteria> inv_ranking_criteria { get; set; }
        public virtual DbSet<inv_rcpts_x_vendor_invoice> inv_rcpts_x_vendor_invoice { get; set; }
        public virtual DbSet<inv_reclassification_detail> inv_reclassification_detail { get; set; }
        public virtual DbSet<inv_reclassification_work> inv_reclassification_work { get; set; }
        public virtual DbSet<inv_sub> inv_sub { get; set; }
        public virtual DbSet<inv_sub_history> inv_sub_history { get; set; }
        public virtual DbSet<inv_supp_auto_update_price> inv_supp_auto_update_price { get; set; }
        public virtual DbSet<inv_supplier_x_loc_pricing> inv_supplier_x_loc_pricing { get; set; }
        public virtual DbSet<inv_system_parameters> inv_system_parameters { get; set; }
        public virtual DbSet<inv_tran> inv_tran { get; set; }
        public virtual DbSet<inv_tran_bin_detail> inv_tran_bin_detail { get; set; }
        public virtual DbSet<inv_tran_lot_detail> inv_tran_lot_detail { get; set; }
        public virtual DbSet<inv_tran_serial_detail> inv_tran_serial_detail { get; set; }
        public virtual DbSet<inv_xref> inv_xref { get; set; }
        public virtual DbSet<inv_xref_230> inv_xref_230 { get; set; }
        public virtual DbSet<inv_xref_741> inv_xref_741 { get; set; }
        public virtual DbSet<inv_xref_supplier_info> inv_xref_supplier_info { get; set; }
        public virtual DbSet<inv_xref_udf> inv_xref_udf { get; set; }
        public virtual DbSet<inventory_card> inventory_card { get; set; }
        public virtual DbSet<inventory_cross_reference> inventory_cross_reference { get; set; }
        public virtual DbSet<inventory_defaults> inventory_defaults { get; set; }
        public virtual DbSet<inventory_defaults_335> inventory_defaults_335 { get; set; }
        public virtual DbSet<inventory_issues_audit> inventory_issues_audit { get; set; }
        public virtual DbSet<inventory_links> inventory_links { get; set; }
        public virtual DbSet<inventory_movement> inventory_movement { get; set; }
        public virtual DbSet<inventory_movement_deposit> inventory_movement_deposit { get; set; }
        public virtual DbSet<inventory_movement_deposit_log> inventory_movement_deposit_log { get; set; }
        public virtual DbSet<inventory_movement_error_log> inventory_movement_error_log { get; set; }
        public virtual DbSet<inventory_movement_pick_bin> inventory_movement_pick_bin { get; set; }
        public virtual DbSet<inventory_receipt_attribute_value> inventory_receipt_attribute_value { get; set; }
        public virtual DbSet<inventory_receipt_location> inventory_receipt_location { get; set; }
        public virtual DbSet<inventory_receipt_notepad> inventory_receipt_notepad { get; set; }
        public virtual DbSet<inventory_receipts_hdr> inventory_receipts_hdr { get; set; }
        public virtual DbSet<inventory_receipts_hdr_1348> inventory_receipts_hdr_1348 { get; set; }
        public virtual DbSet<inventory_receipts_line> inventory_receipts_line { get; set; }
        public virtual DbSet<inventory_receipts_line_issue> inventory_receipts_line_issue { get; set; }
        public virtual DbSet<inventory_return_hdr> inventory_return_hdr { get; set; }
        public virtual DbSet<inventory_return_hdr_notepad> inventory_return_hdr_notepad { get; set; }
        public virtual DbSet<inventory_return_hdr_x_jc_job> inventory_return_hdr_x_jc_job { get; set; }
        public virtual DbSet<inventory_return_line> inventory_return_line { get; set; }
        public virtual DbSet<inventory_return_line_notepad> inventory_return_line_notepad { get; set; }
        public virtual DbSet<inventory_supplier> inventory_supplier { get; set; }
        public virtual DbSet<inventory_supplier_1348> inventory_supplier_1348 { get; set; }
        public virtual DbSet<inventory_supplier_31> inventory_supplier_31 { get; set; }
        public virtual DbSet<inventory_supplier_ext> inventory_supplier_ext { get; set; }
        public virtual DbSet<inventory_supplier_package_info> inventory_supplier_package_info { get; set; }
        public virtual DbSet<inventory_supplier_pricing> inventory_supplier_pricing { get; set; }
        public virtual DbSet<inventory_supplier_trade> inventory_supplier_trade { get; set; }
        public virtual DbSet<inventory_supplier_x_loc> inventory_supplier_x_loc { get; set; }
        public virtual DbSet<inventory_supplier_x_uom> inventory_supplier_x_uom { get; set; }
        public virtual DbSet<inventory_value_analysis_accounttable> inventory_value_analysis_accounttable { get; set; }
        public virtual DbSet<inventory_value_analysis_accounttable_all> inventory_value_analysis_accounttable_all { get; set; }
        public virtual DbSet<inventory_value_analysis_accounttable_differences> inventory_value_analysis_accounttable_differences { get; set; }
        public virtual DbSet<inventory_value_analysis_accounttable_summary> inventory_value_analysis_accounttable_summary { get; set; }
        public virtual DbSet<inventory_value_items_history> inventory_value_items_history { get; set; }
        public virtual DbSet<inventoryissuesrebuild> inventoryissuesrebuilds { get; set; }
        public virtual DbSet<InventoryIssuesRun> InventoryIssuesRuns { get; set; }
        public virtual DbSet<invlinesalesrep_rma_linked> invlinesalesrep_rma_linked { get; set; }
        public virtual DbSet<invoice_batch> invoice_batch { get; set; }
        public virtual DbSet<invoice_cfdi> invoice_cfdi { get; set; }
        public virtual DbSet<invoice_cfdi_regenerated> invoice_cfdi_regenerated { get; set; }
        public virtual DbSet<invoice_cfdi_x_voucher> invoice_cfdi_x_voucher { get; set; }
        public virtual DbSet<invoice_class> invoice_class { get; set; }
        public virtual DbSet<invoice_comprobante_rel> invoice_comprobante_rel { get; set; }
        public virtual DbSet<invoice_floor_plan_xref> invoice_floor_plan_xref { get; set; }
        public virtual DbSet<invoice_hdr> invoice_hdr { get; set; }
        public virtual DbSet<invoice_hdr_2164> invoice_hdr_2164 { get; set; }
        public virtual DbSet<invoice_hdr_220> invoice_hdr_220 { get; set; }
        public virtual DbSet<invoice_hdr_asn> invoice_hdr_asn { get; set; }
        public virtual DbSet<invoice_hdr_cardlock> invoice_hdr_cardlock { get; set; }
        public virtual DbSet<invoice_hdr_cash_app> invoice_hdr_cash_app { get; set; }
        public virtual DbSet<invoice_hdr_customer_po> invoice_hdr_customer_po { get; set; }
        public virtual DbSet<invoice_hdr_edit> invoice_hdr_edit { get; set; }
        public virtual DbSet<invoice_hdr_freight_allowed> invoice_hdr_freight_allowed { get; set; }
        public virtual DbSet<invoice_hdr_high_radius> invoice_hdr_high_radius { get; set; }
        public virtual DbSet<invoice_hdr_installment> invoice_hdr_installment { get; set; }
        public virtual DbSet<invoice_hdr_notepad> invoice_hdr_notepad { get; set; }
        public virtual DbSet<invoice_hdr_notepad_edit> invoice_hdr_notepad_edit { get; set; }
        public virtual DbSet<invoice_hdr_prelim_tracking> invoice_hdr_prelim_tracking { get; set; }
        public virtual DbSet<invoice_hdr_salesrep> invoice_hdr_salesrep { get; set; }
        public virtual DbSet<invoice_hdr_salesrep_edit> invoice_hdr_salesrep_edit { get; set; }
        public virtual DbSet<invoice_hdr_signature> invoice_hdr_signature { get; set; }
        public virtual DbSet<invoice_hdr_tax_juris_edit> invoice_hdr_tax_juris_edit { get; set; }
        public virtual DbSet<invoice_hdr_x_tax_juris_manual> invoice_hdr_x_tax_juris_manual { get; set; }
        public virtual DbSet<invoice_iva_tax> invoice_iva_tax { get; set; }
        public virtual DbSet<invoice_line> invoice_line { get; set; }
        public virtual DbSet<invoice_line_2164> invoice_line_2164 { get; set; }
        public virtual DbSet<invoice_line_235> invoice_line_235 { get; set; }
        public virtual DbSet<invoice_line_eco_fee> invoice_line_eco_fee { get; set; }
        public virtual DbSet<invoice_line_edit> invoice_line_edit { get; set; }
        public virtual DbSet<invoice_line_notepad> invoice_line_notepad { get; set; }
        public virtual DbSet<invoice_line_price_protection> invoice_line_price_protection { get; set; }
        public virtual DbSet<invoice_line_proration> invoice_line_proration { get; set; }
        public virtual DbSet<invoice_line_rewards> invoice_line_rewards { get; set; }
        public virtual DbSet<invoice_line_rewards_buy_get> invoice_line_rewards_buy_get { get; set; }
        public virtual DbSet<invoice_line_salesrep> invoice_line_salesrep { get; set; }
        public virtual DbSet<invoice_line_servicebench_claim> invoice_line_servicebench_claim { get; set; }
        public virtual DbSet<invoice_line_taxes> invoice_line_taxes { get; set; }
        public virtual DbSet<invoice_line_taxes_cardlock> invoice_line_taxes_cardlock { get; set; }
        public virtual DbSet<invoice_line_taxes_perunit> invoice_line_taxes_perunit { get; set; }
        public virtual DbSet<invoice_link_type_mx> invoice_link_type_mx { get; set; }
        public virtual DbSet<invoice_types> invoice_types { get; set; }
        public virtual DbSet<invoice_x_work_order> invoice_x_work_order { get; set; }
        public virtual DbSet<invoiced_cfdi_certification> invoiced_cfdi_certification { get; set; }
        public virtual DbSet<iqs_integration_lot_info> iqs_integration_lot_info { get; set; }
        public virtual DbSet<iqs_integration_receipt_info> iqs_integration_receipt_info { get; set; }
        public virtual DbSet<IRS_1099_type> IRS_1099_type { get; set; }
        public virtual DbSet<iso_currency_code> iso_currency_code { get; set; }
        public virtual DbSet<issues_reason> issues_reason { get; set; }
        public virtual DbSet<item_attribute_value> item_attribute_value { get; set; }
        public virtual DbSet<item_catalog> item_catalog { get; set; }
        public virtual DbSet<item_catalog_def> item_catalog_def { get; set; }
        public virtual DbSet<item_catalog_def_detail> item_catalog_def_detail { get; set; }
        public virtual DbSet<item_category> item_category { get; set; }
        public virtual DbSet<item_category_hierarchy> item_category_hierarchy { get; set; }
        public virtual DbSet<item_category_image> item_category_image { get; set; }
        public virtual DbSet<item_category_link> item_category_link { get; set; }
        public virtual DbSet<item_category_text> item_category_text { get; set; }
        public virtual DbSet<item_category_x_class> item_category_x_class { get; set; }
        public virtual DbSet<item_category_x_inv_mast> item_category_x_inv_mast { get; set; }
        public virtual DbSet<item_classification> item_classification { get; set; }
        public virtual DbSet<item_commission_class> item_commission_class { get; set; }
        public virtual DbSet<item_commitment_detail> item_commitment_detail { get; set; }
        public virtual DbSet<item_commitment_hdr> item_commitment_hdr { get; set; }
        public virtual DbSet<item_commitment_location> item_commitment_location { get; set; }
        public virtual DbSet<item_commitment_ship_to> item_commitment_ship_to { get; set; }
        public virtual DbSet<item_conversion> item_conversion { get; set; }
        public virtual DbSet<item_count_detail> item_count_detail { get; set; }
        public virtual DbSet<item_count_detail_sbl> item_count_detail_sbl { get; set; }
        public virtual DbSet<item_count_hdr> item_count_hdr { get; set; }
        public virtual DbSet<item_id_change_history> item_id_change_history { get; set; }
        public virtual DbSet<item_integration_item_status> item_integration_item_status { get; set; }
        public virtual DbSet<item_labor> item_labor { get; set; }
        public virtual DbSet<item_lead_time> item_lead_time { get; set; }
        public virtual DbSet<item_list_dtl> item_list_dtl { get; set; }
        public virtual DbSet<item_list_hdr> item_list_hdr { get; set; }
        public virtual DbSet<item_merge_audit> item_merge_audit { get; set; }
        public virtual DbSet<item_merge_verification> item_merge_verification { get; set; }
        public virtual DbSet<item_notepad> item_notepad { get; set; }
        public virtual DbSet<item_package> item_package { get; set; }
        public virtual DbSet<item_package_type> item_package_type { get; set; }
        public virtual DbSet<item_prefix_194> item_prefix_194 { get; set; }
        public virtual DbSet<item_price_dts> item_price_dts { get; set; }
        public virtual DbSet<item_price_dts_criteria> item_price_dts_criteria { get; set; }
        public virtual DbSet<item_price_level_update_dtl> item_price_level_update_dtl { get; set; }
        public virtual DbSet<item_price_level_update_hdr> item_price_level_update_hdr { get; set; }
        public virtual DbSet<item_putaway_attribute> item_putaway_attribute { get; set; }
        public virtual DbSet<item_quantity_x_integration> item_quantity_x_integration { get; set; }
        public virtual DbSet<item_reservation> item_reservation { get; set; }
        public virtual DbSet<item_revision> item_revision { get; set; }
        public virtual DbSet<item_service> item_service { get; set; }
        public virtual DbSet<item_service_contract> item_service_contract { get; set; }
        public virtual DbSet<item_service_part_list> item_service_part_list { get; set; }
        public virtual DbSet<item_uom> item_uom { get; set; }
        public virtual DbSet<item_warranty> item_warranty { get; set; }
        public virtual DbSet<item_warranty_x_warranty> item_warranty_x_warranty { get; set; }
        public virtual DbSet<item_warranty_x_warranty_reason> item_warranty_x_warranty_reason { get; set; }
        public virtual DbSet<jc_job> jc_job { get; set; }
        public virtual DbSet<job_based_commission> job_based_commission { get; set; }
        public virtual DbSet<job_control_hdr> job_control_hdr { get; set; }
        public virtual DbSet<job_control_hdr_notepad> job_control_hdr_notepad { get; set; }
        public virtual DbSet<job_control_line> job_control_line { get; set; }
        public virtual DbSet<job_price_batch_hdr> job_price_batch_hdr { get; set; }
        public virtual DbSet<job_price_batch_line> job_price_batch_line { get; set; }
        public virtual DbSet<job_price_batch_line_x_employee> job_price_batch_line_x_employee { get; set; }
        public virtual DbSet<job_price_bin> job_price_bin { get; set; }
        public virtual DbSet<job_price_bin_wurth> job_price_bin_wurth { get; set; }
        public virtual DbSet<job_price_cust_shipto_aggr> job_price_cust_shipto_aggr { get; set; }
        public virtual DbSet<job_price_cust_shipto_budget> job_price_cust_shipto_budget { get; set; }
        public virtual DbSet<job_price_cust_shipto_csn> job_price_cust_shipto_csn { get; set; }
        public virtual DbSet<job_price_cust_shipto_ordlim> job_price_cust_shipto_ordlim { get; set; }
        public virtual DbSet<job_price_customer_shipto> job_price_customer_shipto { get; set; }
        public virtual DbSet<job_price_hdr> job_price_hdr { get; set; }
        public virtual DbSet<job_price_hdr_148> job_price_hdr_148 { get; set; }
        public virtual DbSet<job_price_hdr_budget_prd> job_price_hdr_budget_prd { get; set; }
        public virtual DbSet<job_price_hdr_notepad> job_price_hdr_notepad { get; set; }
        public virtual DbSet<job_price_line> job_price_line { get; set; }
        public virtual DbSet<job_price_line_148> job_price_line_148 { get; set; }
        public virtual DbSet<job_price_line_budget_code> job_price_line_budget_code { get; set; }
        public virtual DbSet<job_price_line_consign> job_price_line_consign { get; set; }
        public virtual DbSet<job_price_line_quote_info> job_price_line_quote_info { get; set; }
        public virtual DbSet<job_price_ship_control_no> job_price_ship_control_no { get; set; }
        public virtual DbSet<job_price_value> job_price_value { get; set; }
        public virtual DbSet<job_price_vendor> job_price_vendor { get; set; }
        public virtual DbSet<job_quote_line> job_quote_line { get; set; }
        public virtual DbSet<job_site> job_site { get; set; }
        public virtual DbSet<job_site_notepad> job_site_notepad { get; set; }
        public virtual DbSet<john_deere_order_info_10008> john_deere_order_info_10008 { get; set; }
        public virtual DbSet<journal> journals { get; set; }
        public virtual DbSet<journal_type_mx> journal_type_mx { get; set; }
        public virtual DbSet<jurisdiction_acct> jurisdiction_acct { get; set; }
        public virtual DbSet<jurisdiction_tax_is_taxable> jurisdiction_tax_is_taxable { get; set; }
        public virtual DbSet<label_definition> label_definition { get; set; }
        public virtual DbSet<label_definition_x_customer> label_definition_x_customer { get; set; }
        public virtual DbSet<label_definition_x_loc> label_definition_x_loc { get; set; }
        public virtual DbSet<label_definition_x_ship_to> label_definition_x_ship_to { get; set; }
        public virtual DbSet<labor> labors { get; set; }
        public virtual DbSet<labor_type> labor_type { get; set; }
        public virtual DbSet<labor_type_x_location> labor_type_x_location { get; set; }
        public virtual DbSet<labor_x_crew> labor_x_crew { get; set; }
        public virtual DbSet<labor_x_region> labor_x_region { get; set; }
        public virtual DbSet<labor_x_skillset> labor_x_skillset { get; set; }
        public virtual DbSet<landed_cost_category> landed_cost_category { get; set; }
        public virtual DbSet<landed_cost_category_x_company> landed_cost_category_x_company { get; set; }
        public virtual DbSet<landed_cost_driver> landed_cost_driver { get; set; }
        public virtual DbSet<landed_cost_driver_tax> landed_cost_driver_tax { get; set; }
        public virtual DbSet<landed_cost_driver_x_po_hdr> landed_cost_driver_x_po_hdr { get; set; }
        public virtual DbSet<language> languages { get; set; }
        public virtual DbSet<lc_driver_x_receipts_hdr> lc_driver_x_receipts_hdr { get; set; }
        public virtual DbSet<lc_driver_x_tran> lc_driver_x_tran { get; set; }
        public virtual DbSet<lc_driver_x_tran_detail> lc_driver_x_tran_detail { get; set; }
        public virtual DbSet<lead_source> lead_source { get; set; }
        public virtual DbSet<legacy_b3_customs_info> legacy_b3_customs_info { get; set; }
        public virtual DbSet<link_quantity> link_quantity { get; set; }
        public virtual DbSet<list_temp> list_temp { get; set; }
        public virtual DbSet<loan> loans { get; set; }
        public virtual DbSet<loan_customer> loan_customer { get; set; }
        public virtual DbSet<loan_item> loan_item { get; set; }
        public virtual DbSet<loan_item_extra> loan_item_extra { get; set; }
        public virtual DbSet<loan_security_item> loan_security_item { get; set; }
        public virtual DbSet<loan_surcharge> loan_surcharge { get; set; }
        public virtual DbSet<location> locations { get; set; }
        public virtual DbSet<location_allocation_info> location_allocation_info { get; set; }
        public virtual DbSet<location_allocation_path> location_allocation_path { get; set; }
        public virtual DbSet<location_attribute_group> location_attribute_group { get; set; }
        public virtual DbSet<location_form_template> location_form_template { get; set; }
        public virtual DbSet<location_intercompany> location_intercompany { get; set; }
        public virtual DbSet<location_iva_tax> location_iva_tax { get; set; }
        public virtual DbSet<location_jurisdiction> location_jurisdiction { get; set; }
        public virtual DbSet<location_language> location_language { get; set; }
        public virtual DbSet<location_loa_role> location_loa_role { get; set; }
        public virtual DbSet<location_mx> location_mx { get; set; }
        public virtual DbSet<location_other_charge> location_other_charge { get; set; }
        public virtual DbSet<location_packing_options> location_packing_options { get; set; }
        public virtual DbSet<location_palletlock> location_palletlock { get; set; }
        public virtual DbSet<location_pod_options> location_pod_options { get; set; }
        public virtual DbSet<location_related_orgs> location_related_orgs { get; set; }
        public virtual DbSet<location_rental> location_rental { get; set; }
        public virtual DbSet<location_source_transfer> location_source_transfer { get; set; }
        public virtual DbSet<location_supplier> location_supplier { get; set; }
        public virtual DbSet<location_supplier_194> location_supplier_194 { get; set; }
        public virtual DbSet<location_supplier_aqnet> location_supplier_aqnet { get; set; }
        public virtual DbSet<location_swisslog> location_swisslog { get; set; }
        public virtual DbSet<location_terms> location_terms { get; set; }
        public virtual DbSet<location_trackabout> location_trackabout { get; set; }
        public virtual DbSet<location_trade> location_trade { get; set; }
        public virtual DbSet<location_ud> location_ud { get; set; }
        public virtual DbSet<location_workorder_info> location_workorder_info { get; set; }
        public virtual DbSet<location_x_integration> location_x_integration { get; set; }
        public virtual DbSet<location_x_po_hdr> location_x_po_hdr { get; set; }
        public virtual DbSet<log_pinpoint_trn_incoming> log_pinpoint_trn_incoming { get; set; }
        public virtual DbSet<log_pinpoint_trn_info> log_pinpoint_trn_info { get; set; }
        public virtual DbSet<lost_sales> lost_sales { get; set; }
        public virtual DbSet<lost_sales_transaction> lost_sales_transaction { get; set; }
        public virtual DbSet<lot> lots { get; set; }
        public virtual DbSet<lot_adjust_alert> lot_adjust_alert { get; set; }
        public virtual DbSet<lot_attr_x_lot_attr_grp> lot_attr_x_lot_attr_grp { get; set; }
        public virtual DbSet<lot_attribute> lot_attribute { get; set; }
        public virtual DbSet<lot_attribute_group> lot_attribute_group { get; set; }
        public virtual DbSet<lot_attribute_group_tran> lot_attribute_group_tran { get; set; }
        public virtual DbSet<lot_attribute_value> lot_attribute_value { get; set; }
        public virtual DbSet<lot_audit> lot_audit { get; set; }
        public virtual DbSet<lot_bill_audit> lot_bill_audit { get; set; }
        public virtual DbSet<lot_bin_dealloc_report> lot_bin_dealloc_report { get; set; }
        public virtual DbSet<lot_bin_xref> lot_bin_xref { get; set; }
        public virtual DbSet<lot_shelf_life_audit_trail> lot_shelf_life_audit_trail { get; set; }
        public virtual DbSet<lot_uom> lot_uom { get; set; }
        public virtual DbSet<lot_x_lot_attribute_value> lot_x_lot_attribute_value { get; set; }
        public virtual DbSet<ltl_detail> ltl_detail { get; set; }
        public virtual DbSet<machine> machines { get; set; }
        public virtual DbSet<mail_list> mail_list { get; set; }
        public virtual DbSet<manual_pick_sequence> manual_pick_sequence { get; set; }
        public virtual DbSet<manufacturer_program_type> manufacturer_program_type { get; set; }
        public virtual DbSet<manufacturing_class> manufacturing_class { get; set; }
        public virtual DbSet<marketing_campaign_detail> marketing_campaign_detail { get; set; }
        public virtual DbSet<mass_update_definition> mass_update_definition { get; set; }
        public virtual DbSet<mass_update_definition_detail> mass_update_definition_detail { get; set; }
        public virtual DbSet<massupdate_change> massupdate_change { get; set; }
        public virtual DbSet<massupdate_change_x_keys> massupdate_change_x_keys { get; set; }
        public virtual DbSet<massupdate_job_details_result> massupdate_job_details_result { get; set; }
        public virtual DbSet<massupdate_job_result> massupdate_job_result { get; set; }
        public virtual DbSet<massupdate_job_transaction_result> massupdate_job_transaction_result { get; set; }
        public virtual DbSet<master_bin_audit_trail> master_bin_audit_trail { get; set; }
        public virtual DbSet<master_inquiry_tab_default> master_inquiry_tab_default { get; set; }
        public virtual DbSet<mcc_code_hierarchy_hdr> mcc_code_hierarchy_hdr { get; set; }
        public virtual DbSet<mcc_code_hierarchy_line> mcc_code_hierarchy_line { get; set; }
        public virtual DbSet<med_coup_cust_dtl_x_oe_hdr> med_coup_cust_dtl_x_oe_hdr { get; set; }
        public virtual DbSet<medical_coupon_customer_dtl> medical_coupon_customer_dtl { get; set; }
        public virtual DbSet<medical_coupon_hdr> medical_coupon_hdr { get; set; }
        public virtual DbSet<medical_coupon_hdr_x_inv_mast> medical_coupon_hdr_x_inv_mast { get; set; }
        public virtual DbSet<message_foreign> message_foreign { get; set; }
        public virtual DbSet<message_log> message_log { get; set; }
        public virtual DbSet<message> messages { get; set; }
        public virtual DbSet<metric> metrics { get; set; }
        public virtual DbSet<metrics_calculation_log> metrics_calculation_log { get; set; }
        public virtual DbSet<metrics_daily_customer> metrics_daily_customer { get; set; }
        public virtual DbSet<metrics_daily_customer_working> metrics_daily_customer_working { get; set; }
        public virtual DbSet<metrics_filter_result> metrics_filter_result { get; set; }
        public virtual DbSet<metrics_filter_sql> metrics_filter_sql { get; set; }
        public virtual DbSet<metrics_hierarchy_execution_level> metrics_hierarchy_execution_level { get; set; }
        public virtual DbSet<metrics_hierarchy_level> metrics_hierarchy_level { get; set; }
        public virtual DbSet<metrics_period_customer> metrics_period_customer { get; set; }
        public virtual DbSet<metrics_period_date_dimension> metrics_period_date_dimension { get; set; }
        public virtual DbSet<metrics_period_definition> metrics_period_definition { get; set; }
        public virtual DbSet<metrics_period_execution> metrics_period_execution { get; set; }
        public virtual DbSet<metrics_period_hierarchy> metrics_period_hierarchy { get; set; }
        public virtual DbSet<metrics_settings> metrics_settings { get; set; }
        public virtual DbSet<metrics_x_data_source> metrics_x_data_source { get; set; }
        public virtual DbSet<metrics_x_indirect_cost> metrics_x_indirect_cost { get; set; }
        public virtual DbSet<mexico_creditcard_info> mexico_creditcard_info { get; set; }
        public virtual DbSet<mft_x_import_transaction> mft_x_import_transaction { get; set; }
        public virtual DbSet<minmax_selection_criteria> minmax_selection_criteria { get; set; }
        public virtual DbSet<modification> modifications { get; set; }
        public virtual DbSet<module> modules { get; set; }
        public virtual DbSet<module_x_portal> module_x_portal { get; set; }
        public virtual DbSet<move_cost_criteria> move_cost_criteria { get; set; }
        public virtual DbSet<moving_avg_cost_history> moving_avg_cost_history { get; set; }
        public virtual DbSet<mro_line_schedule> mro_line_schedule { get; set; }
        public virtual DbSet<mru_window> mru_window { get; set; }
        public virtual DbSet<multi_po_asn_hdr> multi_po_asn_hdr { get; set; }
        public virtual DbSet<multi_po_asn_line> multi_po_asn_line { get; set; }
        public virtual DbSet<multi_po_asn_line_serial> multi_po_asn_line_serial { get; set; }
        public virtual DbSet<multiple_uom_receipt> multiple_uom_receipt { get; set; }
        public virtual DbSet<municipality_mx> municipality_mx { get; set; }
        public virtual DbSet<mymenu> mymenus { get; set; }
        public virtual DbSet<navigation_index> navigation_index { get; set; }
        public virtual DbSet<needs_list_194> needs_list_194 { get; set; }
        public virtual DbSet<neighborhood_mx> neighborhood_mx { get; set; }
        public virtual DbSet<nmfc_hdr> nmfc_hdr { get; set; }
        public virtual DbSet<note> notes { get; set; }
        public virtual DbSet<note_area> note_area { get; set; }
        public virtual DbSet<note_display_area> note_display_area { get; set; }
        public virtual DbSet<note_template_detail> note_template_detail { get; set; }
        public virtual DbSet<note_template_hdr> note_template_hdr { get; set; }
        public virtual DbSet<note_x_company> note_x_company { get; set; }
        public virtual DbSet<notepad_class> notepad_class { get; set; }
        public virtual DbSet<oe_auxiliary_194> oe_auxiliary_194 { get; set; }
        public virtual DbSet<oe_buy_get_rewards> oe_buy_get_rewards { get; set; }
        public virtual DbSet<oe_contacts_customer> oe_contacts_customer { get; set; }
        public virtual DbSet<oe_hdr> oe_hdr { get; set; }
        public virtual DbSet<oe_hdr_15> oe_hdr_15 { get; set; }
        public virtual DbSet<oe_hdr_369> oe_hdr_369 { get; set; }
        public virtual DbSet<oe_hdr_additional_info> oe_hdr_additional_info { get; set; }
        public virtual DbSet<oe_hdr_advance_billing> oe_hdr_advance_billing { get; set; }
        public virtual DbSet<oe_hdr_bss> oe_hdr_bss { get; set; }
        public virtual DbSet<oe_hdr_cardlock> oe_hdr_cardlock { get; set; }
        public virtual DbSet<oe_hdr_cc_freight_estimate> oe_hdr_cc_freight_estimate { get; set; }
        public virtual DbSet<oe_hdr_construction_info> oe_hdr_construction_info { get; set; }
        public virtual DbSet<oe_hdr_creditcard_avs_hold> oe_hdr_creditcard_avs_hold { get; set; }
        public virtual DbSet<oe_hdr_fedex_info> oe_hdr_fedex_info { get; set; }
        public virtual DbSet<oe_hdr_fedex_info_detail> oe_hdr_fedex_info_detail { get; set; }
        public virtual DbSet<oe_hdr_fidelitone_po> oe_hdr_fidelitone_po { get; set; }
        public virtual DbSet<oe_hdr_integration> oe_hdr_integration { get; set; }
        public virtual DbSet<oe_hdr_mfr> oe_hdr_mfr { get; set; }
        public virtual DbSet<oe_hdr_notepad> oe_hdr_notepad { get; set; }
        public virtual DbSet<oe_hdr_order_cmp_pct> oe_hdr_order_cmp_pct { get; set; }
        public virtual DbSet<oe_hdr_product_group> oe_hdr_product_group { get; set; }
        public virtual DbSet<oe_hdr_progress_billing> oe_hdr_progress_billing { get; set; }
        public virtual DbSet<oe_hdr_rma> oe_hdr_rma { get; set; }
        public virtual DbSet<oe_hdr_salesrep> oe_hdr_salesrep { get; set; }
        public virtual DbSet<oe_hdr_ship_location> oe_hdr_ship_location { get; set; }
        public virtual DbSet<oe_hdr_shipserv> oe_hdr_shipserv { get; set; }
        public virtual DbSet<oe_hdr_source_loc_override> oe_hdr_source_loc_override { get; set; }
        public virtual DbSet<oe_hdr_status> oe_hdr_status { get; set; }
        public virtual DbSet<oe_hdr_tax> oe_hdr_tax { get; set; }
        public virtual DbSet<oe_hdr_tax_ud> oe_hdr_tax_ud { get; set; }
        public virtual DbSet<oe_hdr_u_of_michigan> oe_hdr_u_of_michigan { get; set; }
        public virtual DbSet<oe_hdr_uom_conversion> oe_hdr_uom_conversion { get; set; }
        public virtual DbSet<oe_hdr_vat> oe_hdr_vat { get; set; }
        public virtual DbSet<oe_hdr_work_order_info> oe_hdr_work_order_info { get; set; }
        public virtual DbSet<oe_hdr_x_integration> oe_hdr_x_integration { get; set; }
        public virtual DbSet<oe_hdr_x_price_library> oe_hdr_x_price_library { get; set; }
        public virtual DbSet<oe_line> oe_line { get; set; }
        public virtual DbSet<oe_line_1000> oe_line_1000 { get; set; }
        public virtual DbSet<oe_line_194> oe_line_194 { get; set; }
        public virtual DbSet<oe_line_230> oe_line_230 { get; set; }
        public virtual DbSet<oe_line_235> oe_line_235 { get; set; }
        public virtual DbSet<oe_line_265> oe_line_265 { get; set; }
        public virtual DbSet<oe_line_523> oe_line_523 { get; set; }
        public virtual DbSet<oe_line_982> oe_line_982 { get; set; }
        public virtual DbSet<oe_line_alternate> oe_line_alternate { get; set; }
        public virtual DbSet<oe_line_bss> oe_line_bss { get; set; }
        public virtual DbSet<oe_line_buy_get_rewards> oe_line_buy_get_rewards { get; set; }
        public virtual DbSet<oe_line_class> oe_line_class { get; set; }
        public virtual DbSet<oe_line_component> oe_line_component { get; set; }
        public virtual DbSet<oe_line_config_prompt> oe_line_config_prompt { get; set; }
        public virtual DbSet<oe_line_consignment> oe_line_consignment { get; set; }
        public virtual DbSet<oe_line_cost_category> oe_line_cost_category { get; set; }
        public virtual DbSet<oe_line_cost_code> oe_line_cost_code { get; set; }
        public virtual DbSet<oe_line_dealer_commission> oe_line_dealer_commission { get; set; }
        public virtual DbSet<oe_line_eco_fee> oe_line_eco_fee { get; set; }
        public virtual DbSet<oe_line_excise_tax> oe_line_excise_tax { get; set; }
        public virtual DbSet<oe_line_fidelitone_po> oe_line_fidelitone_po { get; set; }
        public virtual DbSet<oe_line_freight> oe_line_freight { get; set; }
        public virtual DbSet<oe_line_hose_assembly> oe_line_hose_assembly { get; set; }
        public virtual DbSet<oe_line_insurance> oe_line_insurance { get; set; }
        public virtual DbSet<oe_line_integration> oe_line_integration { get; set; }
        public virtual DbSet<oe_line_label_group> oe_line_label_group { get; set; }
        public virtual DbSet<oe_line_labor> oe_line_labor { get; set; }
        public virtual DbSet<oe_line_last_margin_price> oe_line_last_margin_price { get; set; }
        public virtual DbSet<oe_line_loa_price_edit> oe_line_loa_price_edit { get; set; }
        public virtual DbSet<oe_line_lot> oe_line_lot { get; set; }
        public virtual DbSet<oe_line_lot_billing> oe_line_lot_billing { get; set; }
        public virtual DbSet<oe_line_notepad> oe_line_notepad { get; set; }
        public virtual DbSet<oe_line_panel> oe_line_panel { get; set; }
        public virtual DbSet<oe_line_pass_through> oe_line_pass_through { get; set; }
        public virtual DbSet<oe_line_po> oe_line_po { get; set; }
        public virtual DbSet<oe_line_po_x_inv_receipts_line> oe_line_po_x_inv_receipts_line { get; set; }
        public virtual DbSet<oe_line_promise_date> oe_line_promise_date { get; set; }
        public virtual DbSet<oe_line_quote_info_27> oe_line_quote_info_27 { get; set; }
        public virtual DbSet<oe_line_rental_rate> oe_line_rental_rate { get; set; }
        public virtual DbSet<oe_line_rewards> oe_line_rewards { get; set; }
        public virtual DbSet<oe_line_rma> oe_line_rma { get; set; }
        public virtual DbSet<oe_line_room> oe_line_room { get; set; }
        public virtual DbSet<oe_line_salesrep> oe_line_salesrep { get; set; }
        public virtual DbSet<oe_line_samples> oe_line_samples { get; set; }
        public virtual DbSet<oe_line_schedule> oe_line_schedule { get; set; }
        public virtual DbSet<oe_line_secondary_rebate> oe_line_secondary_rebate { get; set; }
        public virtual DbSet<oe_line_serial> oe_line_serial { get; set; }
        public virtual DbSet<oe_line_service> oe_line_service { get; set; }
        public virtual DbSet<oe_line_service_labor> oe_line_service_labor { get; set; }
        public virtual DbSet<oe_line_service_labor_tax> oe_line_service_labor_tax { get; set; }
        public virtual DbSet<oe_line_service_labor_time> oe_line_service_labor_time { get; set; }
        public virtual DbSet<oe_line_service_part> oe_line_service_part { get; set; }
        public virtual DbSet<oe_line_service_warranty> oe_line_service_warranty { get; set; }
        public virtual DbSet<oe_line_service_x_integration> oe_line_service_x_integration { get; set; }
        public virtual DbSet<oe_line_special_purchase> oe_line_special_purchase { get; set; }
        public virtual DbSet<oe_line_status> oe_line_status { get; set; }
        public virtual DbSet<oe_line_subtotal_options> oe_line_subtotal_options { get; set; }
        public virtual DbSet<oe_line_supplier_charges> oe_line_supplier_charges { get; set; }
        public virtual DbSet<oe_line_tax> oe_line_tax { get; set; }
        public virtual DbSet<oe_line_trackabout_lease> oe_line_trackabout_lease { get; set; }
        public virtual DbSet<oe_line_valve> oe_line_valve { get; set; }
        public virtual DbSet<oe_line_work_order> oe_line_work_order { get; set; }
        public virtual DbSet<oe_line_x_employee> oe_line_x_employee { get; set; }
        public virtual DbSet<oe_line_x_integration> oe_line_x_integration { get; set; }
        public virtual DbSet<oe_location_carrier> oe_location_carrier { get; set; }
        public virtual DbSet<oe_message_log> oe_message_log { get; set; }
        public virtual DbSet<oe_pick_ticket> oe_pick_ticket { get; set; }
        public virtual DbSet<oe_pick_ticket_consolidate> oe_pick_ticket_consolidate { get; set; }
        public virtual DbSet<oe_pick_ticket_detail> oe_pick_ticket_detail { get; set; }
        public virtual DbSet<oe_pick_ticket_detail_box> oe_pick_ticket_detail_box { get; set; }
        public virtual DbSet<oe_pick_ticket_detail_pkg> oe_pick_ticket_detail_pkg { get; set; }
        public virtual DbSet<oe_pick_ticket_detail_room> oe_pick_ticket_detail_room { get; set; }
        public virtual DbSet<oe_pick_ticket_detail_trackabout> oe_pick_ticket_detail_trackabout { get; set; }
        public virtual DbSet<oe_pick_ticket_freight_info> oe_pick_ticket_freight_info { get; set; }
        public virtual DbSet<oe_pick_ticket_frt_charges> oe_pick_ticket_frt_charges { get; set; }
        public virtual DbSet<oe_pick_ticket_package> oe_pick_ticket_package { get; set; }
        public virtual DbSet<oe_pick_ticket_signature> oe_pick_ticket_signature { get; set; }
        public virtual DbSet<oe_pick_ticket_trackabout> oe_pick_ticket_trackabout { get; set; }
        public virtual DbSet<oe_pick_ticket_ups> oe_pick_ticket_ups { get; set; }
        public virtual DbSet<oe_schedule> oe_schedule { get; set; }
        public virtual DbSet<oe_schedule_detail> oe_schedule_detail { get; set; }
        public virtual DbSet<oe_system_parameters> oe_system_parameters { get; set; }
        public virtual DbSet<operation> operations { get; set; }
        public virtual DbSet<opportunity> opportunities { get; set; }
        public virtual DbSet<opportunity_competitor> opportunity_competitor { get; set; }
        public virtual DbSet<opportunity_contact> opportunity_contact { get; set; }
        public virtual DbSet<opportunity_list_temp> opportunity_list_temp { get; set; }
        public virtual DbSet<opportunity_product_group> opportunity_product_group { get; set; }
        public virtual DbSet<opportunity_stage> opportunity_stage { get; set; }
        public virtual DbSet<opportunity_status> opportunity_status { get; set; }
        public virtual DbSet<opportunity_step> opportunity_step { get; set; }
        public virtual DbSet<opportunity_supplier> opportunity_supplier { get; set; }
        public virtual DbSet<opportunity_type> opportunity_type { get; set; }
        public virtual DbSet<opportunity_x_order> opportunity_x_order { get; set; }
        public virtual DbSet<opportunity_x_room> opportunity_x_room { get; set; }
        public virtual DbSet<order_based_commission> order_based_commission { get; set; }
        public virtual DbSet<order_cost_category> order_cost_category { get; set; }
        public virtual DbSet<order_floor_plan_xref_10002> order_floor_plan_xref_10002 { get; set; }
        public virtual DbSet<order_hold_class> order_hold_class { get; set; }
        public virtual DbSet<order_import_exception> order_import_exception { get; set; }
        public virtual DbSet<order_iva_tax> order_iva_tax { get; set; }
        public virtual DbSet<order_location_switch> order_location_switch { get; set; }
        public virtual DbSet<order_priority> order_priority { get; set; }
        public virtual DbSet<order_priority_threshold> order_priority_threshold { get; set; }
        public virtual DbSet<order_surcharge> order_surcharge { get; set; }
        public virtual DbSet<order_terms_acceptance> order_terms_acceptance { get; set; }
        public virtual DbSet<order_totals> order_totals { get; set; }
        public virtual DbSet<order_type_value> order_type_value { get; set; }
        public virtual DbSet<order_types> order_types { get; set; }
        public virtual DbSet<ota_delivery> ota_delivery { get; set; }
        public virtual DbSet<outlook_error_log> outlook_error_log { get; set; }
        public virtual DbSet<output_audit_trail> output_audit_trail { get; set; }
        public virtual DbSet<p21_docstar_inbound_log> p21_docstar_inbound_log { get; set; }
        public virtual DbSet<p21_docstar_outbound_log> p21_docstar_outbound_log { get; set; }
        public virtual DbSet<p21_eda_incremental_bookings> p21_eda_incremental_bookings { get; set; }
        public virtual DbSet<p21_ext_integration_info> p21_ext_integration_info { get; set; }
        public virtual DbSet<p21_ext_integration_log> p21_ext_integration_log { get; set; }
        public virtual DbSet<p21_ext_integration_queue> p21_ext_integration_queue { get; set; }
        public virtual DbSet<p21_fulltext_catalog> p21_fulltext_catalog { get; set; }
        public virtual DbSet<p21_fulltext_index_column> p21_fulltext_index_column { get; set; }
        public virtual DbSet<p21_fulltext_index_table> p21_fulltext_index_table { get; set; }
        public virtual DbSet<p21_future_stock_analysis_report> p21_future_stock_analysis_report { get; set; }
        public virtual DbSet<p21_future_stock_analysis_run> p21_future_stock_analysis_run { get; set; }
        public virtual DbSet<p21_integration> p21_integration { get; set; }
        public virtual DbSet<p21_integration_x_company> p21_integration_x_company { get; set; }
        public virtual DbSet<p21_integration_x_scheduled_job> p21_integration_x_scheduled_job { get; set; }
        public virtual DbSet<p21_mapper_translation_table> p21_mapper_translation_table { get; set; }
        public virtual DbSet<p21_number> p21_number { get; set; }
        public virtual DbSet<p21_price_engine_hierarchy> p21_price_engine_hierarchy { get; set; }
        public virtual DbSet<p21_price_engine_run> p21_price_engine_run { get; set; }
        public virtual DbSet<p21_price_engine_run_audit_deleted_contracts> p21_price_engine_run_audit_deleted_contracts { get; set; }
        public virtual DbSet<p21_price_engine_run_audit_step> p21_price_engine_run_audit_step { get; set; }
        public virtual DbSet<p21_price_engine_run_audit_step_data> p21_price_engine_run_audit_step_data { get; set; }
        public virtual DbSet<p21_price_engine_run_carrier_contract_line> p21_price_engine_run_carrier_contract_line { get; set; }
        public virtual DbSet<p21_price_engine_run_carrier_contract_z_line> p21_price_engine_run_carrier_contract_z_line { get; set; }
        public virtual DbSet<p21_price_engine_run_error_log> p21_price_engine_run_error_log { get; set; }
        public virtual DbSet<p21_price_engine_run_item> p21_price_engine_run_item { get; set; }
        public virtual DbSet<p21_price_engine_run_job_price_line> p21_price_engine_run_job_price_line { get; set; }
        public virtual DbSet<p21_price_engine_run_library> p21_price_engine_run_library { get; set; }
        public virtual DbSet<p21_price_engine_run_price_page> p21_price_engine_run_price_page { get; set; }
        public virtual DbSet<p21_price_engine_run_results> p21_price_engine_run_results { get; set; }
        public virtual DbSet<p21_price_engine_run_settings> p21_price_engine_run_settings { get; set; }
        public virtual DbSet<package> packages { get; set; }
        public virtual DbSet<package_type> package_type { get; set; }
        public virtual DbSet<package_x_shipment> package_x_shipment { get; set; }
        public virtual DbSet<pallet_bol_hdr> pallet_bol_hdr { get; set; }
        public virtual DbSet<pallet_bol_line> pallet_bol_line { get; set; }
        public virtual DbSet<pallet_hdr> pallet_hdr { get; set; }
        public virtual DbSet<pallet_line> pallet_line { get; set; }
        public virtual DbSet<pallet_lock_order> pallet_lock_order { get; set; }
        public virtual DbSet<part_type_trade> part_type_trade { get; set; }
        public virtual DbSet<partner_program> partner_program { get; set; }
        public virtual DbSet<passive_rebate_exclusion> passive_rebate_exclusion { get; set; }
        public virtual DbSet<passive_rebate_hdr> passive_rebate_hdr { get; set; }
        public virtual DbSet<passive_rebate_level> passive_rebate_level { get; set; }
        public virtual DbSet<passive_rebate_line> passive_rebate_line { get; set; }
        public virtual DbSet<payable_group> payable_group { get; set; }
        public virtual DbSet<payment_1099_detail> payment_1099_detail { get; set; }
        public virtual DbSet<payment_account> payment_account { get; set; }
        public virtual DbSet<payment_account_detail> payment_account_detail { get; set; }
        public virtual DbSet<payment_account_request_to_delete> payment_account_request_to_delete { get; set; }
        public virtual DbSet<payment_account_x_contact> payment_account_x_contact { get; set; }
        public virtual DbSet<payment_account_x_customer> payment_account_x_customer { get; set; }
        public virtual DbSet<payment_account_x_ship_to> payment_account_x_ship_to { get; set; }
        public virtual DbSet<payment_account_x_transaction> payment_account_x_transaction { get; set; }
        public virtual DbSet<payment_cfdi_additional_info> payment_cfdi_additional_info { get; set; }
        public virtual DbSet<payment_cfdi_override> payment_cfdi_override { get; set; }
        public virtual DbSet<payment_detail> payment_detail { get; set; }
        public virtual DbSet<payment_detail_iva> payment_detail_iva { get; set; }
        public virtual DbSet<payment_method_mx> payment_method_mx { get; set; }
        public virtual DbSet<payment_methods> payment_methods { get; set; }
        public virtual DbSet<payment_type_mx> payment_type_mx { get; set; }
        public virtual DbSet<payment_types> payment_types { get; set; }
        public virtual DbSet<payment_types_335> payment_types_335 { get; set; }
        public virtual DbSet<payment_types_x_payment_type_mx> payment_types_x_payment_type_mx { get; set; }
        public virtual DbSet<payment> payments { get; set; }
        public virtual DbSet<pbcatcol> pbcatcols { get; set; }
        public virtual DbSet<pbcatedt> pbcatedts { get; set; }
        public virtual DbSet<pbcatfmt> pbcatfmts { get; set; }
        public virtual DbSet<pbcattbl> pbcattbls { get; set; }
        public virtual DbSet<pbcatvld> pbcatvlds { get; set; }
        public virtual DbSet<pc_app_def> pc_app_def { get; set; }
        public virtual DbSet<pc_country> pc_country { get; set; }
        public virtual DbSet<pc_language_def> pc_language_def { get; set; }
        public virtual DbSet<pc_location_def> pc_location_def { get; set; }
        public virtual DbSet<pc_message_def> pc_message_def { get; set; }
        public virtual DbSet<pc_message_detail> pc_message_detail { get; set; }
        public virtual DbSet<pc_outline> pc_outline { get; set; }
        public virtual DbSet<pc_profile_def> pc_profile_def { get; set; }
        public virtual DbSet<pc_seqctl> pc_seqctl { get; set; }
        public virtual DbSet<pc_state> pc_state { get; set; }
        public virtual DbSet<pc_time_zone> pc_time_zone { get; set; }
        public virtual DbSet<pc_user_def> pc_user_def { get; set; }
        public virtual DbSet<pc_version> pc_version { get; set; }
        public virtual DbSet<pc_window_def> pc_window_def { get; set; }
        public virtual DbSet<pda_oelist_criteria> pda_oelist_criteria { get; set; }
        public virtual DbSet<pda_oelist_hdr> pda_oelist_hdr { get; set; }
        public virtual DbSet<pda_oelist_item> pda_oelist_item { get; set; }
        public virtual DbSet<pda_oelist_shipto> pda_oelist_shipto { get; set; }
        public virtual DbSet<pdaship_delivery_data> pdaship_delivery_data { get; set; }
        public virtual DbSet<pdaship_pick_hdr_data> pdaship_pick_hdr_data { get; set; }
        public virtual DbSet<pdaship_pick_line_data> pdaship_pick_line_data { get; set; }
        public virtual DbSet<pdaship_rma_hdr_data> pdaship_rma_hdr_data { get; set; }
        public virtual DbSet<pdaship_rma_line_data> pdaship_rma_line_data { get; set; }
        public virtual DbSet<pdaship_stop_data> pdaship_stop_data { get; set; }
        public virtual DbSet<pedimento> pedimentoes { get; set; }
        public virtual DbSet<pegmost_account> pegmost_account { get; set; }
        public virtual DbSet<pegmost_export_history> pegmost_export_history { get; set; }
        public virtual DbSet<pegmost_oe_hdr> pegmost_oe_hdr { get; set; }
        public virtual DbSet<pending_alerts> pending_alerts { get; set; }
        public virtual DbSet<pending_import> pending_import { get; set; }
        public virtual DbSet<pending_payments> pending_payments { get; set; }
        public virtual DbSet<pending_price_protection> pending_price_protection { get; set; }
        public virtual DbSet<pending_retroactive_rebates_info> pending_retroactive_rebates_info { get; set; }
        public virtual DbSet<period_journals> period_journals { get; set; }
        public virtual DbSet<period> periods { get; set; }
        public virtual DbSet<pick_list_hdr> pick_list_hdr { get; set; }
        public virtual DbSet<pick_list_hdr_x_oe_pick_ticket> pick_list_hdr_x_oe_pick_ticket { get; set; }
        public virtual DbSet<pick_list_line> pick_list_line { get; set; }
        public virtual DbSet<pick_ticket_report_criteria> pick_ticket_report_criteria { get; set; }
        public virtual DbSet<pick_ticket_serial> pick_ticket_serial { get; set; }
        public virtual DbSet<picking_tote_bin> picking_tote_bin { get; set; }
        public virtual DbSet<pinpoint_item_qty_sync> pinpoint_item_qty_sync { get; set; }
        public virtual DbSet<pl_app_extend> pl_app_extend { get; set; }
        public virtual DbSet<pl_collect_def> pl_collect_def { get; set; }
        public virtual DbSet<pl_group_collect> pl_group_collect { get; set; }
        public virtual DbSet<pl_group_def> pl_group_def { get; set; }
        public virtual DbSet<pl_group_object> pl_group_object { get; set; }
        public virtual DbSet<pl_object_collect> pl_object_collect { get; set; }
        public virtual DbSet<pl_object_def> pl_object_def { get; set; }
        public virtual DbSet<pl_profile_group> pl_profile_group { get; set; }
        public virtual DbSet<pl_user_collect> pl_user_collect { get; set; }
        public virtual DbSet<pl_user_object> pl_user_object { get; set; }
        public virtual DbSet<pmt_type_x_comm_reduction> pmt_type_x_comm_reduction { get; set; }
        public virtual DbSet<po_acknowledgement> po_acknowledgement { get; set; }
        public virtual DbSet<po_acknowledgement_hdr> po_acknowledgement_hdr { get; set; }
        public virtual DbSet<po_acknowledgement_line> po_acknowledgement_line { get; set; }
        public virtual DbSet<po_asn_hdr> po_asn_hdr { get; set; }
        public virtual DbSet<po_asn_line> po_asn_line { get; set; }
        public virtual DbSet<po_hdr> po_hdr { get; set; }
        public virtual DbSet<po_hdr_notepad> po_hdr_notepad { get; set; }
        public virtual DbSet<po_hdr_x_jc_job> po_hdr_x_jc_job { get; set; }
        public virtual DbSet<po_line> po_line { get; set; }
        public virtual DbSet<po_line_108> po_line_108 { get; set; }
        public virtual DbSet<po_line_27> po_line_27 { get; set; }
        public virtual DbSet<po_line_delivery_info> po_line_delivery_info { get; set; }
        public virtual DbSet<po_line_disputed_voucher> po_line_disputed_voucher { get; set; }
        public virtual DbSet<po_line_disputed_voucher_legacy> po_line_disputed_voucher_legacy { get; set; }
        public virtual DbSet<po_line_notepad> po_line_notepad { get; set; }
        public virtual DbSet<po_line_schedule> po_line_schedule { get; set; }
        public virtual DbSet<po_line_split> po_line_split { get; set; }
        public virtual DbSet<po_line_vessel_6> po_line_vessel_6 { get; set; }
        public virtual DbSet<po_line_x_lot_attribute_value> po_line_x_lot_attribute_value { get; set; }
        public virtual DbSet<po_receipt_voucher_194> po_receipt_voucher_194 { get; set; }
        public virtual DbSet<po_schedule> po_schedule { get; set; }
        public virtual DbSet<po_schedule_receipts> po_schedule_receipts { get; set; }
        public virtual DbSet<po_schedule_rule> po_schedule_rule { get; set; }
        public virtual DbSet<po_shipment_tracking> po_shipment_tracking { get; set; }
        public virtual DbSet<po_system_parameters> po_system_parameters { get; set; }
        public virtual DbSet<pod_document_template> pod_document_template { get; set; }
        public virtual DbSet<pool_liner_info> pool_liner_info { get; set; }
        public virtual DbSet<pool_liner_pattern> pool_liner_pattern { get; set; }
        public virtual DbSet<pool_liner_process> pool_liner_process { get; set; }
        public virtual DbSet<pool_liner_process_defaults> pool_liner_process_defaults { get; set; }
        public virtual DbSet<pool_liner_processing> pool_liner_processing { get; set; }
        public virtual DbSet<pool_liner_slot> pool_liner_slot { get; set; }
        public virtual DbSet<pool_position> pool_position { get; set; }
        public virtual DbSet<pool_pricing_code> pool_pricing_code { get; set; }
        public virtual DbSet<pool_pricing_code_break> pool_pricing_code_break { get; set; }
        public virtual DbSet<pool_shape> pool_shape { get; set; }
        public virtual DbSet<popup_column> popup_column { get; set; }
        public virtual DbSet<popup_detail> popup_detail { get; set; }
        public virtual DbSet<popup_field> popup_field { get; set; }
        public virtual DbSet<popup_field_behavior> popup_field_behavior { get; set; }
        public virtual DbSet<popup_field_value> popup_field_value { get; set; }
        public virtual DbSet<popup_index> popup_index { get; set; }
        public virtual DbSet<popup_onfly_setup> popup_onfly_setup { get; set; }
        public virtual DbSet<popup_statement> popup_statement { get; set; }
        public virtual DbSet<popup_x_popup> popup_x_popup { get; set; }
        public virtual DbSet<port> ports { get; set; }
        public virtual DbSet<port_printer> port_printer { get; set; }
        public virtual DbSet<portal> portals { get; set; }
        public virtual DbSet<portal_assignment> portal_assignment { get; set; }
        public virtual DbSet<portal_element> portal_element { get; set; }
        public virtual DbSet<portal_element_syntax> portal_element_syntax { get; set; }
        public virtual DbSet<portal_param_def> portal_param_def { get; set; }
        public virtual DbSet<portal_param_value> portal_param_value { get; set; }
        public virtual DbSet<portal_user_defined> portal_user_defined { get; set; }
        public virtual DbSet<portal_x_portal_element> portal_x_portal_element { get; set; }
        public virtual DbSet<predefined_coa> predefined_coa { get; set; }
        public virtual DbSet<predefined_fin_rpt_row_x_acct> predefined_fin_rpt_row_x_acct { get; set; }
        public virtual DbSet<preference> preferences { get; set; }
        public virtual DbSet<price_book> price_book { get; set; }
        public virtual DbSet<price_book_additional_info> price_book_additional_info { get; set; }
        public virtual DbSet<price_book_x_library> price_book_x_library { get; set; }
        public virtual DbSet<price_book_x_location> price_book_x_location { get; set; }
        public virtual DbSet<price_family> price_family { get; set; }
        public virtual DbSet<price_family_x_restricted_class> price_family_x_restricted_class { get; set; }
        public virtual DbSet<price_family_x_rewards_program> price_family_x_rewards_program { get; set; }
        public virtual DbSet<price_library> price_library { get; set; }
        public virtual DbSet<price_library_x_cust_x_cmpy> price_library_x_cust_x_cmpy { get; set; }
        public virtual DbSet<price_library_x_ship_to> price_library_x_ship_to { get; set; }
        public virtual DbSet<price_override_exception> price_override_exception { get; set; }
        public virtual DbSet<price_page> price_page { get; set; }
        public virtual DbSet<price_page_1266> price_page_1266 { get; set; }
        public virtual DbSet<price_page_break> price_page_break { get; set; }
        public virtual DbSet<price_page_custpart> price_page_custpart { get; set; }
        public virtual DbSet<price_page_dealer_commission> price_page_dealer_commission { get; set; }
        public virtual DbSet<price_page_discgrp> price_page_discgrp { get; set; }
        public virtual DbSet<price_page_import_column> price_page_import_column { get; set; }
        public virtual DbSet<price_page_import_dtl> price_page_import_dtl { get; set; }
        public virtual DbSet<price_page_import_layout> price_page_import_layout { get; set; }
        public virtual DbSet<price_page_item> price_page_item { get; set; }
        public virtual DbSet<price_page_location> price_page_location { get; set; }
        public virtual DbSet<price_page_po_cost_calc> price_page_po_cost_calc { get; set; }
        public virtual DbSet<price_page_pricefam> price_page_pricefam { get; set; }
        public virtual DbSet<price_page_prodgrp> price_page_prodgrp { get; set; }
        public virtual DbSet<price_page_secondary_rebate> price_page_secondary_rebate { get; set; }
        public virtual DbSet<price_page_source> price_page_source { get; set; }
        public virtual DbSet<price_page_suppdisc> price_page_suppdisc { get; set; }
        public virtual DbSet<price_page_supplier> price_page_supplier { get; set; }
        public virtual DbSet<price_page_suppmfg> price_page_suppmfg { get; set; }
        public virtual DbSet<price_page_supppricefam> price_page_supppricefam { get; set; }
        public virtual DbSet<price_page_suppprod> price_page_suppprod { get; set; }
        public virtual DbSet<price_page_type_x_company> price_page_type_x_company { get; set; }
        public virtual DbSet<price_page_x_book> price_page_x_book { get; set; }
        public virtual DbSet<price_source_x_company> price_source_x_company { get; set; }
        public virtual DbSet<pricing_pros_criteria> pricing_pros_criteria { get; set; }
        public virtual DbSet<pricing_pros_lookup_values> pricing_pros_lookup_values { get; set; }
        public virtual DbSet<pricing_service_catalog> pricing_service_catalog { get; set; }
        public virtual DbSet<pricing_service_code> pricing_service_code { get; set; }
        public virtual DbSet<pricing_service_code_detail> pricing_service_code_detail { get; set; }
        public virtual DbSet<pricing_service_column> pricing_service_column { get; set; }
        public virtual DbSet<pricing_service_conversion> pricing_service_conversion { get; set; }
        public virtual DbSet<pricing_service_extension> pricing_service_extension { get; set; }
        public virtual DbSet<pricing_service_filter> pricing_service_filter { get; set; }
        public virtual DbSet<pricing_service_layout> pricing_service_layout { get; set; }
        public virtual DbSet<pricing_service_layout_detail> pricing_service_layout_detail { get; set; }
        public virtual DbSet<pricing_service_layout_loc> pricing_service_layout_loc { get; set; }
        public virtual DbSet<pricing_service_log> pricing_service_log { get; set; }
        public virtual DbSet<pricing_service_map> pricing_service_map { get; set; }
        public virtual DbSet<pricing_service_product_accts> pricing_service_product_accts { get; set; }
        public virtual DbSet<pricing_service_value> pricing_service_value { get; set; }
        public virtual DbSet<pricing_service_value_detail> pricing_service_value_detail { get; set; }
        public virtual DbSet<pricing_template> pricing_template { get; set; }
        public virtual DbSet<pricing_template_item_dflt> pricing_template_item_dflt { get; set; }
        public virtual DbSet<pricing_template_key_field> pricing_template_key_field { get; set; }
        public virtual DbSet<pricing_template_location> pricing_template_location { get; set; }
        public virtual DbSet<pricing_template_location_dflt> pricing_template_location_dflt { get; set; }
        public virtual DbSet<printer_detail> printer_detail { get; set; }
        public virtual DbSet<printer_hdr> printer_hdr { get; set; }
        public virtual DbSet<printer_x_form> printer_x_form { get; set; }
        public virtual DbSet<pro_forma_info> pro_forma_info { get; set; }
        public virtual DbSet<problem_code> problem_code { get; set; }
        public virtual DbSet<problem_code_x_inv_mast> problem_code_x_inv_mast { get; set; }
        public virtual DbSet<proc_x_trans_det_x_po_hdr> proc_x_trans_det_x_po_hdr { get; set; }
        public virtual DbSet<process> processes { get; set; }
        public virtual DbSet<process_in_progress_lock> process_in_progress_lock { get; set; }
        public virtual DbSet<process_notepad> process_notepad { get; set; }
        public virtual DbSet<process_po_shipment_hdr> process_po_shipment_hdr { get; set; }
        public virtual DbSet<process_predefined_item> process_predefined_item { get; set; }
        public virtual DbSet<process_system_parameters> process_system_parameters { get; set; }
        public virtual DbSet<process_x_trans_x_oe_line> process_x_trans_x_oe_line { get; set; }
        public virtual DbSet<process_x_transaction> process_x_transaction { get; set; }
        public virtual DbSet<process_x_transaction_detail> process_x_transaction_detail { get; set; }
        public virtual DbSet<process_x_transaction_note> process_x_transaction_note { get; set; }
        public virtual DbSet<prod_group_dealer_warranty> prod_group_dealer_warranty { get; set; }
        public virtual DbSet<prod_group_dealer_warranty_equip> prod_group_dealer_warranty_equip { get; set; }
        public virtual DbSet<prod_group_dealer_warranty_serial> prod_group_dealer_warranty_serial { get; set; }
        public virtual DbSet<prod_group_strategic_hdr> prod_group_strategic_hdr { get; set; }
        public virtual DbSet<prod_group_strategic_line> prod_group_strategic_line { get; set; }
        public virtual DbSet<prod_line_component_labor> prod_line_component_labor { get; set; }
        public virtual DbSet<prod_ord_comp_x_inv_adj> prod_ord_comp_x_inv_adj { get; set; }
        public virtual DbSet<prod_ord_line_compnt_x_oe_line> prod_ord_line_compnt_x_oe_line { get; set; }
        public virtual DbSet<prod_ord_line_po> prod_ord_line_po { get; set; }
        public virtual DbSet<prod_order_hdr> prod_order_hdr { get; set; }
        public virtual DbSet<prod_order_line> prod_order_line { get; set; }
        public virtual DbSet<prod_order_line_comp_frght> prod_order_line_comp_frght { get; set; }
        public virtual DbSet<prod_order_line_comp_labor> prod_order_line_comp_labor { get; set; }
        public virtual DbSet<prod_order_line_component> prod_order_line_component { get; set; }
        public virtual DbSet<prod_order_line_link> prod_order_line_link { get; set; }
        public virtual DbSet<prod_order_line_process> prod_order_line_process { get; set; }
        public virtual DbSet<prod_order_print_info> prod_order_print_info { get; set; }
        public virtual DbSet<prod_order_system_parameters> prod_order_system_parameters { get; set; }
        public virtual DbSet<prod_pick_ticket_detail> prod_pick_ticket_detail { get; set; }
        public virtual DbSet<prod_pick_ticket_hdr> prod_pick_ticket_hdr { get; set; }
        public virtual DbSet<prodord_tech_default_shift> prodord_tech_default_shift { get; set; }
        public virtual DbSet<prodorder_calendar> prodorder_calendar { get; set; }
        public virtual DbSet<prodorder_labor> prodorder_labor { get; set; }
        public virtual DbSet<prodorder_labor_proc_dtl> prodorder_labor_proc_dtl { get; set; }
        public virtual DbSet<prodorder_labor_proc_hdr> prodorder_labor_proc_hdr { get; set; }
        public virtual DbSet<prodorder_labor_rate> prodorder_labor_rate { get; set; }
        public virtual DbSet<prodorder_labor_schedule> prodorder_labor_schedule { get; set; }
        public virtual DbSet<prodorder_shift> prodorder_shift { get; set; }
        public virtual DbSet<prodorder_tech_x_labor> prodorder_tech_x_labor { get; set; }
        public virtual DbSet<prodorder_technician> prodorder_technician { get; set; }
        public virtual DbSet<prodorder_work_center> prodorder_work_center { get; set; }
        public virtual DbSet<prodorder_work_day> prodorder_work_day { get; set; }
        public virtual DbSet<product_group> product_group { get; set; }
        public virtual DbSet<product_group_direct_ship> product_group_direct_ship { get; set; }
        public virtual DbSet<product_group_duplicate_order> product_group_duplicate_order { get; set; }
        public virtual DbSet<product_group_effective_days> product_group_effective_days { get; set; }
        public virtual DbSet<product_group_prc_ctrl_dtl> product_group_prc_ctrl_dtl { get; set; }
        public virtual DbSet<product_group_prefix> product_group_prefix { get; set; }
        public virtual DbSet<product_group_price_increment> product_group_price_increment { get; set; }
        public virtual DbSet<product_group_salesrep> product_group_salesrep { get; set; }
        public virtual DbSet<product_group_x_restricted_class> product_group_x_restricted_class { get; set; }
        public virtual DbSet<product_group_x_rewards_program> product_group_x_rewards_program { get; set; }
        public virtual DbSet<product_group_x_unit_type_category> product_group_x_unit_type_category { get; set; }
        public virtual DbSet<product_service_mx> product_service_mx { get; set; }
        public virtual DbSet<progress_billing_x_invoice_hdr> progress_billing_x_invoice_hdr { get; set; }
        public virtual DbSet<promotional_group_det> promotional_group_det { get; set; }
        public virtual DbSet<promotional_group_hdr> promotional_group_hdr { get; set; }
        public virtual DbSet<prorate_reason_detail> prorate_reason_detail { get; set; }
        public virtual DbSet<prorate_reason_hdr> prorate_reason_hdr { get; set; }
        public virtual DbSet<pt_dtl_bill_hold_bin> pt_dtl_bill_hold_bin { get; set; }
        public virtual DbSet<published_portal> published_portal { get; set; }
        public virtual DbSet<published_portal_detail> published_portal_detail { get; set; }
        public virtual DbSet<purch_type> purch_type { get; set; }
        public virtual DbSet<purchase_acct_group_hdr> purchase_acct_group_hdr { get; set; }
        public virtual DbSet<purchase_acct_group_line> purchase_acct_group_line { get; set; }
        public virtual DbSet<purchase_class> purchase_class { get; set; }
        public virtual DbSet<purchase_class_x_location> purchase_class_x_location { get; set; }
        public virtual DbSet<purchase_criteria> purchase_criteria { get; set; }
        public virtual DbSet<purchase_price_library> purchase_price_library { get; set; }
        public virtual DbSet<purchase_price_library_detail> purchase_price_library_detail { get; set; }
        public virtual DbSet<purchase_pricing_book> purchase_pricing_book { get; set; }
        public virtual DbSet<purchase_pricing_page> purchase_pricing_page { get; set; }
        public virtual DbSet<purchase_pricing_page_1266> purchase_pricing_page_1266 { get; set; }
        public virtual DbSet<purchase_transfer_group> purchase_transfer_group { get; set; }
        public virtual DbSet<purchase_transfer_locations> purchase_transfer_locations { get; set; }
        public virtual DbSet<putaway_trace> putaway_trace { get; set; }
        public virtual DbSet<quality_code> quality_code { get; set; }
        public virtual DbSet<quarter> quarters { get; set; }
        public virtual DbSet<quote_hdr> quote_hdr { get; set; }
        public virtual DbSet<quote_line> quote_line { get; set; }
        public virtual DbSet<quote_lot> quote_lot { get; set; }
        public virtual DbSet<quote_revision> quote_revision { get; set; }
        public virtual DbSet<rate_or_fee_mx> rate_or_fee_mx { get; set; }
        public virtual DbSet<reapplied_payment_line> reapplied_payment_line { get; set; }
        public virtual DbSet<reason> reasons { get; set; }
        public virtual DbSet<reason_code> reason_code { get; set; }
        public virtual DbSet<rebate_payments_charge> rebate_payments_charge { get; set; }
        public virtual DbSet<rebate_payments_detail> rebate_payments_detail { get; set; }
        public virtual DbSet<rebate_receipts_detail> rebate_receipts_detail { get; set; }
        public virtual DbSet<rebill_invoice_reason> rebill_invoice_reason { get; set; }
        public virtual DbSet<receivable_group> receivable_group { get; set; }
        public virtual DbSet<recon_layout_dtl_auto_je> recon_layout_dtl_auto_je { get; set; }
        public virtual DbSet<recon_layout_dtl_auto_je_acct> recon_layout_dtl_auto_je_acct { get; set; }
        public virtual DbSet<reconciliation_layout_detail> reconciliation_layout_detail { get; set; }
        public virtual DbSet<reconciliation_layout_hdr> reconciliation_layout_hdr { get; set; }
        public virtual DbSet<recur_apinv_hdr> recur_apinv_hdr { get; set; }
        public virtual DbSet<recur_apinv_line> recur_apinv_line { get; set; }
        public virtual DbSet<refrigerant_type> refrigerant_type { get; set; }
        public virtual DbSet<region> regions { get; set; }
        public virtual DbSet<region_x_branch> region_x_branch { get; set; }
        public virtual DbSet<remittance> remittances { get; set; }
        public virtual DbSet<remittances_detail> remittances_detail { get; set; }
        public virtual DbSet<rental_class> rental_class { get; set; }
        public virtual DbSet<rental_log> rental_log { get; set; }
        public virtual DbSet<rental_processing> rental_processing { get; set; }
        public virtual DbSet<repair_sales_orders> repair_sales_orders { get; set; }
        public virtual DbSet<repair_sales_orders_history> repair_sales_orders_history { get; set; }
        public virtual DbSet<repair_transfers> repair_transfers { get; set; }
        public virtual DbSet<repeat_je> repeat_je { get; set; }
        public virtual DbSet<report> reports { get; set; }
        public virtual DbSet<report_code> report_code { get; set; }
        public virtual DbSet<report_code_group_p21> report_code_group_p21 { get; set; }
        public virtual DbSet<report_code_p21> report_code_p21 { get; set; }
        public virtual DbSet<report_code_x_code_group_p21> report_code_x_code_group_p21 { get; set; }
        public virtual DbSet<report_conditional> report_conditional { get; set; }
        public virtual DbSet<report_criteria> report_criteria { get; set; }
        public virtual DbSet<report_criteria_detail> report_criteria_detail { get; set; }
        public virtual DbSet<report_email_defaults_x_token> report_email_defaults_x_token { get; set; }
        public virtual DbSet<report_email_subject_x_token> report_email_subject_x_token { get; set; }
        public virtual DbSet<report_execution_configuration> report_execution_configuration { get; set; }
        public virtual DbSet<report_execution_configuration_value> report_execution_configuration_value { get; set; }
        public virtual DbSet<report_hdr> report_hdr { get; set; }
        public virtual DbSet<report_keyword> report_keyword { get; set; }
        public virtual DbSet<report_metadata> report_metadata { get; set; }
        public virtual DbSet<report_metadata_criteria> report_metadata_criteria { get; set; }
        public virtual DbSet<report_metadata_graph> report_metadata_graph { get; set; }
        public virtual DbSet<report_metadata_x_roles> report_metadata_x_roles { get; set; }
        public virtual DbSet<report_metadata_x_users> report_metadata_x_users { get; set; }
        public virtual DbSet<report_parameter> report_parameter { get; set; }
        public virtual DbSet<report_parameter_group> report_parameter_group { get; set; }
        public virtual DbSet<report_parameter_x_group> report_parameter_x_group { get; set; }
        public virtual DbSet<report_parm> report_parm { get; set; }
        public virtual DbSet<report_presentation> report_presentation { get; set; }
        public virtual DbSet<report_style> report_style { get; set; }
        public virtual DbSet<report_territory> report_territory { get; set; }
        public virtual DbSet<report_x_server_configuration> report_x_server_configuration { get; set; }
        public virtual DbSet<reporting_export_log> reporting_export_log { get; set; }
        public virtual DbSet<research_tracking_hdr> research_tracking_hdr { get; set; }
        public virtual DbSet<research_tracking_line> research_tracking_line { get; set; }
        public virtual DbSet<resource_monitor> resource_monitor { get; set; }
        public virtual DbSet<restate_accounts_hdr> restate_accounts_hdr { get; set; }
        public virtual DbSet<restate_accounts_line> restate_accounts_line { get; set; }
        public virtual DbSet<restricted_class> restricted_class { get; set; }
        public virtual DbSet<return_transfer_criteria> return_transfer_criteria { get; set; }
        public virtual DbSet<reverse_payment_hdr> reverse_payment_hdr { get; set; }
        public virtual DbSet<reverse_payment_line> reverse_payment_line { get; set; }
        public virtual DbSet<review_lockbox_payment_import_hdr> review_lockbox_payment_import_hdr { get; set; }
        public virtual DbSet<review_lockbox_payment_import_line> review_lockbox_payment_import_line { get; set; }
        public virtual DbSet<revision_transaction> revision_transaction { get; set; }
        public virtual DbSet<rewards_program> rewards_program { get; set; }
        public virtual DbSet<rewards_program_entry_form> rewards_program_entry_form { get; set; }
        public virtual DbSet<rewards_program_entry_goal> rewards_program_entry_goal { get; set; }
        public virtual DbSet<rewards_program_entry_year> rewards_program_entry_year { get; set; }
        public virtual DbSet<rewards_program_x_accrued_claims> rewards_program_x_accrued_claims { get; set; }
        public virtual DbSet<rf_found_item> rf_found_item { get; set; }
        public virtual DbSet<rf_keys_default> rf_keys_default { get; set; }
        public virtual DbSet<rf_terminal> rf_terminal { get; set; }
        public virtual DbSet<rf_terminal_inventory> rf_terminal_inventory { get; set; }
        public virtual DbSet<rfnavigator_sync_dump_batch> rfnavigator_sync_dump_batch { get; set; }
        public virtual DbSet<rfnavigator_sync_dump_batch_dtl> rfnavigator_sync_dump_batch_dtl { get; set; }
        public virtual DbSet<rfnavigator_upload_log> rfnavigator_upload_log { get; set; }
        public virtual DbSet<rfnavigator_upload_queue> rfnavigator_upload_queue { get; set; }
        public virtual DbSet<ribbon> ribbons { get; set; }
        public virtual DbSet<ribbon_metric> ribbon_metric { get; set; }
        public virtual DbSet<ribbon_metric_x_roles> ribbon_metric_x_roles { get; set; }
        public virtual DbSet<ribbon_metric_x_users> ribbon_metric_x_users { get; set; }
        public virtual DbSet<ribbon_tab> ribbon_tab { get; set; }
        public virtual DbSet<ribbon_tab_group> ribbon_tab_group { get; set; }
        public virtual DbSet<ribbon_tab_group_x_ribbon_tab> ribbon_tab_group_x_ribbon_tab { get; set; }
        public virtual DbSet<ribbon_tab_x_ribbon> ribbon_tab_x_ribbon { get; set; }
        public virtual DbSet<ribbon_tool> ribbon_tool { get; set; }
        public virtual DbSet<ribbon_tool_x_ribbon_tab_group> ribbon_tool_x_ribbon_tab_group { get; set; }
        public virtual DbSet<rma_line_carrier_contract_info> rma_line_carrier_contract_info { get; set; }
        public virtual DbSet<rma_receipt_hdr> rma_receipt_hdr { get; set; }
        public virtual DbSet<rma_receipt_hdr_4686> rma_receipt_hdr_4686 { get; set; }
        public virtual DbSet<rma_receipt_line> rma_receipt_line { get; set; }
        public virtual DbSet<rma_status> rma_status { get; set; }
        public virtual DbSet<rma_x_cc_payments> rma_x_cc_payments { get; set; }
        public virtual DbSet<rma_x_cc_payments_freight> rma_x_cc_payments_freight { get; set; }
        public virtual DbSet<roadnet_pod> roadnet_pod { get; set; }
        public virtual DbSet<roadnet_routing> roadnet_routing { get; set; }
        public virtual DbSet<role> roles { get; set; }
        public virtual DbSet<roles_loa> roles_loa { get; set; }
        public virtual DbSet<roles_loa_restricted_items> roles_loa_restricted_items { get; set; }
        public virtual DbSet<roles_loa_sales_disc_grp> roles_loa_sales_disc_grp { get; set; }
        public virtual DbSet<roles_portal> roles_portal { get; set; }
        public virtual DbSet<roles_price_controls> roles_price_controls { get; set; }
        public virtual DbSet<roles_x_activity> roles_x_activity { get; set; }
        public virtual DbSet<roles_x_hold_class> roles_x_hold_class { get; set; }
        public virtual DbSet<room> rooms { get; set; }
        public virtual DbSet<room_area> room_area { get; set; }
        public virtual DbSet<room_x_oe_hdr> room_x_oe_hdr { get; set; }
        public virtual DbSet<rounding_installment_10005> rounding_installment_10005 { get; set; }
        public virtual DbSet<routeview_batch_dtl> routeview_batch_dtl { get; set; }
        public virtual DbSet<routeview_batch_hdr> routeview_batch_hdr { get; set; }
        public virtual DbSet<safety_stock_analysis_run> safety_stock_analysis_run { get; set; }
        public virtual DbSet<sales_calls> sales_calls { get; set; }
        public virtual DbSet<sales_market_group> sales_market_group { get; set; }
        public virtual DbSet<sales_mgmt_criteria> sales_mgmt_criteria { get; set; }
        public virtual DbSet<salesrep_comm_days_overdue> salesrep_comm_days_overdue { get; set; }
        public virtual DbSet<salesrep_commission> salesrep_commission { get; set; }
        public virtual DbSet<salesrep_commission_class> salesrep_commission_class { get; set; }
        public virtual DbSet<salesrep_commission_split> salesrep_commission_split { get; set; }
        public virtual DbSet<salesrep_inside> salesrep_inside { get; set; }
        public virtual DbSet<salesrep_notepad> salesrep_notepad { get; set; }
        public virtual DbSet<salesrep_postalcode> salesrep_postalcode { get; set; }
        public virtual DbSet<salesrep_quota> salesrep_quota { get; set; }
        public virtual DbSet<salesrep_quota_detail> salesrep_quota_detail { get; set; }
        public virtual DbSet<salesrep_quota_period> salesrep_quota_period { get; set; }
        public virtual DbSet<salesrep_quota_x_quarter> salesrep_quota_x_quarter { get; set; }
        public virtual DbSet<salesrep_weboe> salesrep_weboe { get; set; }
        public virtual DbSet<salutation> salutations { get; set; }
        public virtual DbSet<sat_invoice_auxfoliorep_mx> sat_invoice_auxfoliorep_mx { get; set; }
        public virtual DbSet<sat_payment_transfer_mx> sat_payment_transfer_mx { get; set; }
        public virtual DbSet<scan_pack> scan_pack { get; set; }
        public virtual DbSet<scan_pack_container_detail> scan_pack_container_detail { get; set; }
        public virtual DbSet<scan_pack_container_detail_tag> scan_pack_container_detail_tag { get; set; }
        public virtual DbSet<scan_pack_container_hdr> scan_pack_container_hdr { get; set; }
        public virtual DbSet<scheduled_impmst_addlpath_194> scheduled_impmst_addlpath_194 { get; set; }
        public virtual DbSet<scheduled_import_def> scheduled_import_def { get; set; }
        public virtual DbSet<scheduled_import_details> scheduled_import_details { get; set; }
        public virtual DbSet<scheduled_import_master> scheduled_import_master { get; set; }
        public virtual DbSet<scheduled_import_master_aux> scheduled_import_master_aux { get; set; }
        public virtual DbSet<scheduled_job> scheduled_job { get; set; }
        public virtual DbSet<scheduled_job_feature> scheduled_job_feature { get; set; }
        public virtual DbSet<scheduled_job_feature_type> scheduled_job_feature_type { get; set; }
        public virtual DbSet<scheduled_job_history> scheduled_job_history { get; set; }
        public virtual DbSet<scheduled_job_notifications> scheduled_job_notifications { get; set; }
        public virtual DbSet<scheduled_job_user_notifications> scheduled_job_user_notifications { get; set; }
        public virtual DbSet<scheduled_job_x_roles> scheduled_job_x_roles { get; set; }
        public virtual DbSet<scheduled_job_x_users> scheduled_job_x_users { get; set; }
        public virtual DbSet<script_command> script_command { get; set; }
        public virtual DbSet<script_status> script_status { get; set; }
        public virtual DbSet<serial_number> serial_number { get; set; }
        public virtual DbSet<serial_number_extd_info> serial_number_extd_info { get; set; }
        public virtual DbSet<serial_number_x_integration> serial_number_x_integration { get; set; }
        public virtual DbSet<serial_x_lot> serial_x_lot { get; set; }
        public virtual DbSet<service_calendar> service_calendar { get; set; }
        public virtual DbSet<service_center> service_center { get; set; }
        public virtual DbSet<service_center_x_machine> service_center_x_machine { get; set; }
        public virtual DbSet<service_code> service_code { get; set; }
        public virtual DbSet<service_cycle> service_cycle { get; set; }
        public virtual DbSet<service_inv_mast> service_inv_mast { get; set; }
        public virtual DbSet<service_inv_mast_part_list> service_inv_mast_part_list { get; set; }
        public virtual DbSet<service_inv_mast_pm_item> service_inv_mast_pm_item { get; set; }
        public virtual DbSet<service_inv_mast_pm_sched> service_inv_mast_pm_sched { get; set; }
        public virtual DbSet<service_inv_mast_x_integration> service_inv_mast_x_integration { get; set; }
        public virtual DbSet<service_inv_warranty> service_inv_warranty { get; set; }
        public virtual DbSet<service_inv_warranty_labor> service_inv_warranty_labor { get; set; }
        public virtual DbSet<service_inv_warranty_part> service_inv_warranty_part { get; set; }
        public virtual DbSet<service_item_notepad> service_item_notepad { get; set; }
        public virtual DbSet<service_labor> service_labor { get; set; }
        public virtual DbSet<service_labor_location> service_labor_location { get; set; }
        public virtual DbSet<service_labor_process_dtl> service_labor_process_dtl { get; set; }
        public virtual DbSet<service_labor_process_hdr> service_labor_process_hdr { get; set; }
        public virtual DbSet<service_labor_rate> service_labor_rate { get; set; }
        public virtual DbSet<service_labor_rate_x_cust> service_labor_rate_x_cust { get; set; }
        public virtual DbSet<service_labor_rate_x_partner_program> service_labor_rate_x_partner_program { get; set; }
        public virtual DbSet<service_labor_schedule> service_labor_schedule { get; set; }
        public virtual DbSet<service_labor_time_x_integration> service_labor_time_x_integration { get; set; }
        public virtual DbSet<service_labor_x_integration> service_labor_x_integration { get; set; }
        public virtual DbSet<service_labor_x_tax_group_hdr> service_labor_x_tax_group_hdr { get; set; }
        public virtual DbSet<service_level_agreement> service_level_agreement { get; set; }
        public virtual DbSet<service_order_priority> service_order_priority { get; set; }
        public virtual DbSet<service_plan> service_plan { get; set; }
        public virtual DbSet<service_pm_notice_msg> service_pm_notice_msg { get; set; }
        public virtual DbSet<service_signature> service_signature { get; set; }
        public virtual DbSet<service_technician> service_technician { get; set; }
        public virtual DbSet<service_technician_x_integration> service_technician_x_integration { get; set; }
        public virtual DbSet<service_technician_x_labor> service_technician_x_labor { get; set; }
        public virtual DbSet<service_technician_x_service_center> service_technician_x_service_center { get; set; }
        public virtual DbSet<service_warranty> service_warranty { get; set; }
        public virtual DbSet<service_warranty_claim> service_warranty_claim { get; set; }
        public virtual DbSet<service_warranty_item> service_warranty_item { get; set; }
        public virtual DbSet<service_warranty_labor> service_warranty_labor { get; set; }
        public virtual DbSet<service_warranty_part> service_warranty_part { get; set; }
        public virtual DbSet<servicebench_credit_memo> servicebench_credit_memo { get; set; }
        public virtual DbSet<servicebench_wrrnty_claim_pending_import> servicebench_wrrnty_claim_pending_import { get; set; }
        public virtual DbSet<shift> shifts { get; set; }
        public virtual DbSet<ship_to> ship_to { get; set; }
        public virtual DbSet<ship_to_194> ship_to_194 { get; set; }
        public virtual DbSet<ship_to_2186> ship_to_2186 { get; set; }
        public virtual DbSet<ship_to_335> ship_to_335 { get; set; }
        public virtual DbSet<ship_to_3rd_party_carriers_194> ship_to_3rd_party_carriers_194 { get; set; }
        public virtual DbSet<ship_to_address_x_restricted_class> ship_to_address_x_restricted_class { get; set; }
        public virtual DbSet<ship_to_blind_addressing> ship_to_blind_addressing { get; set; }
        public virtual DbSet<ship_to_cardlock> ship_to_cardlock { get; set; }
        public virtual DbSet<ship_to_carrier_acct> ship_to_carrier_acct { get; set; }
        public virtual DbSet<ship_to_credit> ship_to_credit { get; set; }
        public virtual DbSet<ship_to_dea> ship_to_dea { get; set; }
        public virtual DbSet<ship_to_eco_fee> ship_to_eco_fee { get; set; }
        public virtual DbSet<ship_to_eft> ship_to_eft { get; set; }
        public virtual DbSet<ship_to_fedex> ship_to_fedex { get; set; }
        public virtual DbSet<ship_to_finance_charge> ship_to_finance_charge { get; set; }
        public virtual DbSet<ship_to_form_template> ship_to_form_template { get; set; }
        public virtual DbSet<ship_to_freight_group> ship_to_freight_group { get; set; }
        public virtual DbSet<ship_to_freight_multiplier> ship_to_freight_multiplier { get; set; }
        public virtual DbSet<ship_to_geocom> ship_to_geocom { get; set; }
        public virtual DbSet<ship_to_gpo> ship_to_gpo { get; set; }
        public virtual DbSet<ship_to_item> ship_to_item { get; set; }
        public virtual DbSet<ship_to_iva_tax> ship_to_iva_tax { get; set; }
        public virtual DbSet<ship_to_jurisdiction> ship_to_jurisdiction { get; set; }
        public virtual DbSet<ship_to_location_priority> ship_to_location_priority { get; set; }
        public virtual DbSet<ship_to_notepad> ship_to_notepad { get; set; }
        public virtual DbSet<ship_to_order_cmp_pct> ship_to_order_cmp_pct { get; set; }
        public virtual DbSet<ship_to_packing_list> ship_to_packing_list { get; set; }
        public virtual DbSet<ship_to_pumpoff> ship_to_pumpoff { get; set; }
        public virtual DbSet<ship_to_salesrep> ship_to_salesrep { get; set; }
        public virtual DbSet<ship_to_salesrep_location> ship_to_salesrep_location { get; set; }
        public virtual DbSet<ship_to_tax_exceptions> ship_to_tax_exceptions { get; set; }
        public virtual DbSet<ship_to_tax_exemption> ship_to_tax_exemption { get; set; }
        public virtual DbSet<ship_to_tax_state_exempt> ship_to_tax_state_exempt { get; set; }
        public virtual DbSet<ship_to_ud> ship_to_ud { get; set; }
        public virtual DbSet<ship_to_vat> ship_to_vat { get; set; }
        public virtual DbSet<ship_to_x_integration> ship_to_x_integration { get; set; }
        public virtual DbSet<ship_to_x_inv_mast> ship_to_x_inv_mast { get; set; }
        public virtual DbSet<shipment> shipments { get; set; }
        public virtual DbSet<shipping_charges> shipping_charges { get; set; }
        public virtual DbSet<shipping_containers_hdr> shipping_containers_hdr { get; set; }
        public virtual DbSet<shipping_containers_line> shipping_containers_line { get; set; }
        public virtual DbSet<shipping_containers_line_temp> shipping_containers_line_temp { get; set; }
        public virtual DbSet<shipping_country_code> shipping_country_code { get; set; }
        public virtual DbSet<shipping_document_template> shipping_document_template { get; set; }
        public virtual DbSet<shipping_group> shipping_group { get; set; }
        public virtual DbSet<shipping_group_hdr> shipping_group_hdr { get; set; }
        public virtual DbSet<shipping_group_line> shipping_group_line { get; set; }
        public virtual DbSet<shipping_integration_msg_handling> shipping_integration_msg_handling { get; set; }
        public virtual DbSet<shipping_iva_tax> shipping_iva_tax { get; set; }
        public virtual DbSet<shipping_log> shipping_log { get; set; }
        public virtual DbSet<shipping_package_type> shipping_package_type { get; set; }
        public virtual DbSet<shipping_route> shipping_route { get; set; }
        public virtual DbSet<shipping_route_day_range> shipping_route_day_range { get; set; }
        public virtual DbSet<shipping_zone_hdr> shipping_zone_hdr { get; set; }
        public virtual DbSet<shipping_zone_line> shipping_zone_line { get; set; }
        public virtual DbSet<shipserv_tradenet_export> shipserv_tradenet_export { get; set; }
        public virtual DbSet<shipto_carrier> shipto_carrier { get; set; }
        public virtual DbSet<shopper> shoppers { get; set; }
        public virtual DbSet<shopping_cart_allocation> shopping_cart_allocation { get; set; }
        public virtual DbSet<sic> sics { get; set; }
        public virtual DbSet<signature_capture> signature_capture { get; set; }
        public virtual DbSet<siop_whitelist> siop_whitelist { get; set; }
        public virtual DbSet<skid_consolidation> skid_consolidation { get; set; }
        public virtual DbSet<skillset> skillsets { get; set; }
        public virtual DbSet<soa_async_request> soa_async_request { get; set; }
        public virtual DbSet<soa_consumer> soa_consumer { get; set; }
        public virtual DbSet<sort_dragdrop> sort_dragdrop { get; set; }
        public virtual DbSet<spa_slots> spa_slots { get; set; }
        public virtual DbSet<spe_parameter_info> spe_parameter_info { get; set; }
        public virtual DbSet<spe_parameter_log> spe_parameter_log { get; set; }
        public virtual DbSet<spe_procedure_info> spe_procedure_info { get; set; }
        public virtual DbSet<spe_procedure_log> spe_procedure_log { get; set; }
        public virtual DbSet<special_inv_layer> special_inv_layer { get; set; }
        public virtual DbSet<special_inv_layer_tran> special_inv_layer_tran { get; set; }
        public virtual DbSet<ssis_restricted_items_work> ssis_restricted_items_work { get; set; }
        public virtual DbSet<stage> stages { get; set; }
        public virtual DbSet<stage_notepad> stage_notepad { get; set; }
        public virtual DbSet<stage_x_process> stage_x_process { get; set; }
        public virtual DbSet<state> states { get; set; }
        public virtual DbSet<state_alt_loc> state_alt_loc { get; set; }
        public virtual DbSet<state_mx> state_mx { get; set; }
        public virtual DbSet<statement_frequency> statement_frequency { get; set; }
        public virtual DbSet<statistical_account_hdr> statistical_account_hdr { get; set; }
        public virtual DbSet<statistical_account_line> statistical_account_line { get; set; }
        public virtual DbSet<stop> stops { get; set; }
        public virtual DbSet<store_credit_hdr> store_credit_hdr { get; set; }
        public virtual DbSet<store_original_datastream> store_original_datastream { get; set; }
        public virtual DbSet<stored_procedure_arg> stored_procedure_arg { get; set; }
        public virtual DbSet<stored_procedure_def> stored_procedure_def { get; set; }
        public virtual DbSet<strat_price_factor_detail> strat_price_factor_detail { get; set; }
        public virtual DbSet<strat_price_factor_hdr> strat_price_factor_hdr { get; set; }
        public virtual DbSet<strategic_pricing_invoice> strategic_pricing_invoice { get; set; }
        public virtual DbSet<strategic_pricing_oe_info> strategic_pricing_oe_info { get; set; }
        public virtual DbSet<strategic_pricing_role> strategic_pricing_role { get; set; }
        public virtual DbSet<summary_invoice_daily> summary_invoice_daily { get; set; }
        public virtual DbSet<summary_invoice_monthly> summary_invoice_monthly { get; set; }
        public virtual DbSet<summary_po_loc_daily> summary_po_loc_daily { get; set; }
        public virtual DbSet<summary_po_loc_monthly> summary_po_loc_monthly { get; set; }
        public virtual DbSet<summary_sales_daily> summary_sales_daily { get; set; }
        public virtual DbSet<summary_sales_monthly> summary_sales_monthly { get; set; }
        public virtual DbSet<supplier> suppliers { get; set; }
        public virtual DbSet<supplier_1348> supplier_1348 { get; set; }
        public virtual DbSet<supplier_194> supplier_194 { get; set; }
        public virtual DbSet<supplier_attribute_group> supplier_attribute_group { get; set; }
        public virtual DbSet<supplier_charges> supplier_charges { get; set; }
        public virtual DbSet<supplier_claim_detail> supplier_claim_detail { get; set; }
        public virtual DbSet<supplier_dealer_warr_dtl> supplier_dealer_warr_dtl { get; set; }
        public virtual DbSet<supplier_failure_code> supplier_failure_code { get; set; }
        public virtual DbSet<supplier_fascor_wms> supplier_fascor_wms { get; set; }
        public virtual DbSet<supplier_form_template> supplier_form_template { get; set; }
        public virtual DbSet<supplier_group_hdr> supplier_group_hdr { get; set; }
        public virtual DbSet<supplier_group_line> supplier_group_line { get; set; }
        public virtual DbSet<supplier_item_conversion> supplier_item_conversion { get; set; }
        public virtual DbSet<supplier_lead_time> supplier_lead_time { get; set; }
        public virtual DbSet<supplier_list_price> supplier_list_price { get; set; }
        public virtual DbSet<supplier_lot> supplier_lot { get; set; }
        public virtual DbSet<supplier_nickname> supplier_nickname { get; set; }
        public virtual DbSet<supplier_notepad> supplier_notepad { get; set; }
        public virtual DbSet<supplier_notification_method> supplier_notification_method { get; set; }
        public virtual DbSet<supplier_po_disc_group> supplier_po_disc_group { get; set; }
        public virtual DbSet<supplier_po_rcpt_issue_msg> supplier_po_rcpt_issue_msg { get; set; }
        public virtual DbSet<supplier_price_protection> supplier_price_protection { get; set; }
        public virtual DbSet<supplier_pricing> supplier_pricing { get; set; }
        public virtual DbSet<supplier_pricing_detail> supplier_pricing_detail { get; set; }
        public virtual DbSet<supplier_purchase_info> supplier_purchase_info { get; set; }
        public virtual DbSet<supplier_serial_template> supplier_serial_template { get; set; }
        public virtual DbSet<supplier_surcharge> supplier_surcharge { get; set; }
        public virtual DbSet<supplier_trade> supplier_trade { get; set; }
        public virtual DbSet<supplier_weekly_truck_freight> supplier_weekly_truck_freight { get; set; }
        public virtual DbSet<supplier_x_restricted_class> supplier_x_restricted_class { get; set; }
        public virtual DbSet<supplier_x_rewards_program> supplier_x_rewards_program { get; set; }
        public virtual DbSet<supplier_zip_codes> supplier_zip_codes { get; set; }
        public virtual DbSet<support_sql> support_sql { get; set; }
        public virtual DbSet<support_sql_column_detail> support_sql_column_detail { get; set; }
        public virtual DbSet<swisslog_audit_trail> swisslog_audit_trail { get; set; }
        public virtual DbSet<swisslog_confirmation> swisslog_confirmation { get; set; }
        public virtual DbSet<swisslog_inventory_deviation> swisslog_inventory_deviation { get; set; }
        public virtual DbSet<swisslog_transaction> swisslog_transaction { get; set; }
        public virtual DbSet<swisslog_transaction_deleted> swisslog_transaction_deleted { get; set; }
        public virtual DbSet<sys_params_p21> sys_params_p21 { get; set; }
        public virtual DbSet<system_alerts> system_alerts { get; set; }
        public virtual DbSet<system_parameters> system_parameters { get; set; }
        public virtual DbSet<system_setting> system_setting { get; set; }
        public virtual DbSet<tag_detail> tag_detail { get; set; }
        public virtual DbSet<tag_detail_audit> tag_detail_audit { get; set; }
        public virtual DbSet<tag_document_line> tag_document_line { get; set; }
        public virtual DbSet<tag_hdr> tag_hdr { get; set; }
        public virtual DbSet<tag_hold_class> tag_hold_class { get; set; }
        public virtual DbSet<tag_inv_tran_detail> tag_inv_tran_detail { get; set; }
        public virtual DbSet<tag_inv_tran_hdr> tag_inv_tran_hdr { get; set; }
        public virtual DbSet<tag_picking_criteria> tag_picking_criteria { get; set; }
        public virtual DbSet<task_area_x_user> task_area_x_user { get; set; }
        public virtual DbSet<task_auxiliary_assignee> task_auxiliary_assignee { get; set; }
        public virtual DbSet<task_auxiliary_contact> task_auxiliary_contact { get; set; }
        public virtual DbSet<tax_exception_list> tax_exception_list { get; set; }
        public virtual DbSet<tax_exception_list_x_inv_mast> tax_exception_list_x_inv_mast { get; set; }
        public virtual DbSet<tax_exception_list_x_ship_to> tax_exception_list_x_ship_to { get; set; }
        public virtual DbSet<tax_exempt_reason> tax_exempt_reason { get; set; }
        public virtual DbSet<tax_exemption_dtl> tax_exemption_dtl { get; set; }
        public virtual DbSet<tax_exemption_hdr> tax_exemption_hdr { get; set; }
        public virtual DbSet<tax_group_hdr> tax_group_hdr { get; set; }
        public virtual DbSet<tax_group_hdr_zip> tax_group_hdr_zip { get; set; }
        public virtual DbSet<tax_group_line> tax_group_line { get; set; }
        public virtual DbSet<tax_integration_error_log> tax_integration_error_log { get; set; }
        public virtual DbSet<tax_juris_date_range> tax_juris_date_range { get; set; }
        public virtual DbSet<tax_jurisdiction> tax_jurisdiction { get; set; }
        public virtual DbSet<tax_jurisdiction_schedule> tax_jurisdiction_schedule { get; set; }
        public virtual DbSet<tax_jurisdiction_x_tax_mx> tax_jurisdiction_x_tax_mx { get; set; }
        public virtual DbSet<tax_mx> tax_mx { get; set; }
        public virtual DbSet<tax_regime_mx> tax_regime_mx { get; set; }
        public virtual DbSet<technician_clockinout> technician_clockinout { get; set; }
        public virtual DbSet<technician_clockinout_detail> technician_clockinout_detail { get; set; }
        public virtual DbSet<technician_clockinout_pause> technician_clockinout_pause { get; set; }
        public virtual DbSet<technician_default_shift> technician_default_shift { get; set; }
        public virtual DbSet<ten99_audit_trail> ten99_audit_trail { get; set; }
        public virtual DbSet<ten99_balances> ten99_balances { get; set; }
        public virtual DbSet<term_x_language> term_x_language { get; set; }
        public virtual DbSet<term> terms { get; set; }
        public virtual DbSet<terms_user_defined_days> terms_user_defined_days { get; set; }
        public virtual DbSet<terms_x_customer> terms_x_customer { get; set; }
        public virtual DbSet<territory> territories { get; set; }
        public virtual DbSet<territory_grp> territory_grp { get; set; }
        public virtual DbSet<territory_x_customer> territory_x_customer { get; set; }
        public virtual DbSet<territory_x_ship_to> territory_x_ship_to { get; set; }
        public virtual DbSet<territory_x_territory_grp> territory_x_territory_grp { get; set; }
        public virtual DbSet<test_data> test_data { get; set; }
        public virtual DbSet<test_data_hdr> test_data_hdr { get; set; }
        public virtual DbSet<test_data_segment> test_data_segment { get; set; }
        public virtual DbSet<test_script_hdr> test_script_hdr { get; set; }
        public virtual DbSet<test_script_line> test_script_line { get; set; }
        public virtual DbSet<thirdpartybill_filetype> thirdpartybill_filetype { get; set; }
        public virtual DbSet<thirdpartybill_output_file> thirdpartybill_output_file { get; set; }
        public virtual DbSet<token> tokens { get; set; }
        public virtual DbSet<topic> topics { get; set; }
        public virtual DbSet<tos_code> tos_code { get; set; }
        public virtual DbSet<tpcx_dead_stock> tpcx_dead_stock { get; set; }
        public virtual DbSet<tpcx_disconnected_transaction> tpcx_disconnected_transaction { get; set; }
        public virtual DbSet<tpcx_inbound_document> tpcx_inbound_document { get; set; }
        public virtual DbSet<tpcx_outbound_document> tpcx_outbound_document { get; set; }
        public virtual DbSet<tpcx_trading_partner> tpcx_trading_partner { get; set; }
        public virtual DbSet<tpw_sales_history_dtl> tpw_sales_history_dtl { get; set; }
        public virtual DbSet<tpw_sales_history_hdr> tpw_sales_history_hdr { get; set; }
        public virtual DbSet<trackabout_empty_cylinder> trackabout_empty_cylinder { get; set; }
        public virtual DbSet<trackabout_fill> trackabout_fill { get; set; }
        public virtual DbSet<trackabout_log> trackabout_log { get; set; }
        public virtual DbSet<trackabout_rental_cylinder> trackabout_rental_cylinder { get; set; }
        public virtual DbSet<trackabout_rental_equipment> trackabout_rental_equipment { get; set; }
        public virtual DbSet<trackabout_rental_hdr> trackabout_rental_hdr { get; set; }
        public virtual DbSet<trackabout_rental_lease_renewal> trackabout_rental_lease_renewal { get; set; }
        public virtual DbSet<trackabout_rental_line_balance> trackabout_rental_line_balance { get; set; }
        public virtual DbSet<trackabout_rental_line_rental_class> trackabout_rental_line_rental_class { get; set; }
        public virtual DbSet<trackabout_truck> trackabout_truck { get; set; }
        public virtual DbSet<trade_layer> trade_layer { get; set; }
        public virtual DbSet<trade_layer_transaction> trade_layer_transaction { get; set; }
        public virtual DbSet<trailer> trailers { get; set; }
        public virtual DbSet<trane_r12_org> trane_r12_org { get; set; }
        public virtual DbSet<trans_set_x_xml_dataobject> trans_set_x_xml_dataobject { get; set; }
        public virtual DbSet<trans_x_gl_dimension> trans_x_gl_dimension { get; set; }
        public virtual DbSet<trans_x_gl_dimension_audit_trail> trans_x_gl_dimension_audit_trail { get; set; }
        public virtual DbSet<transaction_charge> transaction_charge { get; set; }
        public virtual DbSet<transaction_set> transaction_set { get; set; }
        public virtual DbSet<transfer_backorders> transfer_backorders { get; set; }
        public virtual DbSet<transfer_backorders_detail> transfer_backorders_detail { get; set; }
        public virtual DbSet<transfer_backorders_notepad> transfer_backorders_notepad { get; set; }
        public virtual DbSet<transfer_bin_schedule> transfer_bin_schedule { get; set; }
        public virtual DbSet<transfer_bin_schedule_exception> transfer_bin_schedule_exception { get; set; }
        public virtual DbSet<transfer_criteria> transfer_criteria { get; set; }
        public virtual DbSet<transfer_days> transfer_days { get; set; }
        public virtual DbSet<transfer_hdr> transfer_hdr { get; set; }
        public virtual DbSet<transfer_hdr_notepad> transfer_hdr_notepad { get; set; }
        public virtual DbSet<transfer_line> transfer_line { get; set; }
        public virtual DbSet<transfer_line_notepad> transfer_line_notepad { get; set; }
        public virtual DbSet<transfer_schedule_exception> transfer_schedule_exception { get; set; }
        public virtual DbSet<transfer_shipment_hdr> transfer_shipment_hdr { get; set; }
        public virtual DbSet<transfer_shipment_line> transfer_shipment_line { get; set; }
        public virtual DbSet<transfer_tracking> transfer_tracking { get; set; }
        public virtual DbSet<translation_term> translation_term { get; set; }
        public virtual DbSet<transport_shipping_info> transport_shipping_info { get; set; }
        public virtual DbSet<transportation_method> transportation_method { get; set; }
        public virtual DbSet<tripos_instance> tripos_instance { get; set; }
        public virtual DbSet<tripos_lane_mapping> tripos_lane_mapping { get; set; }
        public virtual DbSet<truck> trucks { get; set; }
        public virtual DbSet<ud_tabpage> ud_tabpage { get; set; }
        public virtual DbSet<ud_tabpage_parameter> ud_tabpage_parameter { get; set; }
        public virtual DbSet<unit> units { get; set; }
        public virtual DbSet<unit_of_measure> unit_of_measure { get; set; }
        public virtual DbSet<unit_of_measure_153> unit_of_measure_153 { get; set; }
        public virtual DbSet<unit_of_measure_mx> unit_of_measure_mx { get; set; }
        public virtual DbSet<unit_of_measure_x_integration> unit_of_measure_x_integration { get; set; }
        public virtual DbSet<unit_type_category> unit_type_category { get; set; }
        public virtual DbSet<unit_type_master_detail> unit_type_master_detail { get; set; }
        public virtual DbSet<unit_type_master_hdr> unit_type_master_hdr { get; set; }
        public virtual DbSet<unit_x_udf> unit_x_udf { get; set; }
        public virtual DbSet<uom_x_uom_mx> uom_x_uom_mx { get; set; }
        public virtual DbSet<upos_device_mapping> upos_device_mapping { get; set; }
        public virtual DbSet<ups_connectship_freight> ups_connectship_freight { get; set; }
        public virtual DbSet<user_assign_to> user_assign_to { get; set; }
        public virtual DbSet<user_authority> user_authority { get; set; }
        public virtual DbSet<user_code_hdr> user_code_hdr { get; set; }
        public virtual DbSet<user_code_line> user_code_line { get; set; }
        public virtual DbSet<user_configured_tabpage> user_configured_tabpage { get; set; }
        public virtual DbSet<user_defined_code> user_defined_code { get; set; }
        public virtual DbSet<user_defined_column> user_defined_column { get; set; }
        public virtual DbSet<user_defined_field> user_defined_field { get; set; }
        public virtual DbSet<user_preference> user_preference { get; set; }
        public virtual DbSet<user_window_pref> user_window_pref { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<users_crm> users_crm { get; set; }
        public virtual DbSet<users_direct_ship_edit> users_direct_ship_edit { get; set; }
        public virtual DbSet<users_portal> users_portal { get; set; }
        public virtual DbSet<users_regional> users_regional { get; set; }
        public virtual DbSet<users_x_application_security> users_x_application_security { get; set; }
        public virtual DbSet<users_x_branch> users_x_branch { get; set; }
        public virtual DbSet<users_x_cash_drawer> users_x_cash_drawer { get; set; }
        public virtual DbSet<users_x_company> users_x_company { get; set; }
        public virtual DbSet<users_x_location> users_x_location { get; set; }
        public virtual DbSet<users_x_oe_line_panel> users_x_oe_line_panel { get; set; }
        public virtual DbSet<users_x_salesrep> users_x_salesrep { get; set; }
        public virtual DbSet<value_list> value_list { get; set; }
        public virtual DbSet<value_list_value> value_list_value { get; set; }
        public virtual DbSet<valve_info> valve_info { get; set; }
        public virtual DbSet<valvoline_export_history> valvoline_export_history { get; set; }
        public virtual DbSet<vat_code> vat_code { get; set; }
        public virtual DbSet<vat_code_group_hdr> vat_code_group_hdr { get; set; }
        public virtual DbSet<vat_code_group_line> vat_code_group_line { get; set; }
        public virtual DbSet<vat_code_wkst_mappings> vat_code_wkst_mappings { get; set; }
        public virtual DbSet<vat_return_uk_mtd_submit> vat_return_uk_mtd_submit { get; set; }
        public virtual DbSet<vat_return_uk_mtd_submit_det> vat_return_uk_mtd_submit_det { get; set; }
        public virtual DbSet<vat_return_wkst> vat_return_wkst { get; set; }
        public virtual DbSet<vat_return_wkst_x_trans> vat_return_wkst_x_trans { get; set; }
        public virtual DbSet<vat_x_transaction> vat_x_transaction { get; set; }
        public virtual DbSet<vendor> vendors { get; set; }
        public virtual DbSet<vendor_111> vendor_111 { get; set; }
        public virtual DbSet<vendor_ach> vendor_ach { get; set; }
        public virtual DbSet<vendor_ach_contacts> vendor_ach_contacts { get; set; }
        public virtual DbSet<vendor_asb_subaccounts> vendor_asb_subaccounts { get; set; }
        public virtual DbSet<vendor_contract> vendor_contract { get; set; }
        public virtual DbSet<vendor_contract_freight_factor_exclusion> vendor_contract_freight_factor_exclusion { get; set; }
        public virtual DbSet<vendor_contract_hierarchy> vendor_contract_hierarchy { get; set; }
        public virtual DbSet<vendor_contract_type> vendor_contract_type { get; set; }
        public virtual DbSet<vendor_core_tracking> vendor_core_tracking { get; set; }
        public virtual DbSet<vendor_dealer_warranty> vendor_dealer_warranty { get; set; }
        public virtual DbSet<vendor_defaults> vendor_defaults { get; set; }
        public virtual DbSet<vendor_edi_setting> vendor_edi_setting { get; set; }
        public virtual DbSet<vendor_edi_transaction> vendor_edi_transaction { get; set; }
        public virtual DbSet<vendor_edi_transaction_detail> vendor_edi_transaction_detail { get; set; }
        public virtual DbSet<vendor_eft> vendor_eft { get; set; }
        public virtual DbSet<vendor_form_template> vendor_form_template { get; set; }
        public virtual DbSet<vendor_invoice_edi> vendor_invoice_edi { get; set; }
        public virtual DbSet<vendor_invoice_hdr> vendor_invoice_hdr { get; set; }
        public virtual DbSet<vendor_invoice_hdr_import_results> vendor_invoice_hdr_import_results { get; set; }
        public virtual DbSet<vendor_invoice_line> vendor_invoice_line { get; set; }
        public virtual DbSet<vendor_notepad> vendor_notepad { get; set; }
        public virtual DbSet<vendor_notification_method> vendor_notification_method { get; set; }
        public virtual DbSet<vendor_pass_through> vendor_pass_through { get; set; }
        public virtual DbSet<vendor_po_options> vendor_po_options { get; set; }
        public virtual DbSet<vendor_purchase_acct> vendor_purchase_acct { get; set; }
        public virtual DbSet<vendor_rebate> vendor_rebate { get; set; }
        public virtual DbSet<vendor_rfq_hdr> vendor_rfq_hdr { get; set; }
        public virtual DbSet<vendor_rfq_hdr_x_oe_hdr> vendor_rfq_hdr_x_oe_hdr { get; set; }
        public virtual DbSet<vendor_rfq_hdr_x_po_hdr> vendor_rfq_hdr_x_po_hdr { get; set; }
        public virtual DbSet<vendor_rfq_line> vendor_rfq_line { get; set; }
        public virtual DbSet<vendor_rfq_line_analysis> vendor_rfq_line_analysis { get; set; }
        public virtual DbSet<vendor_supplier> vendor_supplier { get; set; }
        public virtual DbSet<vendor_vat> vendor_vat { get; set; }
        public virtual DbSet<vendor_vmi> vendor_vmi { get; set; }
        public virtual DbSet<vendor_vmi_x_location> vendor_vmi_x_location { get; set; }
        public virtual DbSet<vendor_wit> vendor_wit { get; set; }
        public virtual DbSet<version_code> version_code { get; set; }
        public virtual DbSet<vessel_receipts_container> vessel_receipts_container { get; set; }
        public virtual DbSet<vessel_receipts_hdr> vessel_receipts_hdr { get; set; }
        public virtual DbSet<vessel_receipts_line> vessel_receipts_line { get; set; }
        public virtual DbSet<vessel_receipts_repair> vessel_receipts_repair { get; set; }
        public virtual DbSet<vics_bill_of_lading> vics_bill_of_lading { get; set; }
        public virtual DbSet<vics_bol_pallet> vics_bol_pallet { get; set; }
        public virtual DbSet<vics_bol_pallet_container> vics_bol_pallet_container { get; set; }
        public virtual DbSet<vies_rpt> vies_rpt { get; set; }
        public virtual DbSet<voucher_automation_company_settings> voucher_automation_company_settings { get; set; }
        public virtual DbSet<voucher_class> voucher_class { get; set; }
        public virtual DbSet<voucher_purchase_acct> voucher_purchase_acct { get; set; }
        public virtual DbSet<voucher_purchase_acct_edit> voucher_purchase_acct_edit { get; set; }
        public virtual DbSet<warranty> warranties { get; set; }
        public virtual DbSet<warranty_claim_detail> warranty_claim_detail { get; set; }
        public virtual DbSet<warranty_claim_hdr> warranty_claim_hdr { get; set; }
        public virtual DbSet<warranty_claim_payments> warranty_claim_payments { get; set; }
        public virtual DbSet<warranty_claim_receipts> warranty_claim_receipts { get; set; }
        public virtual DbSet<warranty_reason> warranty_reason { get; set; }
        public virtual DbSet<warranty_state_req> warranty_state_req { get; set; }
        public virtual DbSet<web_display_type> web_display_type { get; set; }
        public virtual DbSet<weboe_ship_to_unique> weboe_ship_to_unique { get; set; }
        public virtual DbSet<wee_tax_code> wee_tax_code { get; set; }
        public virtual DbSet<week> weeks { get; set; }
        public virtual DbSet<weight_uom_mx> weight_uom_mx { get; set; }
        public virtual DbSet<wf_ach_counter> wf_ach_counter { get; set; }
        public virtual DbSet<window_tab_navigation> window_tab_navigation { get; set; }
        public virtual DbSet<window_x_menu> window_x_menu { get; set; }
        public virtual DbSet<wip_worksheet_hdr> wip_worksheet_hdr { get; set; }
        public virtual DbSet<wip_worksheet_x_assembly> wip_worksheet_x_assembly { get; set; }
        public virtual DbSet<wip_worksheet_x_component> wip_worksheet_x_component { get; set; }
        public virtual DbSet<wip_worksheet_x_labor> wip_worksheet_x_labor { get; set; }
        public virtual DbSet<wireless_trans_audit_hdr> wireless_trans_audit_hdr { get; set; }
        public virtual DbSet<wireless_trans_audit_line> wireless_trans_audit_line { get; set; }
        public virtual DbSet<work_order> work_order { get; set; }
        public virtual DbSet<work_order_audit_trail> work_order_audit_trail { get; set; }
        public virtual DbSet<work_order_item> work_order_item { get; set; }
        public virtual DbSet<work_order_labor> work_order_labor { get; set; }
        public virtual DbSet<work_order_notepad> work_order_notepad { get; set; }
        public virtual DbSet<work_order_report_run> work_order_report_run { get; set; }
        public virtual DbSet<work_order_schedule> work_order_schedule { get; set; }
        public virtual DbSet<work_order_type> work_order_type { get; set; }
        public virtual DbSet<work_order_type_x_skillset> work_order_type_x_skillset { get; set; }
        public virtual DbSet<work_order_type_x_udf> work_order_type_x_udf { get; set; }
        public virtual DbSet<work_order_unit_room> work_order_unit_room { get; set; }
        public virtual DbSet<work_order_x_labor_type> work_order_x_labor_type { get; set; }
        public virtual DbSet<work_order_x_unit> work_order_x_unit { get; set; }
        public virtual DbSet<work_order_x_unit_x_unit_udf> work_order_x_unit_x_unit_udf { get; set; }
        public virtual DbSet<workbench> workbenches { get; set; }
        public virtual DbSet<workbench_allocation_dflt> workbench_allocation_dflt { get; set; }
        public virtual DbSet<workbench_query_hdr> workbench_query_hdr { get; set; }
        public virtual DbSet<workbench_query_inventory> workbench_query_inventory { get; set; }
        public virtual DbSet<workbench_query_process> workbench_query_process { get; set; }
        public virtual DbSet<workbench_query_prod> workbench_query_prod { get; set; }
        public virtual DbSet<workbench_query_pt> workbench_query_pt { get; set; }
        public virtual DbSet<workbench_query_replenishment> workbench_query_replenishment { get; set; }
        public virtual DbSet<workbench_query_transfer> workbench_query_transfer { get; set; }
        public virtual DbSet<workbench_queue> workbench_queue { get; set; }
        public virtual DbSet<workbench_user_zone> workbench_user_zone { get; set; }
        public virtual DbSet<workbench_x_users> workbench_x_users { get; set; }
        public virtual DbSet<workbench_x_users_pick> workbench_x_users_pick { get; set; }
        public virtual DbSet<wwms_in_process> wwms_in_process { get; set; }
        public virtual DbSet<wwms_label_defaults> wwms_label_defaults { get; set; }
        public virtual DbSet<wwms_loc_session_defaults> wwms_loc_session_defaults { get; set; }
        public virtual DbSet<wwms_receipt_defaults> wwms_receipt_defaults { get; set; }
        public virtual DbSet<wzd_app_p21> wzd_app_p21 { get; set; }
        public virtual DbSet<wzd_prcs_sesn_state_p21> wzd_prcs_sesn_state_p21 { get; set; }
        public virtual DbSet<wzd_prcs_status_p21> wzd_prcs_status_p21 { get; set; }
        public virtual DbSet<wzd_prcs_x_wzd_sesn_p21> wzd_prcs_x_wzd_sesn_p21 { get; set; }
        public virtual DbSet<wzd_process_ext_p21> wzd_process_ext_p21 { get; set; }
        public virtual DbSet<wzd_process_p21> wzd_process_p21 { get; set; }
        public virtual DbSet<wzd_session_p21> wzd_session_p21 { get; set; }
        public virtual DbSet<wzd_type_p21> wzd_type_p21 { get; set; }
        public virtual DbSet<xm_api_inbound_log> xm_api_inbound_log { get; set; }
        public virtual DbSet<xm_api_outbound_log> xm_api_outbound_log { get; set; }
        public virtual DbSet<xml_dataobject> xml_dataobject { get; set; }
        public virtual DbSet<xml_dataobject_column> xml_dataobject_column { get; set; }
        public virtual DbSet<xml_dataobject_x_config> xml_dataobject_x_config { get; set; }
        public virtual DbSet<xml_document> xml_document { get; set; }
        public virtual DbSet<xml_document_element> xml_document_element { get; set; }
        public virtual DbSet<xml_stylesheet> xml_stylesheet { get; set; }
        public virtual DbSet<year_control> year_control { get; set; }
        public virtual DbSet<z_lookup> z_lookup { get; set; }
        public virtual DbSet<zip_code> zip_code { get; set; }
        public virtual DbSet<zip_code_coordinates> zip_code_coordinates { get; set; }
        public virtual DbSet<zip_code_local> zip_code_local { get; set; }
        public virtual DbSet<zip_code_mx> zip_code_mx { get; set; }
        public virtual DbSet<address_CAD_initiator_audit> address_CAD_initiator_audit { get; set; }
        public virtual DbSet<address_CAD_target_audit> address_CAD_target_audit { get; set; }
        public virtual DbSet<address_CUCO_initiator_audit> address_CUCO_initiator_audit { get; set; }
        public virtual DbSet<address_CUCO_target_audit> address_CUCO_target_audit { get; set; }
        public virtual DbSet<address_CUS_initiator_audit> address_CUS_initiator_audit { get; set; }
        public virtual DbSet<address_CUS_target_audit> address_CUS_target_audit { get; set; }
        public virtual DbSet<ADPIM_Prod> ADPIM_Prod { get; set; }
        public virtual DbSet<ADPIM_Web> ADPIM_Web { get; set; }
        public virtual DbSet<ADPIM_Webimage> ADPIM_Webimage { get; set; }
        public virtual DbSet<apinv_hdr_edit_audit_trail> apinv_hdr_edit_audit_trail { get; set; }
        public virtual DbSet<apinv_hdr_not_delete> apinv_hdr_not_delete { get; set; }
        public virtual DbSet<apinv_line_audit_trail> apinv_line_audit_trail { get; set; }
        public virtual DbSet<apinv_line_edit_audit_trail> apinv_line_edit_audit_trail { get; set; }
        public virtual DbSet<assembly_hdr_STK_initiator_audit> assembly_hdr_STK_initiator_audit { get; set; }
        public virtual DbSet<assembly_hdr_STK_target_audit> assembly_hdr_STK_target_audit { get; set; }
        public virtual DbSet<assembly_line_STK_initiator_audit> assembly_line_STK_initiator_audit { get; set; }
        public virtual DbSet<assembly_line_STK_target_audit> assembly_line_STK_target_audit { get; set; }
        public virtual DbSet<auto_test_saved_vars_dtl> auto_test_saved_vars_dtl { get; set; }
        public virtual DbSet<auto_test_saved_vars_hdr> auto_test_saved_vars_hdr { get; set; }
        public virtual DbSet<b2b_custom_table_statements> b2b_custom_table_statements { get; set; }
        public virtual DbSet<b2b_temp_country> b2b_temp_country { get; set; }
        public virtual DbSet<b2b_temp_customer_x_rewards_program> b2b_temp_customer_x_rewards_program { get; set; }
        public virtual DbSet<b2b_temp_delivery_stop> b2b_temp_delivery_stop { get; set; }
        public virtual DbSet<b2b_temp_inventory_cross_reference> b2b_temp_inventory_cross_reference { get; set; }
        public virtual DbSet<b2b_temp_invoice_line_rewards> b2b_temp_invoice_line_rewards { get; set; }
        public virtual DbSet<b2b_temp_item_price_contract> b2b_temp_item_price_contract { get; set; }
        public virtual DbSet<b2b_temp_product_group> b2b_temp_product_group { get; set; }
        public virtual DbSet<b2b_temp_rewards_program> b2b_temp_rewards_program { get; set; }
        public virtual DbSet<b2b_temp_rewards_program_entry_form> b2b_temp_rewards_program_entry_form { get; set; }
        public virtual DbSet<b2b_temp_rewards_program_entry_goal> b2b_temp_rewards_program_entry_goal { get; set; }
        public virtual DbSet<b2b_temp_sale_statistics> b2b_temp_sale_statistics { get; set; }
        public virtual DbSet<b2b_temp_salesrep> b2b_temp_salesrep { get; set; }
        public virtual DbSet<b2b_temp_state> b2b_temp_state { get; set; }
        public virtual DbSet<b2b_web_reference_info> b2b_web_reference_info { get; set; }
        public virtual DbSet<bank_accounts_reconciliation_audit_trail> bank_accounts_reconciliation_audit_trail { get; set; }
        public virtual DbSet<buy_list_line_backup> buy_list_line_backup { get; set; }
        public virtual DbSet<buying_trend_normality> buying_trend_normality { get; set; }
        public virtual DbSet<CAD_target_audit> CAD_target_audit { get; set; }
        public virtual DbSet<cancel_pick_ticket_bin> cancel_pick_ticket_bin { get; set; }
        public virtual DbSet<cancel_pick_ticket_item> cancel_pick_ticket_item { get; set; }
        public virtual DbSet<cancel_pick_ticket_lot> cancel_pick_ticket_lot { get; set; }
        public virtual DbSet<cancel_pick_ticket_serial> cancel_pick_ticket_serial { get; set; }
        public virtual DbSet<cash_transfer_audit_trail> cash_transfer_audit_trail { get; set; }
        public virtual DbSet<class_expansion> class_expansion { get; set; }
        public virtual DbSet<class_expansion_view> class_expansion_view { get; set; }
        public virtual DbSet<class_expansion_view_error> class_expansion_view_error { get; set; }
        public virtual DbSet<class_STK_initiator_audit> class_STK_initiator_audit { get; set; }
        public virtual DbSet<class_STK_target_audit> class_STK_target_audit { get; set; }
        public virtual DbSet<contacts_CUCO_initiator_audit> contacts_CUCO_initiator_audit { get; set; }
        public virtual DbSet<contacts_CUCO_target_audit> contacts_CUCO_target_audit { get; set; }
        public virtual DbSet<contacts_x_ship_to_CUCO_initiator_audit> contacts_x_ship_to_CUCO_initiator_audit { get; set; }
        public virtual DbSet<contacts_x_ship_to_CUCO_target_audit> contacts_x_ship_to_CUCO_target_audit { get; set; }
        public virtual DbSet<cpa_scorecard_customer_detail_working> cpa_scorecard_customer_detail_working { get; set; }
        public virtual DbSet<CUCO_target_audit> CUCO_target_audit { get; set; }
        public virtual DbSet<CUS_target_audit> CUS_target_audit { get; set; }
        public virtual DbSet<custom_objects_backup> custom_objects_backup { get; set; }
        public virtual DbSet<customer_335> customer_335 { get; set; }
        public virtual DbSet<customer_45> customer_45 { get; set; }
        public virtual DbSet<customer_CAD_initiator_audit> customer_CAD_initiator_audit { get; set; }
        public virtual DbSet<customer_CAD_target_audit> customer_CAD_target_audit { get; set; }
        public virtual DbSet<customer_CUCO_initiator_audit> customer_CUCO_initiator_audit { get; set; }
        public virtual DbSet<customer_CUCO_target_audit> customer_CUCO_target_audit { get; set; }
        public virtual DbSet<customer_CUS_initiator_audit> customer_CUS_initiator_audit { get; set; }
        public virtual DbSet<customer_CUS_target_audit> customer_CUS_target_audit { get; set; }
        public virtual DbSet<customer_integration_response_audit> customer_integration_response_audit { get; set; }
        public virtual DbSet<customer_integration_trigger_audit> customer_integration_trigger_audit { get; set; }
        public virtual DbSet<customer_list_temp> customer_list_temp { get; set; }
        public virtual DbSet<dc_migration_working> dc_migration_working { get; set; }
        public virtual DbSet<drill_security> drill_security { get; set; }
        public virtual DbSet<drill_security_additional_menus> drill_security_additional_menus { get; set; }
        public virtual DbSet<ecc_get_table_schema_table> ecc_get_table_schema_table { get; set; }
        public virtual DbSet<ecc_run_date> ecc_run_date { get; set; }
        public virtual DbSet<ecc_sync_area_settings> ecc_sync_area_settings { get; set; }
        public virtual DbSet<edi_852_log> edi_852_log { get; set; }
        public virtual DbSet<email_notification_token> email_notification_token { get; set; }
        public virtual DbSet<fault_tolerance_production_orders> fault_tolerance_production_orders { get; set; }
        public virtual DbSet<fault_tolerance_purchase_orders> fault_tolerance_purchase_orders { get; set; }
        public virtual DbSet<fault_tolerance_sales_orders> fault_tolerance_sales_orders { get; set; }
        public virtual DbSet<fault_tolerance_transfers> fault_tolerance_transfers { get; set; }
        public virtual DbSet<fbff_criteria> fbff_criteria { get; set; }
        public virtual DbSet<fbff_forecasts> fbff_forecasts { get; set; }
        public virtual DbSet<fbff_forecasts_per_item_location_formula> fbff_forecasts_per_item_location_formula { get; set; }
        public virtual DbSet<fbff_sum_error_per_item_location_formula> fbff_sum_error_per_item_location_formula { get; set; }
        public virtual DbSet<fbff_to_update> fbff_to_update { get; set; }
        public virtual DbSet<fc_table_join> fc_table_join { get; set; }
        public virtual DbSet<fifo_layers_STK_initiator_audit> fifo_layers_STK_initiator_audit { get; set; }
        public virtual DbSet<fifo_layers_STK_target_audit> fifo_layers_STK_target_audit { get; set; }
        public virtual DbSet<final_dc_dupes> final_dc_dupes { get; set; }
        public virtual DbSet<for_unit_of_measure> for_unit_of_measure { get; set; }
        public virtual DbSet<fuel_pricing> fuel_pricing { get; set; }
        public virtual DbSet<gpor_dynamic_look_ahead> gpor_dynamic_look_ahead { get; set; }
        public virtual DbSet<gpor_run_drp_forecasts> gpor_run_drp_forecasts { get; set; }
        public virtual DbSet<grow_data_source> grow_data_source { get; set; }
        public virtual DbSet<integration_trigger_audit> integration_trigger_audit { get; set; }
        public virtual DbSet<inv_accessory_ALT_initiator_audit> inv_accessory_ALT_initiator_audit { get; set; }
        public virtual DbSet<inv_accessory_ALT_target_audit> inv_accessory_ALT_target_audit { get; set; }
        public virtual DbSet<inv_adj_hdr_audit_trail> inv_adj_hdr_audit_trail { get; set; }
        public virtual DbSet<inv_adj_line_audit_trail> inv_adj_line_audit_trail { get; set; }
        public virtual DbSet<inv_bin_audit> inv_bin_audit { get; set; }
        public virtual DbSet<inv_bin_deletion_inv_bin_hdr> inv_bin_deletion_inv_bin_hdr { get; set; }
        public virtual DbSet<inv_bin_hdr_not_delete> inv_bin_hdr_not_delete { get; set; }
        public virtual DbSet<inv_bin_STK_initiator_audit> inv_bin_STK_initiator_audit { get; set; }
        public virtual DbSet<inv_bin_STK_target_audit> inv_bin_STK_target_audit { get; set; }
        public virtual DbSet<inv_cost_edit_audit_trail> inv_cost_edit_audit_trail { get; set; }
        public virtual DbSet<inv_loc_gtor_ns> inv_loc_gtor_ns { get; set; }
        public virtual DbSet<inv_loc_STK_initiator_audit> inv_loc_STK_initiator_audit { get; set; }
        public virtual DbSet<inv_loc_STK_target_audit> inv_loc_STK_target_audit { get; set; }
        public virtual DbSet<inv_mast_335> inv_mast_335 { get; set; }
        public virtual DbSet<inv_mast_integration_response_audit> inv_mast_integration_response_audit { get; set; }
        public virtual DbSet<inv_mast_integration_trigger_audit> inv_mast_integration_trigger_audit { get; set; }
        public virtual DbSet<inv_mast_language_STT_initiator_audit> inv_mast_language_STT_initiator_audit { get; set; }
        public virtual DbSet<inv_mast_language_STT_target_audit> inv_mast_language_STT_target_audit { get; set; }
        public virtual DbSet<inv_mast_links_STK_initiator_audit> inv_mast_links_STK_initiator_audit { get; set; }
        public virtual DbSet<inv_mast_links_STK_target_audit> inv_mast_links_STK_target_audit { get; set; }
        public virtual DbSet<inv_mast_links_STT_initiator_audit> inv_mast_links_STT_initiator_audit { get; set; }
        public virtual DbSet<inv_mast_links_STT_target_audit> inv_mast_links_STT_target_audit { get; set; }
        public virtual DbSet<inv_mast_SGP_target_audit> inv_mast_SGP_target_audit { get; set; }
        public virtual DbSet<inv_mast_STK_initiator_audit> inv_mast_STK_initiator_audit { get; set; }
        public virtual DbSet<inv_mast_STK_target_audit> inv_mast_STK_target_audit { get; set; }
        public virtual DbSet<inv_mast_x_company_STK_initiator_audit> inv_mast_x_company_STK_initiator_audit { get; set; }
        public virtual DbSet<inv_mast_x_company_STK_target_audit> inv_mast_x_company_STK_target_audit { get; set; }
        public virtual DbSet<inv_sub_ALT_initiator_audit> inv_sub_ALT_initiator_audit { get; set; }
        public virtual DbSet<inv_sub_ALT_target_audit> inv_sub_ALT_target_audit { get; set; }
        public virtual DbSet<inventory_issues_date_summary> inventory_issues_date_summary { get; set; }
        public virtual DbSet<inventory_issues_document_summary> inventory_issues_document_summary { get; set; }
        public virtual DbSet<inventory_issues_item_loc> inventory_issues_item_loc { get; set; }
        public virtual DbSet<inventory_supplier_STK_initiator_audit> inventory_supplier_STK_initiator_audit { get; set; }
        public virtual DbSet<inventory_supplier_STK_target_audit> inventory_supplier_STK_target_audit { get; set; }
        public virtual DbSet<inventory_supplier_x_loc_STK_initiator_audit> inventory_supplier_x_loc_STK_initiator_audit { get; set; }
        public virtual DbSet<inventory_supplier_x_loc_STK_target_audit> inventory_supplier_x_loc_STK_target_audit { get; set; }
        public virtual DbSet<inventory_value_items> inventory_value_items { get; set; }
        public virtual DbSet<inventory_value_location> inventory_value_location { get; set; }
        public virtual DbSet<inventory_value_review_branch> inventory_value_review_branch { get; set; }
        public virtual DbSet<inventory_value_review_company> inventory_value_review_company { get; set; }
        public virtual DbSet<InventoryIssuesRunItemLocation> InventoryIssuesRunItemLocations { get; set; }
        public virtual DbSet<inventoryissuestest_x_rebuild> inventoryissuestest_x_rebuild { get; set; }
        public virtual DbSet<InventoryIssuesTestDesc> InventoryIssuesTestDescs { get; set; }
        public virtual DbSet<InventoryIssuesTestRunDetail> InventoryIssuesTestRunDetails { get; set; }
        public virtual DbSet<InventoryIssuesTest> InventoryIssuesTests { get; set; }
        public virtual DbSet<invoice_deletion_invoice_hdr> invoice_deletion_invoice_hdr { get; set; }
        public virtual DbSet<invoice_deletion_oe_hdr> invoice_deletion_oe_hdr { get; set; }
        public virtual DbSet<invoice_hdr_audit_trail> invoice_hdr_audit_trail { get; set; }
        public virtual DbSet<invoice_hdr_CUS_initiator_audit> invoice_hdr_CUS_initiator_audit { get; set; }
        public virtual DbSet<invoice_hdr_CUS_target_audit> invoice_hdr_CUS_target_audit { get; set; }
        public virtual DbSet<invoice_hdr_edit_audit_trail> invoice_hdr_edit_audit_trail { get; set; }
        public virtual DbSet<invoice_hdr_not_delete> invoice_hdr_not_delete { get; set; }
        public virtual DbSet<invoice_hdr_salesrep_audit_trail> invoice_hdr_salesrep_audit_trail { get; set; }
        public virtual DbSet<invoice_hdr_salesrep_edit_audit_trail> invoice_hdr_salesrep_edit_audit_trail { get; set; }
        public virtual DbSet<invoice_hdr_tax_juris_edit_audit_trail> invoice_hdr_tax_juris_edit_audit_trail { get; set; }
        public virtual DbSet<invoice_hdr_x_tax_juris_manual_audit_trail> invoice_hdr_x_tax_juris_manual_audit_trail { get; set; }
        public virtual DbSet<invoice_line_audit_trail> invoice_line_audit_trail { get; set; }
        public virtual DbSet<invoice_line_edit_audit_trail> invoice_line_edit_audit_trail { get; set; }
        public virtual DbSet<invoice_line_taxes_audit_trail> invoice_line_taxes_audit_trail { get; set; }
        public virtual DbSet<item_category_hierarchy_delete_audit> item_category_hierarchy_delete_audit { get; set; }
        public virtual DbSet<item_quantity_integration_response_audit> item_quantity_integration_response_audit { get; set; }
        public virtual DbSet<item_quantity_integration_trigger_audit> item_quantity_integration_trigger_audit { get; set; }
        public virtual DbSet<item_rebuild_inventory_value_delta> item_rebuild_inventory_value_delta { get; set; }
        public virtual DbSet<item_rebuild_inventory_value_hdr> item_rebuild_inventory_value_hdr { get; set; }
        public virtual DbSet<item_uom_STK_initiator_audit> item_uom_STK_initiator_audit { get; set; }
        public virtual DbSet<Items_To_Delete> Items_To_Delete { get; set; }
        public virtual DbSet<location_integration_response_audit> location_integration_response_audit { get; set; }
        public virtual DbSet<location_integration_trigger_audit> location_integration_trigger_audit { get; set; }
        public virtual DbSet<location_supplier_STK_initiator_audit> location_supplier_STK_initiator_audit { get; set; }
        public virtual DbSet<location_supplier_STK_target_audit> location_supplier_STK_target_audit { get; set; }
        public virtual DbSet<lot_bin_xref_audit> lot_bin_xref_audit { get; set; }
        public virtual DbSet<lot_rebuild_inventory_value_delta> lot_rebuild_inventory_value_delta { get; set; }
        public virtual DbSet<metrics_customer_detail_working> metrics_customer_detail_working { get; set; }
        public virtual DbSet<metrics_db_upgrade_history> metrics_db_upgrade_history { get; set; }
        public virtual DbSet<nsp_smtp_mail_error_log> nsp_smtp_mail_error_log { get; set; }
        public virtual DbSet<oe_contacts_customer_CUCO_initiator_audit> oe_contacts_customer_CUCO_initiator_audit { get; set; }
        public virtual DbSet<oe_contacts_customer_CUCO_target_audit> oe_contacts_customer_CUCO_target_audit { get; set; }
        public virtual DbSet<oe_deletion_oe_hdr> oe_deletion_oe_hdr { get; set; }
        public virtual DbSet<oe_hdr_integration_response_audit> oe_hdr_integration_response_audit { get; set; }
        public virtual DbSet<oe_hdr_integration_trigger_audit> oe_hdr_integration_trigger_audit { get; set; }
        public virtual DbSet<oe_hdr_not_delete> oe_hdr_not_delete { get; set; }
        public virtual DbSet<oe_line_integration_response_audit> oe_line_integration_response_audit { get; set; }
        public virtual DbSet<oe_line_integration_trigger_audit> oe_line_integration_trigger_audit { get; set; }
        public virtual DbSet<oe_line_service_integration_response_audit> oe_line_service_integration_response_audit { get; set; }
        public virtual DbSet<oe_line_service_integration_trigger_audit> oe_line_service_integration_trigger_audit { get; set; }
        public virtual DbSet<oe_line_service_labor_delete> oe_line_service_labor_delete { get; set; }
        public virtual DbSet<oe_line_service_labor_time_delete> oe_line_service_labor_time_delete { get; set; }
        public virtual DbSet<oe_line_service_labor_time_integration_response_audit> oe_line_service_labor_time_integration_response_audit { get; set; }
        public virtual DbSet<oe_line_service_labor_time_integration_trigger_audit> oe_line_service_labor_time_integration_trigger_audit { get; set; }
        public virtual DbSet<p21_database_changes> p21_database_changes { get; set; }
        public virtual DbSet<p21_dblevel> p21_dblevel { get; set; }
        public virtual DbSet<p21_deletion_other_columns> p21_deletion_other_columns { get; set; }
        public virtual DbSet<p21_deletion_sql> p21_deletion_sql { get; set; }
        public virtual DbSet<p21_price_engine_run_audit_deleted_price_pages> p21_price_engine_run_audit_deleted_price_pages { get; set; }
        public virtual DbSet<p21_rebuild_inv_tran_insert> p21_rebuild_inv_tran_insert { get; set; }
        public virtual DbSet<p21_sales_pricing_debug> p21_sales_pricing_debug { get; set; }
        public virtual DbSet<p21_unallocate_orders_bin_info> p21_unallocate_orders_bin_info { get; set; }
        public virtual DbSet<p21_unallocate_orders_lot_bin_info> p21_unallocate_orders_lot_bin_info { get; set; }
        public virtual DbSet<p21_unallocate_orders_lot_info> p21_unallocate_orders_lot_info { get; set; }
        public virtual DbSet<p21_unallocate_orders_order_line_info> p21_unallocate_orders_order_line_info { get; set; }
        public virtual DbSet<p21_unallocate_orders_order_line_schedule_info> p21_unallocate_orders_order_line_schedule_info { get; set; }
        public virtual DbSet<payments_audit_trail> payments_audit_trail { get; set; }
        public virtual DbSet<po_deletion_po_hdr> po_deletion_po_hdr { get; set; }
        public virtual DbSet<po_hdr_not_delete> po_hdr_not_delete { get; set; }
        public virtual DbSet<price_cache> price_cache { get; set; }
        public virtual DbSet<price_method> price_method { get; set; }
        public virtual DbSet<price_method_x_customer> price_method_x_customer { get; set; }
        public virtual DbSet<price_method_x_item> price_method_x_item { get; set; }
        public virtual DbSet<price_page_audit_trail> price_page_audit_trail { get; set; }
        public virtual DbSet<price_page_location_audit_trail> price_page_location_audit_trail { get; set; }
        public virtual DbSet<price_page_po_cost_calc_audit_trail> price_page_po_cost_calc_audit_trail { get; set; }
        public virtual DbSet<price_page_secondary_rebate_audit_trail> price_page_secondary_rebate_audit_trail { get; set; }
        public virtual DbSet<price_page_x_book_audit_trail> price_page_x_book_audit_trail { get; set; }
        public virtual DbSet<restricted_item_criteria_dts> restricted_item_criteria_dts { get; set; }
        public virtual DbSet<sales_price_results> sales_price_results { get; set; }
        public virtual DbSet<sales_pricing_option> sales_pricing_option { get; set; }
        public virtual DbSet<serial_number_integration_response_audit> serial_number_integration_response_audit { get; set; }
        public virtual DbSet<serial_number_integration_trigger_audit> serial_number_integration_trigger_audit { get; set; }
        public virtual DbSet<service_inv_mast_integration_response_audit> service_inv_mast_integration_response_audit { get; set; }
        public virtual DbSet<service_inv_mast_integration_trigger_audit> service_inv_mast_integration_trigger_audit { get; set; }
        public virtual DbSet<service_labor_integration_response_audit> service_labor_integration_response_audit { get; set; }
        public virtual DbSet<service_labor_integration_trigger_audit> service_labor_integration_trigger_audit { get; set; }
        public virtual DbSet<service_technician_integration_response_audit> service_technician_integration_response_audit { get; set; }
        public virtual DbSet<service_technician_integration_trigger_audit> service_technician_integration_trigger_audit { get; set; }
        public virtual DbSet<ship_to_CAD_initiator_audit> ship_to_CAD_initiator_audit { get; set; }
        public virtual DbSet<ship_to_CAD_target_audit> ship_to_CAD_target_audit { get; set; }
        public virtual DbSet<ship_to_CUCO_initiator_audit> ship_to_CUCO_initiator_audit { get; set; }
        public virtual DbSet<ship_to_CUCO_target_audit> ship_to_CUCO_target_audit { get; set; }
        public virtual DbSet<ship_to_CUS_initiator_audit> ship_to_CUS_initiator_audit { get; set; }
        public virtual DbSet<ship_to_CUS_target_audit> ship_to_CUS_target_audit { get; set; }
        public virtual DbSet<ship_to_integration_response_audit> ship_to_integration_response_audit { get; set; }
        public virtual DbSet<ship_to_integration_trigger_audit> ship_to_integration_trigger_audit { get; set; }
        public virtual DbSet<ssis_shopping_list_contract> ssis_shopping_list_contract { get; set; }
        public virtual DbSet<ssis_temp_restricted_item_quantity_limits> ssis_temp_restricted_item_quantity_limits { get; set; }
        public virtual DbSet<ssis_temp_restricted_items> ssis_temp_restricted_items { get; set; }
        public virtual DbSet<stage_po_description_temp> stage_po_description_temp { get; set; }
        public virtual DbSet<STK_target_audit> STK_target_audit { get; set; }
        public virtual DbSet<supplier_STK_initiator_audit> supplier_STK_initiator_audit { get; set; }
        public virtual DbSet<supplier_STK_target_audit> supplier_STK_target_audit { get; set; }
        public virtual DbSet<tag_created_from_rebuild_info> tag_created_from_rebuild_info { get; set; }
        public virtual DbSet<unit_of_measure_integration_response_audit> unit_of_measure_integration_response_audit { get; set; }
        public virtual DbSet<unit_of_measure_integration_trigger_audit> unit_of_measure_integration_trigger_audit { get; set; }
        public virtual DbSet<unit_of_measure_STK_initiator_audit> unit_of_measure_STK_initiator_audit { get; set; }
        public virtual DbSet<unit_of_measure_STK_target_audit> unit_of_measure_STK_target_audit { get; set; }
        public virtual DbSet<vendor_iva_tax> vendor_iva_tax { get; set; }
        public virtual DbSet<voucher_deletion_apinv_hdr> voucher_deletion_apinv_hdr { get; set; }
        public virtual DbSet<voucher_deletion_payments> voucher_deletion_payments { get; set; }
        public virtual DbSet<voucher_purchase_acct_edit_audit_trail> voucher_purchase_acct_edit_audit_trail { get; set; }
        public virtual DbSet<weboe_ar_transaction_data> weboe_ar_transaction_data { get; set; }
        public virtual DbSet<weboe_audit_trail_detail> weboe_audit_trail_detail { get; set; }
        public virtual DbSet<weboe_audit_trail_detail_history> weboe_audit_trail_detail_history { get; set; }
        public virtual DbSet<weboe_audit_trail_hdr> weboe_audit_trail_hdr { get; set; }
        public virtual DbSet<weboe_audit_trail_hdr_history> weboe_audit_trail_hdr_history { get; set; }
        public virtual DbSet<weboe_bcbi_data> weboe_bcbi_data { get; set; }
        public virtual DbSet<weboe_code> weboe_code { get; set; }
        public virtual DbSet<weboe_cost_changes_data> weboe_cost_changes_data { get; set; }
        public virtual DbSet<weboe_customer_contact_data> weboe_customer_contact_data { get; set; }
        public virtual DbSet<weboe_customer_data> weboe_customer_data { get; set; }
        public virtual DbSet<weboe_customer_statistics_data> weboe_customer_statistics_data { get; set; }
        public virtual DbSet<weboe_file> weboe_file { get; set; }
        public virtual DbSet<weboe_invoice_history_data> weboe_invoice_history_data { get; set; }
        public virtual DbSet<weboe_item_category_data> weboe_item_category_data { get; set; }
        public virtual DbSet<weboe_item_category_group_data> weboe_item_category_group_data { get; set; }
        public virtual DbSet<weboe_item_data> weboe_item_data { get; set; }
        public virtual DbSet<weboe_item_location_data> weboe_item_location_data { get; set; }
        public virtual DbSet<weboe_item_pricebreaks_data> weboe_item_pricebreaks_data { get; set; }
        public virtual DbSet<weboe_items_on_backorder_data> weboe_items_on_backorder_data { get; set; }
        public virtual DbSet<weboe_new_order_header_data> weboe_new_order_header_data { get; set; }
        public virtual DbSet<weboe_new_order_line_data> weboe_new_order_line_data { get; set; }
        public virtual DbSet<weboe_open_account_balance_data> weboe_open_account_balance_data { get; set; }
        public virtual DbSet<weboe_order_header_change_data> weboe_order_header_change_data { get; set; }
        public virtual DbSet<weboe_order_line_change_data> weboe_order_line_change_data { get; set; }
        public virtual DbSet<weboe_orders_on_credit_hold_data> weboe_orders_on_credit_hold_data { get; set; }
        public virtual DbSet<weboe_ship_to_data> weboe_ship_to_data { get; set; }
        public virtual DbSet<weboe_stock_outs_data> weboe_stock_outs_data { get; set; }
        public virtual DbSet<weboe_variable_data> weboe_variable_data { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<accnt_group_mx>()
                .Property(e => e.accnt_group_mx_id)
                .IsUnicode(false);

            modelBuilder.Entity<accnt_group_mx>()
                .Property(e => e.group_description)
                .IsUnicode(false);

            modelBuilder.Entity<accnt_group_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<accnt_group_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<accnt_group_mx2>()
                .Property(e => e.accnt_group_mx2_id)
                .IsUnicode(false);

            modelBuilder.Entity<accnt_group_mx2>()
                .Property(e => e.group_description)
                .IsUnicode(false);

            modelBuilder.Entity<accnt_group_mx2>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<accnt_group_mx2>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<accnts_x_accnt_group>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<accnts_x_accnt_group>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<accnts_x_accnt_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<accnts_x_accnt_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<account_group_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<account_group_hdr>()
                .Property(e => e.account_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<account_group_hdr>()
                .Property(e => e.account_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<account_group_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<account_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<account_group_hdr>()
                .HasMany(e => e.account_group_line)
                .WithRequired(e => e.account_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<account_group_hdr>()
                .HasMany(e => e.restate_accounts_hdr)
                .WithRequired(e => e.account_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<account_group_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<account_group_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<account_x_currency>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<account_x_currency>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<account_x_currency>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<account_x_currency>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<account_x_currency>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.immediate_destination)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.immediate_origin)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.immediate_destination_name)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.immediate_origin_name)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.service_class_code_hdr)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.company_name)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.company_identification)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.entry_description)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.originating_dfi_no_hdr)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.company_name_detail)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.originating_dfi_no_control)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.service_class_cd_control)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.effective_entry_date_source)
                .IsUnicode(false);

            modelBuilder.Entity<ach_override>()
                .Property(e => e.company_discretionary_data)
                .IsUnicode(false);

            modelBuilder.Entity<ach_transmission_file>()
                .Property(e => e.ach_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<ach_transmission_file>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ach_transmission_file>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<activant_layout_def>()
                .Property(e => e.column_id)
                .IsUnicode(false);

            modelBuilder.Entity<activant_layout_def>()
                .Property(e => e.display_column_id)
                .IsUnicode(false);

            modelBuilder.Entity<activant_layout_def>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<activant_layout_def>()
                .Property(e => e.item_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<activant_layout_def>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<activant_layout_def>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<activity>()
                .Property(e => e.activity_id)
                .IsUnicode(false);

            modelBuilder.Entity<activity>()
                .Property(e => e.activity_desc)
                .IsUnicode(false);

            modelBuilder.Entity<activity>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<activity>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<activity>()
                .Property(e => e.hard_touch_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<activity>()
                .HasMany(e => e.activity_trans)
                .WithRequired(e => e.activity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<activity>()
                .HasMany(e => e.alert_task)
                .WithRequired(e => e.activity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<activity>()
                .HasMany(e => e.category_x_activity)
                .WithRequired(e => e.activity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<activity_reminder>()
                .Property(e => e.activity_trans_no)
                .IsUnicode(false);

            modelBuilder.Entity<activity_reminder>()
                .Property(e => e.assigned_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<activity_reminder>()
                .Property(e => e.displaying)
                .IsUnicode(false);

            modelBuilder.Entity<activity_reminder>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<activity_reminder>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.activity_trans_no)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.activity_id)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.assigned_by_id)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.assigned_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.completed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.completed_by_id)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.reminder)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.private_task)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.followup)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.subject)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.link_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.hard_touch_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.create_outlook_task_flag)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .Property(e => e.outlook_task_uid)
                .IsUnicode(false);

            modelBuilder.Entity<activity_trans>()
                .HasMany(e => e.activity_reminder)
                .WithRequired(e => e.activity_trans)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<activity_trans>()
                .HasMany(e => e.task_auxiliary_assignee)
                .WithRequired(e => e.activity_trans)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<activity_trans>()
                .HasMany(e => e.task_auxiliary_contact)
                .WithRequired(e => e.activity_trans)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ad_role_x_users>()
                .Property(e => e.ad_role)
                .IsUnicode(false);

            modelBuilder.Entity<ad_role_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<ad_role_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ad_role_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.federal_id_number)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.resale_certificate)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.ups_code)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.corp_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address>()
                .Property(e => e.billing_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address>()
                .Property(e => e.credit_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address>()
                .Property(e => e.customer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.vendor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.employee)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.prospect)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.billing_address)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.shipping_address)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.payment_address)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.incorporated)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address>()
                .Property(e => e.carrier_id)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.delivery_instructions1)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.delivery_instructions2)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.delivery_instructions3)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.inventory_location_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.show_out_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.store_no)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.invoice_type)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.address_id_string)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.carrier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.default_carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address>()
                .Property(e => e.trade_percent_disc)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address>()
                .Property(e => e.class1_id)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.class2_id)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.class3_id)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.class4_id)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.class5_id)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.central_watts_number)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.alternative_1099_name)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.name_control)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.default_ship_to_company)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.default_ship_to_branch)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.ship_to_packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.bill_of_lading_type)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.url)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.carrier_fedex_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.routeview_require_routing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.carrier_do_not_route_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.roadnet_do_not_route_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.carrier_strategic_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.carrier_fixed_freight_charge)
                .HasPrecision(19, 2);

            modelBuilder.Entity<address>()
                .Property(e => e.carrier_freight_est_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<address>()
                .Property(e => e.dc_do_not_route_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.roadnet_pt_print_option)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.sfdc_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.carrier_fixed_freight_markup)
                .HasPrecision(19, 9);

            modelBuilder.Entity<address>()
                .Property(e => e.phys_county)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.scac_code)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.carrier_pallet_freight_charge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<address>()
                .Property(e => e.fidelitone_carrier_id)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.mail_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.freight_surcharge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.freight_surcharge_pkg_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<address>()
                .Property(e => e.freight_surcharge_per_pkg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<address>()
                .Property(e => e.express_carrier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.latitude)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.longitude)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.ltl_freight_calc_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<address>()
                .Property(e => e.parcel_carrier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.dq_do_not_route_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.dq_print_pt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.transportation_type_code)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.display_in_oe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.neighborhood_code)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.city_code)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .Property(e => e.locality_code)
                .IsUnicode(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.address_dea)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.address_freight_display)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.address_x_dea_license)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.call_log)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.customer_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasOptional(e => e.carrier_194)
                .WithRequired(e => e.address);

            modelBuilder.Entity<address>()
                .HasMany(e => e.carrier_2164)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.carrier_bill_of_lading)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.carrier_cube_factor)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.carrier_cube_modifier)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.ship_to_3rd_party_carriers_194)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.carrier_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.carrier_pick_location)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.carrier_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.carrier_ship_via)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.carrier_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.carrier_size_category_cube_factor)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.carrier_size_category_cube_modifier)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.carrier_x_freight_code)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.carrier_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.company_agent)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.address_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.contact_insurance)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.claims_address_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.contacts)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.corp_id)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.cust_defaults)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.carrier_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.customers)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.customer_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.divisions)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.division_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.freight_charge_carrier)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.carrier_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.inv_mast_dea)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.pedigree_manufacturer_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.inv_mast_dealer_warranty)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.return_address_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.inventory_return_hdr)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.carrier_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.job_site)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasOptional(e => e.location)
                .WithRequired(e => e.address);

            modelBuilder.Entity<address>()
                .HasMany(e => e.pallet_bol_hdr)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.carrier_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.pegmost_account)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.address_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address>()
                .HasMany(e => e.po_acknowledgement_hdr)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.carrier_id);

            modelBuilder.Entity<address>()
                .HasOptional(e => e.supplier)
                .WithRequired(e => e.address);

            modelBuilder.Entity<address>()
                .HasMany(e => e.transfer_shipment_hdr)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.carrier_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.transfer_days)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.carrier_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.transfer_hdr)
                .WithOptional(e => e.address)
                .HasForeignKey(e => e.carrier_id);

            modelBuilder.Entity<address>()
                .HasMany(e => e.vendors)
                .WithRequired(e => e.address)
                .HasForeignKey(e => e.vendor_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address_dea>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address_dea>()
                .Property(e => e.dea_licensed_loc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address_dea>()
                .Property(e => e.unrestricted_dea_sale_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address_dea>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_dea>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_freight_display>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address_freight_display>()
                .Property(e => e.include_freight_in_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address_freight_display>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_freight_display>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.contact_name)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.postal_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.country)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .Property(e => e.address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_history>()
                .HasMany(e => e.invoice_hdr)
                .WithRequired(e => e.address_history)
                .HasForeignKey(e => e.sold_to_ah_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<address_x_dea_license>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address_x_dea_license>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_x_dea_license>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_x_restricted_class>()
                .Property(e => e.country)
                .IsUnicode(false);

            modelBuilder.Entity<address_x_restricted_class>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<address_x_restricted_class>()
                .Property(e => e.postal_code_from)
                .IsUnicode(false);

            modelBuilder.Entity<address_x_restricted_class>()
                .Property(e => e.postal_code_to)
                .IsUnicode(false);

            modelBuilder.Entity<address_x_restricted_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_x_restricted_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_x_restricted_class>()
                .Property(e => e.intl_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.beg_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.end_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.beg_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.end_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.beg_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.end_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.beg_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.end_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.beg_abc_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.end__abc_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<adjustment_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_accounting_ar>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_accounting_ar>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ads_audit_accounting_ar>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ads_audit_accounting_ar>()
                .Property(e => e.unearned_terms_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_accounting_ar>()
                .Property(e => e.allowed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_accounting_ar>()
                .Property(e => e.finance_charge_inv_allowed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_accounting_ar>()
                .Property(e => e.credit_card_remit_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_accounting_ar>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_commission>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_commission>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ads_audit_commission>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_commission>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_commission>()
                .Property(e => e.commission_amt)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ads_audit_commission>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.freight_cd)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.special_labeling_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.special_packaging_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.days_sales_outstanding)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.average_days_to_pay)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.credit_limit)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.credit_limit_used)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.average_days_past_due)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.pricing_method)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_customer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.sales_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.cogs_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.invoiced_sample_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.rebill_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.credit_memo_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.rebill_orig_invoice_diff_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_invoice>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.canceled_line_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.rma_line_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.quote_line_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.converted_quote_line_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.consign_rep_order_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.consign_usage_order_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.manual_price_override_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.order_total)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ads_audit_order>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_run>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ads_audit_run>()
                .HasMany(e => e.ads_audit_accounting_ar)
                .WithRequired(e => e.ads_audit_run)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ads_audit_run>()
                .HasMany(e => e.ads_audit_commission)
                .WithRequired(e => e.ads_audit_run)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ads_audit_run>()
                .HasMany(e => e.ads_audit_customer)
                .WithRequired(e => e.ads_audit_run)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ads_audit_run>()
                .HasMany(e => e.ads_audit_invoice)
                .WithRequired(e => e.ads_audit_run)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ads_audit_run>()
                .HasMany(e => e.ads_audit_order)
                .WithRequired(e => e.ads_audit_run)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ads_metric_configuration>()
                .Property(e => e.hub_metric_key)
                .IsUnicode(false);

            modelBuilder.Entity<ads_metric_configuration>()
                .Property(e => e.configuration_display_text)
                .IsUnicode(false);

            modelBuilder.Entity<ads_metric_configuration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ads_metric_configuration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ads_metric_configuration>()
                .Property(e => e.configuration_key)
                .IsUnicode(false);

            modelBuilder.Entity<affinity_hierarchy>()
                .Property(e => e.affinity_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<affinity_hierarchy>()
                .Property(e => e.hierarchy)
                .IsUnicode(false);

            modelBuilder.Entity<affinity_hierarchy>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<affinity_hierarchy>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<agile_connect_systems>()
                .Property(e => e.computer_name)
                .IsUnicode(false);

            modelBuilder.Entity<agile_connect_systems>()
                .Property(e => e.agile_directory)
                .IsUnicode(false);

            modelBuilder.Entity<agile_connect_systems>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<agile_connect_systems>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<aha_security>()
                .Property(e => e.security_code)
                .IsUnicode(false);

            modelBuilder.Entity<aha_security>()
                .Property(e => e.reference_id)
                .IsUnicode(false);

            modelBuilder.Entity<aha_security>()
                .Property(e => e.training_center_id)
                .IsUnicode(false);

            modelBuilder.Entity<aha_security>()
                .Property(e => e.contact_name)
                .IsUnicode(false);

            modelBuilder.Entity<aha_security>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<aha_security>()
                .Property(e => e.revoked_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<aha_security>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<aha_security>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<aia_element>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<aia_element>()
                .Property(e => e.point_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<aia_element>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<aia_element>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.customer_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.supplier_cd)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.aiag_label_desc)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.purchase_order)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.qty_shipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.crib_location)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.requisition_no)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_location)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.initial_order_qty)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.class_cd)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.engineering_change)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.order_control_location)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.process_time)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.department_section_acct)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.equipment_no)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.delivery_location)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_name1)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_name2)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_address1)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_address2)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_city)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_state)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_zip)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_country)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.crib_cc_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<aiag_label>()
                .Property(e => e.qty_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alarm_code>()
                .Property(e => e.alarm_code_id)
                .IsUnicode(false);

            modelBuilder.Entity<alarm_code>()
                .Property(e => e.alarm_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<alarm_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alarm_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alarm_code>()
                .HasMany(e => e.alarm_code_x_inv_mast)
                .WithRequired(e => e.alarm_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<alarm_code_x_inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alarm_code_x_inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_collaborate>()
                .Property(e => e.header)
                .IsUnicode(false);

            modelBuilder.Entity<alert_collaborate>()
                .Property(e => e.line_item)
                .IsUnicode(false);

            modelBuilder.Entity<alert_collaborate>()
                .Property(e => e.footer)
                .IsUnicode(false);

            modelBuilder.Entity<alert_collaborate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_collaborate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_implementation>()
                .Property(e => e.alert_implementation_name)
                .IsUnicode(false);

            modelBuilder.Entity<alert_implementation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_implementation>()
                .Property(e => e.where_clause)
                .IsUnicode(false);

            modelBuilder.Entity<alert_implementation>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<alert_implementation>()
                .Property(e => e.email_notification_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_implementation>()
                .Property(e => e.task_notification_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_implementation>()
                .Property(e => e.collaborate_notification_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_implementation>()
                .HasMany(e => e.alert_collaborate)
                .WithRequired(e => e.alert_implementation)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<alert_implementation>()
                .HasMany(e => e.Alert_implementation_query)
                .WithRequired(e => e.alert_implementation)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<alert_implementation>()
                .HasMany(e => e.alert_task)
                .WithRequired(e => e.alert_implementation)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<alert_implementation>()
                .HasMany(e => e.collaborate_message_queue)
                .WithRequired(e => e.alert_implementation)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<Alert_implementation_query>()
                .Property(e => e.column_value)
                .IsUnicode(false);

            modelBuilder.Entity<Alert_implementation_query>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<Alert_implementation_query>()
                .Property(e => e.column_value_description)
                .IsUnicode(false);

            modelBuilder.Entity<alert_message>()
                .Property(e => e.subject)
                .IsUnicode(false);

            modelBuilder.Entity<alert_message>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_message>()
                .Property(e => e.header)
                .IsUnicode(false);

            modelBuilder.Entity<alert_message>()
                .Property(e => e.line_item)
                .IsUnicode(false);

            modelBuilder.Entity<alert_message>()
                .Property(e => e.footer)
                .IsUnicode(false);

            modelBuilder.Entity<alert_message>()
                .Property(e => e.attachment)
                .IsUnicode(false);

            modelBuilder.Entity<alert_message>()
                .Property(e => e.sender_name)
                .IsUnicode(false);

            modelBuilder.Entity<alert_message>()
                .Property(e => e.sender_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<alert_message>()
                .HasMany(e => e.alert_recipient)
                .WithRequired(e => e.alert_message)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<alert_message>()
                .HasMany(e => e.alert_recipient_role)
                .WithRequired(e => e.alert_message)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<alert_queued_mail>()
                .Property(e => e.subject)
                .IsUnicode(false);

            modelBuilder.Entity<alert_queued_mail>()
                .Property(e => e.email_to)
                .IsUnicode(false);

            modelBuilder.Entity<alert_queued_mail>()
                .Property(e => e.email_body)
                .IsUnicode(false);

            modelBuilder.Entity<alert_queued_mail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_queued_mail>()
                .Property(e => e.sender_name)
                .IsUnicode(false);

            modelBuilder.Entity<alert_queued_mail>()
                .Property(e => e.sender_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<alert_recipient>()
                .Property(e => e.alert_email_name)
                .IsUnicode(false);

            modelBuilder.Entity<alert_recipient>()
                .Property(e => e.alert_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<alert_recipient>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_recipient_role>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_recipient_role>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_recipient_role>()
                .Property(e => e.region_based_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.activity_id)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.assigned_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.subject)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.comment_header)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.comment_detail)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.comment_footer)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.reminder_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.private_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.follow_up_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .Property(e => e.create_outlook_task_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_task>()
                .HasMany(e => e.alert_task_aux_assignee)
                .WithRequired(e => e.alert_task)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<alert_task_aux_assignee>()
                .Property(e => e.assigned_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task_aux_assignee>()
                .Property(e => e.reminder_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_task_aux_assignee>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task_aux_assignee>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task_aux_assignee>()
                .Property(e => e.create_outlook_task_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_task_aux_role>()
                .Property(e => e.region_based_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alert_task_aux_role>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_task_aux_role>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alert_type>()
                .Property(e => e.view_name)
                .IsUnicode(false);

            modelBuilder.Entity<alert_type>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<alert_type>()
                .HasMany(e => e.alert_implementation)
                .WithRequired(e => e.alert_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<alert_type>()
                .HasMany(e => e.alert_type_x_token)
                .WithRequired(e => e.alert_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<alert_type_x_token>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code>()
                .Property(e => e.alternate_code1)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code>()
                .Property(e => e.alternate_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code>()
                .Property(e => e.default_uom)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code>()
                .Property(e => e.exclude_from_b2b_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code>()
                .HasMany(e => e.po_line)
                .WithOptional(e => e.alternate_code)
                .HasForeignKey(e => new { e.entered_as_code, e.inv_mast_uid });

            modelBuilder.Entity<alternate_code_aux_info>()
                .Property(e => e.aux_info_1)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code_aux_info>()
                .Property(e => e.aux_info_2)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code_aux_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_code_aux_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_oe_settings>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_oe_settings>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_oe_settings>()
                .Property(e => e.class_id)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_oe_settings>()
                .Property(e => e.class_type)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_oe_settings>()
                .Property(e => e.class_number)
                .HasPrecision(3, 0);

            modelBuilder.Entity<alternate_oe_settings>()
                .Property(e => e.override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<alternate_oe_settings>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<alternate_oe_settings>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<anticipated_allocation>()
                .Property(e => e.worst_case_tbo_date_used)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<anticipated_allocation>()
                .Property(e => e.sku_qty_to_be_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<anticipated_allocation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<anticipated_allocation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<anticipated_allocation>()
                .Property(e => e.hard_linked_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<anticipated_allocation>()
                .Property(e => e.last_expected_inbound_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ap_system_parameters>()
                .Property(e => e.voucher_entry_by_item_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ap_system_parameters>()
                .Property(e => e.voucher_entry_by_amt_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ap_system_parameters>()
                .Property(e => e.prepay_vouchers_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ap_system_parameters>()
                .Property(e => e.cr_dr_memo_entry_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ap_system_parameters>()
                .Property(e => e.post_recurring_vchr_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ap_system_parameters>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ap_system_parameters>()
                .Property(e => e.validate_job_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ap_system_parameters>()
                .Property(e => e.display_job_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<api_data_access_x_roles>()
                .Property(e => e.api_name)
                .IsUnicode(false);

            modelBuilder.Entity<api_data_access_x_roles>()
                .Property(e => e.schema_name_object)
                .IsUnicode(false);

            modelBuilder.Entity<api_data_access_x_roles>()
                .Property(e => e.schema_type)
                .IsUnicode(false);

            modelBuilder.Entity<api_data_access_x_roles>()
                .Property(e => e.active_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<api_data_access_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<api_data_access_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.invoice_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.terms_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.check_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.ap_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.cash_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.terms_amount_taken)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.paid_in_full)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.home_currency_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.reverse_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.voucher_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.voucher_description)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.memo_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.voucher_class)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.voucher_reference_number)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.period_fully_paid)
                .HasPrecision(3, 0);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.year_fully_paid)
                .HasPrecision(4, 0);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.terms_taken_account)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.invoice_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.terms_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.terms_amount_taken_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.amount_paid_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.memo_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.always_take_terms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.voucher_reversal_reason)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.disputed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.previously_disputed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.job_id_set_by_conversion_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.vendor_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.handling_fee)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.voucher_ref_inv_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.exported_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.freight_voucher_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.freight_amount_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.freight_dispute_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.external_claim_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.iva_withheld_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.iva_withheld_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.iva_terms_amount_taken)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.iva_terms_amount_taken_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.payment_approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.terms_discount_pct)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.print_notes)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .Property(e => e.vat_only_memo_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr>()
                .HasMany(e => e.apinv_hdr_174)
                .WithRequired(e => e.apinv_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_hdr>()
                .HasMany(e => e.apinv_hdr_vat)
                .WithRequired(e => e.apinv_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_hdr>()
                .HasMany(e => e.apinv_hdr_x_inventory_receipts)
                .WithOptional(e => e.apinv_hdr)
                .HasForeignKey(e => e.voucher_number);

            modelBuilder.Entity<apinv_hdr>()
                .HasMany(e => e.apinv_line)
                .WithRequired(e => e.apinv_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_hdr>()
                .HasMany(e => e.invoice_cfdi_x_voucher)
                .WithRequired(e => e.apinv_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_hdr>()
                .HasMany(e => e.pending_payments)
                .WithRequired(e => e.apinv_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_hdr>()
                .HasMany(e => e.vendor_invoice_hdr)
                .WithOptional(e => e.apinv_hdr)
                .HasForeignKey(e => e.prepaid_voucher_no);

            modelBuilder.Entity<apinv_hdr>()
                .HasMany(e => e.voucher_purchase_acct)
                .WithRequired(e => e.apinv_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_hdr_174>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_174>()
                .Property(e => e.total_freight_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_174>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_174>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.description_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.description_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.invoice_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.invoice_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.approved_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.approved_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.branch_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.branch_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.period_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.period_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.year_for_period_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.year_for_period_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.invoice_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.invoice_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.invoice_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.invoice_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.invoice_amount_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.invoice_amount_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.voucher_class_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.voucher_class_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.terms_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.terms_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.terms_due_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.terms_due_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.net_due_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.net_due_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.terms_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.terms_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.terms_amount_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.terms_amount_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.always_take_terms_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.always_take_terms_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.disputed_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.disputed_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.voucher_description_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.voucher_description_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.external_claim_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.external_claim_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.voucher_type_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.voucher_type_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.amount_paid_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.amount_paid_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.po_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_audit_trail>()
                .Property(e => e.po_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.invoice_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.invoice_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.voucher_class)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.voucher_description)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.voucher_all_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.freight_amount_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.prorate_freight_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.terms_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.terms_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.terms_discount_pct)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.always_take_terms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.retrieve_type)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.external_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .HasMany(e => e.apinv_line_edit)
                .WithRequired(e => e.apinv_hdr_edit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_hdr_edit>()
                .HasMany(e => e.voucher_purchase_acct_edit)
                .WithRequired(e => e.apinv_hdr_edit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_hdr_ud>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_ud>()
                .Property(e => e.voucher_notes)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_ud>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_ud>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.taxable_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.tax_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.take_terms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.tax_amt_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.taxable_amt_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.apply_to_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.disputed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.vat_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.vendor_source_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.process_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.apply_to_charges_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.apply_to_restockingfee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_vat>()
                .Property(e => e.vat_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_x_inventory_receipts>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_hdr_x_inventory_receipts>()
                .Property(e => e.voucher_number)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_x_inventory_receipts>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<apinv_hdr_x_inventory_receipts>()
                .Property(e => e.receipt_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_x_inventory_receipts>()
                .Property(e => e.receipt_amount_foreign)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_x_inventory_receipts>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_x_inventory_receipts>()
                .Property(e => e.amount_paid_foreign)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_hdr_x_inventory_receipts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.purchase_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.purchase_account)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.type_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.ten99_type)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.home_currency_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.project_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.unit_price_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.purchase_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.disputed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.disputed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.original_disputed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.source_no)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.freight_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.gl_dimension_id)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.gl_dimension_desc)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line>()
                .Property(e => e.percent_allocated)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line>()
                .HasMany(e => e.apinv_line_disputed_vouch)
                .WithRequired(e => e.apinv_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_line>()
                .HasMany(e => e.po_line_disputed_voucher)
                .WithRequired(e => e.apinv_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<apinv_line_disputed_vouch>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_disputed_vouch>()
                .Property(e => e.qty_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_disputed_vouch>()
                .Property(e => e.po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_disputed_vouch>()
                .Property(e => e.invoiced_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_disputed_vouch>()
                .Property(e => e.memo_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_disputed_vouch>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_disputed_vouch>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_disputed_vouch>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_disputed_vouch>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.receipt_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.unit_quantity_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.unit_cost_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.extended_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.extended_cost_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.freight_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.disputed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.disputed_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.disputed_amount_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit>()
                .Property(e => e.acct_desc)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_x_inv_receipts_line>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<apinv_line_x_inv_receipts_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_x_inv_receipts_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<application_resource_file>()
                .Property(e => e.file_name)
                .IsUnicode(false);

            modelBuilder.Entity<application_resource_file>()
                .Property(e => e.file_type)
                .IsUnicode(false);

            modelBuilder.Entity<application_resource_file>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<application_resource_file>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<application_security>()
                .Property(e => e.internal_name)
                .IsUnicode(false);

            modelBuilder.Entity<application_security>()
                .Property(e => e.display_name)
                .IsUnicode(false);

            modelBuilder.Entity<application_security>()
                .Property(e => e.default_decimal_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<application_security>()
                .Property(e => e.default_string_value)
                .IsUnicode(false);

            modelBuilder.Entity<application_security>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<application_security>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<application_security>()
                .HasMany(e => e.users_x_application_security)
                .WithRequired(e => e.application_security)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<appointment>()
                .Property(e => e.appointment_uid)
                .IsUnicode(false);

            modelBuilder.Entity<appointment>()
                .Property(e => e.resource_type)
                .IsUnicode(false);

            modelBuilder.Entity<appointment>()
                .Property(e => e._event)
                .IsUnicode(false);

            modelBuilder.Entity<appointment>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<appointment>()
                .Property(e => e.recurrence_days_of_week)
                .IsUnicode(false);

            modelBuilder.Entity<appointment>()
                .Property(e => e.category_name)
                .IsUnicode(false);

            modelBuilder.Entity<appointment>()
                .Property(e => e.schedule_type)
                .IsUnicode(false);

            modelBuilder.Entity<appointment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<appointment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<appointment>()
                .HasMany(e => e.appointment_exception)
                .WithRequired(e => e.appointment)
                .HasForeignKey(e => e.exception_appointment_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<appointment>()
                .HasMany(e => e.appointment_exception1)
                .WithRequired(e => e.appointment1)
                .HasForeignKey(e => e.parent_appointment_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<appointment_exception>()
                .Property(e => e.appointment_exception_uid)
                .IsUnicode(false);

            modelBuilder.Entity<appointment_exception>()
                .Property(e => e.parent_appointment_uid)
                .IsUnicode(false);

            modelBuilder.Entity<appointment_exception>()
                .Property(e => e.exception_appointment_uid)
                .IsUnicode(false);

            modelBuilder.Entity<appointment_exception>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<appointment_exception>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_allowed_amt_distribution>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_allowed_amt_distribution>()
                .Property(e => e.gl_allowed_acct)
                .IsUnicode(false);

            modelBuilder.Entity<ar_allowed_amt_distribution>()
                .Property(e => e.allowed_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ar_allowed_amt_distribution>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<ar_allowed_amt_distribution>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_allowed_amt_distribution>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.payment_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.payment_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.terms_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.allowed_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.check_number)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.cc_name)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.cc_number)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.cc_authorized_number)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.deposit_number)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.memo_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.preprocessed_payment_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.currency_variance_amt_home)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.customer_payment_exch_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.change_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.payment_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.tax_terms_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.tax_amount_paid)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.pay_amt_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.rounded_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.multi_currency_payment_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.multi_currency_exchange_rate)
                .HasPrecision(28, 17);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.multi_currency_variance_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.cc_return_transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<ar_payment_details>()
                .Property(e => e.cc_refund_parent_payment_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_payment_details>()
                .HasMany(e => e.ar_receipts)
                .WithRequired(e => e.ar_payment_details)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_payment_details>()
                .HasMany(e => e.creditcard_payment_details)
                .WithRequired(e => e.ar_payment_details)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_payment_details>()
                .HasMany(e => e.check_payment_details)
                .WithRequired(e => e.ar_payment_details)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_payment_details>()
                .HasMany(e => e.creditcard_emv)
                .WithRequired(e => e.ar_payment_details)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_payment_details>()
                .HasMany(e => e.creditcard_signature)
                .WithRequired(e => e.ar_payment_details)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_payment_details>()
                .HasMany(e => e.downpayment_refund_details)
                .WithRequired(e => e.ar_payment_details)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_payment_details>()
                .HasMany(e => e.epf_transaction_detail)
                .WithRequired(e => e.ar_payment_details)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_payment_details>()
                .HasMany(e => e.remittances)
                .WithRequired(e => e.ar_payment_details)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.remitter_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.gl_bank_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.ar_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.terms_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.allowed_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.reverse_payment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .Property(e => e.cleared_bank)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts>()
                .HasMany(e => e.ar_receipts_detail)
                .WithRequired(e => e.ar_receipts)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.payment_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.terms_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.allowed_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.currency_variance_amt_home)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.tax_terms_taken_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.other_charge_terms_taken_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ar_receipts_detail>()
                .Property(e => e.tax_amount_paid)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ar_receipts_detail>()
                .HasMany(e => e.ar_allowed_amt_distribution)
                .WithRequired(e => e.ar_receipts_detail)
                .HasForeignKey(e => new { e.receipt_number, e.invoice_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.invoice_entry_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.cr_dr_memo_entry_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.prepaid_invoice_entry_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.import_invoices_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.validate_job_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.display_job_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.ar_intercompany_functionality)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.num_invoice_copies)
                .HasPrecision(2, 0);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.finance_charge_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.commission_multiplier)
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.commission_based_on)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.post_commission_to_gl)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.reverse_finance_charges)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ar_system_parameters>()
                .Property(e => e.credit_limit_action)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.area1)
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.customer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.supplier)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.customer_part_no)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.quote)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.purchase_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.vendor_return)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.requisition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.inventory_transfer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.sales_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.journal_entry)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.po_receipts)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.job_pricing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.job_site)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.work_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.vendor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.consignment_replenish_oe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.ship_to)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.routing_maintenance)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.process_maintenance)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.process_transaction)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.invoice_line)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.service_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.job_control)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.wwms_area_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.sales_order_line_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .Property(e => e.service_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<area>()
                .HasMany(e => e.note_area)
                .WithRequired(e => e.area1)
                .HasForeignKey(e => e.area)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<area_x_custom_column>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<area_x_custom_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<area_x_custom_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<area_x_custom_column>()
                .HasMany(e => e.custom_column_data_vendor)
                .WithRequired(e => e.area_x_custom_column)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<area_x_custom_column>()
                .HasMany(e => e.custom_column_data_shipto)
                .WithRequired(e => e.area_x_custom_column)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<area_x_custom_column>()
                .HasMany(e => e.custom_column_data_supplier)
                .WithRequired(e => e.area_x_custom_column)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<area_x_custom_column>()
                .HasMany(e => e.custom_column_data_customer)
                .WithRequired(e => e.area_x_custom_column)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.asb_call_criteria_id)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.asb_call_criteria_desc)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.asb_main_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.asb_sub_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.sub_account_extension)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_asb_delivery_method_id)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_asb_delivery_method_id)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.asb_delivery_method_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id1_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id2_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id3_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id4_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id5_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id6)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id6)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id6_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id7)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id7)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id7_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id8)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id8)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id8_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id9)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id9)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id9_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_inv_class_id10)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_inv_class_id10)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.inv_class_id10_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_item_classification_id)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_item_classification_id)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.item_classification_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_route_code)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_route_code)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.route_code_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.include_disposition_b_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.include_disposition_d_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.include_disposition_s_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_cust_class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_cust_class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.cust_class_id1_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_cust_class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_cust_class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.cust_class_id2_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_cust_class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_cust_class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.cust_class_id3_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_cust_class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_cust_class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.cust_class_id4_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.beg_cust_class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.end_cust_class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.cust_class_id5_list)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.shipping_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.stop_asb_process_on_fail_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.match_on_supplier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.print_po_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.po_printer_name)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.print_exception_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.exception_printer_name)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.minimum_process_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.minimum_process_po_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.auto_receive_on_ack_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.update_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.po_type_code)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.reference_id_qualifier)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.reference_id)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.transmit_po_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.create_po_on_sort_change_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<asb_call_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<asb_delivery_method>()
                .Property(e => e.asb_delivery_method_id)
                .IsUnicode(false);

            modelBuilder.Entity<asb_delivery_method>()
                .Property(e => e.asb_delivery_method_desc)
                .IsUnicode(false);

            modelBuilder.Entity<asb_delivery_method>()
                .Property(e => e.allocate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<asb_delivery_method>()
                .Property(e => e.disposition)
                .IsUnicode(false);

            modelBuilder.Entity<asb_delivery_method>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<asb_delivery_method>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_class>()
                .Property(e => e.assembly_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_class>()
                .Property(e => e.assembly_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_class>()
                .Property(e => e.auto_complete_assembly_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.backflush)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.assembly_days)
                .HasPrecision(4, 1);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.disassembly_days)
                .HasPrecision(4, 1);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.labor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.labor_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.class1)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.class2)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.class3)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.class4)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.class5)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.ship_partial_quantity)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.allow_oe_add_components)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.print_compnts_on_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.print_components_on_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.production_order_processing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.overall_assembly_length)
                .HasPrecision(19, 4);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.ship_incomplete_assemblies)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.auto_create_prod_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.print_incomplete_assemblies)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.assembly_for_stock)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.assembly_usage_accumulation)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.calc_component_service_level)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.allow_disassembly)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.cost_of_disassembly)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.prorate_cost_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.print_return_to_stock_components)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.price_return_to_stock_components)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.hose_assembly_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.hose_overall_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.hose_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.print_traveler_with_prodorder)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.do_not_bulk_edit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.auto_expand_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.bypass_oe_prod_order_processing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.pack_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .Property(e => e.include_components_on_edi_856)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr>()
                .HasMany(e => e.assembly_line)
                .WithRequired(e => e.assembly_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<assembly_hdr>()
                .HasMany(e => e.prod_order_line_comp_frght)
                .WithRequired(e => e.assembly_hdr)
                .HasForeignKey(e => e.assembly_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<assembly_hdr_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<assembly_hdr_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr_make_days>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr_make_days>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.sequence_number)
                .HasPrecision(5, 0);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.sub_assembly)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.other_charge_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.component_cut_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.cut_length_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.qty_needed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.backflush_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.ref_designator_locator)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.belting_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.belting_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.loose_ship_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.minimum_mcc_code)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line>()
                .Property(e => e.extended_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line_tally>()
                .Property(e => e.sequence_number)
                .HasPrecision(5, 0);

            modelBuilder.Entity<assembly_line_tally>()
                .Property(e => e.tally_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line_tally>()
                .Property(e => e.tally_feet)
                .HasPrecision(19, 0);

            modelBuilder.Entity<assembly_line_tally>()
                .Property(e => e.tally_inches)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line_tally>()
                .Property(e => e.sub_assembly)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line_tally>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line_tally>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<assignment>()
                .Property(e => e.assignee)
                .IsUnicode(false);

            modelBuilder.Entity<assignment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<assignment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<attribute>()
                .Property(e => e.attribute_desc)
                .IsUnicode(false);

            modelBuilder.Entity<attribute>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<attribute>()
                .Property(e => e.attribute_id)
                .IsUnicode(false);

            modelBuilder.Entity<attribute>()
                .Property(e => e.validation_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<attribute>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<attribute>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<attribute>()
                .HasMany(e => e.attribute_value)
                .WithRequired(e => e.attribute)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<attribute>()
                .HasMany(e => e.attribute_x_attribute_group)
                .WithRequired(e => e.attribute)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<attribute>()
                .HasMany(e => e.inventory_receipt_attribute_value)
                .WithRequired(e => e.attribute)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<attribute>()
                .HasMany(e => e.item_attribute_value)
                .WithRequired(e => e.attribute)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<attribute_group>()
                .Property(e => e.attribute_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<attribute_group>()
                .Property(e => e.attribute_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<attribute_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<attribute_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<attribute_group>()
                .HasMany(e => e.attribute_x_attribute_group)
                .WithRequired(e => e.attribute_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<attribute_group>()
                .HasMany(e => e.inv_adj_loc_attribute_group)
                .WithRequired(e => e.attribute_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<attribute_group>()
                .HasMany(e => e.location_attribute_group)
                .WithRequired(e => e.attribute_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<attribute_group>()
                .HasMany(e => e.supplier_attribute_group)
                .WithRequired(e => e.attribute_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<attribute_value>()
                .Property(e => e.attribute_value1)
                .IsUnicode(false);

            modelBuilder.Entity<attribute_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<attribute_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<attribute_x_attribute_group>()
                .Property(e => e.required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<attribute_x_attribute_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<attribute_x_attribute_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.column_changed)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.key1_cd)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.key1_value)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.key2_cd)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.key2_value)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.key3_cd)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.key3_value)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.old_value)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.new_value)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.table_changed)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.column_description)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail>()
                .Property(e => e.auxiliary_value)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail_support>()
                .Property(e => e.source_table_name)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail_support>()
                .Property(e => e.company_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail_support>()
                .Property(e => e.location_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail_support>()
                .Property(e => e.completed_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail_support>()
                .Property(e => e.line_no_display_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail_support>()
                .Property(e => e.inv_mast_uid_display_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail_support>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<audit_trail_support>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.argument1)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.argument2)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.argument3)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.argument4)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.argument5)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.argument6)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.argument7)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.argument8)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.argument9)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_hdr>()
                .Property(e => e.auto_test_id)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_hdr>()
                .Property(e => e.auto_test_description)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_hdr>()
                .HasMany(e => e.auto_test_detail)
                .WithRequired(e => e.auto_test_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.message_text)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.source_argument1)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.source_argument2)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.source_argument3)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.source_argument4)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.source_argument5)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.source_argument6)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.source_argument7)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.source_argument8)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.source_argument9)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_log_message>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_run>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_run>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_run>()
                .HasMany(e => e.auto_test_log_message)
                .WithRequired(e => e.auto_test_run)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.desc_argument1)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.desc_argument2)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.desc_argument3)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.desc_argument4)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.desc_argument5)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.desc_argument6)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.desc_argument7)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.desc_argument8)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.desc_argument9)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<average_inventory_value>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<average_inventory_value>()
                .Property(e => e.inventory_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<average_inventory_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<average_inventory_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_assembly_detail>()
                .Property(e => e.header_item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_assembly_detail>()
                .Property(e => e.component_item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_assembly_detail>()
                .Property(e => e.quantity)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_temp_assembly_detail>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_assembly_detail>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_temp_assembly_detail>()
                .Property(e => e.component_description)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_assembly_header>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_category_image>()
                .Property(e => e.image_filename)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_category_image>()
                .Property(e => e.thumbnail_filename)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_category_link>()
                .Property(e => e.link_address)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_category_link>()
                .Property(e => e.link_text)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_category_x_item>()
                .Property(e => e.display_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_class>()
                .Property(e => e.class_type)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_class>()
                .Property(e => e.class_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_class>()
                .Property(e => e.class_description)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_contact>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_temp_contact>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_contact>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_contract_detail>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_contract_hdr>()
                .Property(e => e.contract_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_contract_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_contract_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_temp_contract_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_temp_corporation>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_corporation>()
                .Property(e => e.corporate_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_corporation>()
                .Property(e => e.corporate_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_corporation_customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_corporation_customer>()
                .Property(e => e.corporate_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_corporation_customer>()
                .Property(e => e.district_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_temp_corporation_customer>()
                .Property(e => e.customer_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_corporation_customer>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_credit_card>()
                .Property(e => e.credit_card_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_credit_card>()
                .Property(e => e.payment_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_credit_card>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_credit_card>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_credit_card>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_credit_card>()
                .Property(e => e.convenience_fee_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.location_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.processor_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.processor_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.merchant_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.merchantkey)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.help_desk_phone1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.help_desk_phone2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.voice_auth_phone1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.voice_auth_phone2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.industry_type)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.protobase_path)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.pb_admin_path)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.settlement_batch_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.request_files_path)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.archive_files_path)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.terminal_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.freight)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.web_server_url)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.secret_key)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.reporting_url)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.services_url)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.transaction_url)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor>()
                .Property(e => e.default_account_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor_x_location>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor_x_location>()
                .Property(e => e.location_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor_x_location>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_temp_creditcard_processor_x_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_creditcard_processor_x_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_cust_item>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_cust_item>()
                .Property(e => e.part_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_cust_item>()
                .Property(e => e.customer_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_cust_item>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_cust_item>()
                .Property(e => e.unit_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_cust_item>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.class1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.primary_sales_rep)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_principle_first_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_principle_mi)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_principle_last_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_principle_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_marketing_first_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_marketing_mi)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_marketing_last_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_marketing_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_service_first_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_service_mi)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_service_last_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.contact_service_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.coverage_area_zip_codes)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.central_watts_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer>()
                .Property(e => e.apply_convenience_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer_goal_detail>()
                .Property(e => e.goal_detail)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer_goal_detail>()
                .Property(e => e.performance)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer_goal_detail>()
                .Property(e => e.goal_detail_number)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_customer_goal_detail>()
                .Property(e => e.performance_number)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_customer_goal_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer_x_dealer_type>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer_x_dealer_type>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_temp_dealer>()
                .Property(e => e.dealer_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer>()
                .Property(e => e.address_1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer>()
                .Property(e => e.address_2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer>()
                .Property(e => e.dealer_state)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer>()
                .Property(e => e.zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer>()
                .Property(e => e.phone)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer>()
                .Property(e => e.fax)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer>()
                .Property(e => e.dealer_url)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer_type>()
                .Property(e => e.dealer_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_dealer_type>()
                .Property(e => e.dealer_type_description)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_district>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_district>()
                .Property(e => e.district_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_temp_district>()
                .Property(e => e.district_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_district>()
                .Property(e => e.corporate_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.freight_cd)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.freight_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.incoming_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.outgoing_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.incoming_reduce_commission)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.outgoing_increase_commission)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.free_in_freight_min_web)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_freight_code>()
                .Property(e => e.free_out_freight_min_web)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_desc1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_desc2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_desc3)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_desc4)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.short_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.vend_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.upc_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.catg_list)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_desc5)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.mfg_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.searchable)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.internal_item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.keywords)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.sales_unit)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.sales_unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.suggested_retail_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.dimension)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.track_serial_number)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.restricted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.has_substitutes_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.has_accessories_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.unspsc_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class4)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class5)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class3)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class1_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class2_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class3_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class4_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.class5_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.custom_vendor_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.custom_vendor_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.price_family_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_item>()
                .Property(e => e.item_height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_item_alternate>()
                .Property(e => e.alternate_item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_alternate>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_alternate>()
                .Property(e => e.alternate_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.item_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.master_category_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.parent_category_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.display_on_web_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.display_master_product_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.catalog_page)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category>()
                .Property(e => e.sub_category_image_file)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category_description>()
                .Property(e => e.text_description)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category_hierarchy>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_category_hierarchy>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_document>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_document>()
                .Property(e => e.link_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_document>()
                .Property(e => e.link_path)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_document>()
                .Property(e => e.link_type)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_image>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_image>()
                .Property(e => e.image_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.supplier_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.supplier_upc_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.supplier_list_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.supplier_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.suggested_retail_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.stockable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.catalog_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.discontinued_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.qty_available)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.purchase_discount_group)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.sales_discount_group)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.manufacturing_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price1)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price2)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price3)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price4)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price5)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price6)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price7)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price8)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price9)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.price10)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.custom_supplier_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.min_order_qty)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.max_order_qty)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location>()
                .Property(e => e.qty_on_order)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_location_bin>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location_bin>()
                .Property(e => e.bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_location_bin>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_notepad>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_spec_page>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_spec_page>()
                .Property(e => e.spec_page_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_supplier_x_location>()
                .Property(e => e.primary_supplier)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_uom>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_uom>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_uom>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_uom>()
                .Property(e => e.location_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_uom>()
                .Property(e => e.default_uom_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_uom>()
                .Property(e => e.default_pricing_uom_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_uom>()
                .Property(e => e.unit_description)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_uom>()
                .Property(e => e.home_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.location_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.ups_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.pickup_type)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.customer_type)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_location>()
                .Property(e => e.parker_distributor_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_monthly_category_sale>()
                .Property(e => e.customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_monthly_category_sale>()
                .Property(e => e.category_list_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_monthly_category_sale>()
                .Property(e => e.total_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_monthly_category_sale>()
                .Property(e => e.total_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_order_surcharge>()
                .Property(e => e.order_surcharge_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_order_surcharge>()
                .Property(e => e.order_surcharge_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_order_surcharge>()
                .Property(e => e.min_web_order_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_order_surcharge>()
                .Property(e => e.min_web_order_surcharge_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_order_surcharge>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_past_purchases>()
                .Property(e => e.customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_past_purchases>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_past_purchases>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_past_purchases>()
                .Property(e => e.sales_unit)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_past_purchases>()
                .Property(e => e.sales_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_past_purchases>()
                .Property(e => e.customer_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_quote_list_detail>()
                .Property(e => e.job_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_quote_list_detail>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_quote_list_detail>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_quote_list_detail>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_quote_list_detail>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_quote_list_detail>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_quote_list_detail>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_quote_list_detail>()
                .Property(e => e.user_description1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_quote_list_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_quote_list_header>()
                .Property(e => e.job_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_quote_list_header>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_reason>()
                .Property(e => e.reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_reason>()
                .Property(e => e.reason)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_reason>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program_entry_year>()
                .Property(e => e.allow_registration_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.customer_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.default_ship_to)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_address1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_address2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_city)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_state)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_zip)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_country)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_firstname)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_lastname)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.ship_to_phone)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.source_location)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.limit_online_warranties_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.allow_delete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.eft_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.eft_routing_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.eft_bank_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.eft_bank_city)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.eft_bank_state)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_ship_to>()
                .Property(e => e.eft_taxpayer_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_shipping_method>()
                .Property(e => e.shipping_method_value)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_shipping_method>()
                .Property(e => e.shipping_method_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_shipping_method>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_shipping_method_x_freight_code>()
                .Property(e => e.shipping_method_value)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_system_setting>()
                .Property(e => e.setting_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_system_setting>()
                .Property(e => e.setting_value)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_vendor>()
                .Property(e => e.vendor_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_vendor>()
                .Property(e => e.vendor_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_vendor>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_vendor>()
                .Property(e => e.vendor_url)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_vendor>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_vendor_category>()
                .Property(e => e.category_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_vendor_link>()
                .Property(e => e.vendor_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_vendor_link>()
                .Property(e => e.link_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_vendor_link>()
                .Property(e => e.link_path)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_dealer_failure_code>()
                .Property(e => e.vendor_failure_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_dealer_failure_code>()
                .Property(e => e.failure_code_description)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_dealer_failure_code>()
                .Property(e => e.additional_desc_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_dealer_failure_code_x_supplier>()
                .Property(e => e.vendor_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.product_type_cd_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.return_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.refrigerant_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.require_date_code_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.require_date_code_flag_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.require_failed_part_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.require_failed_part_no_flag_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.require_equipment_dtl_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.require_equipment_dtl_flag_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.coil_labor_inv_mast_uid_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.coil_labor_charge_credit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.coil_labor_charge_credit_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.compressor_labor_inv_mast_uid_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.compressor_labor_charge_credit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.compressor_labor_charge_credit_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.labor_days_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.unit_off_shelf_life_from_product_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.compressor_labor_item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_detail>()
                .Property(e => e.coil_labor_item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_item_equipment>()
                .Property(e => e.inv_mast_uid)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.commercial_product_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.coil_labor_charge_credit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.compressor_labor_charge_credit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.require_date_code_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.require_failed_part_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.require_equipment_dtl_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.coil_labor_item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_detail>()
                .Property(e => e.compressor_labor_item_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_equipment>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_equipment>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_serial_template>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_serial_template>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_product_group_serial_template>()
                .Property(e => e.serial_template)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_supplier_claim_detail>()
                .Property(e => e.vendor_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_supplier_claim_detail>()
                .Property(e => e.supplier_claim_detail_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_supplier_claim_detail>()
                .Property(e => e.required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_supplier_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_warranty_claim_supplier_detail>()
                .Property(e => e.supplier_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.destination_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.b2b_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.transfer_sequence_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.user_scanned_out)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.dc_user_scanned_in)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.holding_area)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.load_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.door)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.dc_user_scanned_out)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.to_location_user_scanned_in)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_transfer_tracking>()
                .Property(e => e.b2b_tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<b3_customs_info>()
                .Property(e => e.harmonized_code)
                .IsUnicode(false);

            modelBuilder.Entity<b3_customs_info>()
                .Property(e => e.duty_rate)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b3_customs_info>()
                .Property(e => e.duty_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b3_customs_info>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b3_customs_info>()
                .Property(e => e.form_no)
                .IsUnicode(false);

            modelBuilder.Entity<b3_customs_info>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<b3_customs_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<b3_customs_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<balance>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<balance>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<balance>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<balance>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<balance>()
                .Property(e => e.cumulative_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balance>()
                .Property(e => e.period_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balance>()
                .Property(e => e.budget_1)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balance>()
                .Property(e => e.budget_2)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balance>()
                .Property(e => e.budget_3)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balance>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<balance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<balance>()
                .Property(e => e.encumbered_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balance>()
                .Property(e => e.encumbered_this_period)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balance>()
                .Property(e => e.foreign_period_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balance>()
                .Property(e => e.foreign_cumulative_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balance>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<balance>()
                .Property(e => e.cumulative_budget_1)
                .HasPrecision(19, 2);

            modelBuilder.Entity<balance>()
                .Property(e => e.cumulative_budget_2)
                .HasPrecision(19, 2);

            modelBuilder.Entity<balance>()
                .Property(e => e.cumulative_budget_3)
                .HasPrecision(19, 2);

            modelBuilder.Entity<balance>()
                .HasMany(e => e.gls)
                .WithRequired(e => e.balance)
                .HasForeignKey(e => new { e.company_no, e.account_number, e.period, e.year_for_period, e.currency_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<balances_reporting_curr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<balances_reporting_curr>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<balances_reporting_curr>()
                .Property(e => e.period_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balances_reporting_curr>()
                .Property(e => e.cumulative_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<balances_reporting_curr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<balances_reporting_curr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.transit_code)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_code)
                .HasPrecision(18, 0);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.fed_res_code)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_name)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_branch)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_address1)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_address2)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.last_check_no)
                .HasPrecision(18, 0);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.gl_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.active)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.check_form_name)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.reconcile_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.use_preprinted_checks_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.number_of_sigs)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.sig1_path)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.sig2_path)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.amount_req_two_sigs)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.routing_number)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.check_digit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.ach_file_id_modifier)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.export_path)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.ach_company_id)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.ceo_company)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.commercial_card_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.edd_biller_id)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.document_template_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_city)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_state)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.remote_id)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.application_id)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_country)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bank_company_id_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.einvoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .Property(e => e.bsb_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts>()
                .HasMany(e => e.bank_accounts_eft)
                .WithRequired(e => e.bank_accounts)
                .HasForeignKey(e => new { e.company_no, e.bank_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bank_accounts>()
                .HasMany(e => e.bank_accounts_reconciliation)
                .WithRequired(e => e.bank_accounts)
                .HasForeignKey(e => new { e.company_id, e.bank_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bank_accounts>()
                .HasMany(e => e.cash_drawer)
                .WithOptional(e => e.bank_accounts)
                .HasForeignKey(e => new { e.company_id, e.bank_no });

            modelBuilder.Entity<bank_accounts>()
                .HasMany(e => e.cash_transfer)
                .WithRequired(e => e.bank_accounts)
                .HasForeignKey(e => new { e.destination_company_id, e.destination_bank_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bank_accounts>()
                .HasMany(e => e.cash_transfer1)
                .WithRequired(e => e.bank_accounts1)
                .HasForeignKey(e => new { e.source_company_id, e.source_bank_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bank_accounts>()
                .HasMany(e => e.cash_drawer_history)
                .WithRequired(e => e.bank_accounts)
                .HasForeignKey(e => new { e.company_id, e.bank_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bank_accounts>()
                .HasMany(e => e.gls)
                .WithOptional(e => e.bank_accounts)
                .HasForeignKey(e => new { e.company_no, e.bank_no });

            modelBuilder.Entity<bank_accounts>()
                .HasMany(e => e.reconciliation_layout_hdr)
                .WithRequired(e => e.bank_accounts)
                .HasForeignKey(e => new { e.company_id, e.bank_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.use_eft_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.owner_identification)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.starting_volume_serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.sorting_code_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.user_narrative)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.name_of_acct)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.name_of_financial_institution)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.bsb_number)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.bank)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.branch)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.suffix)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.use_aba_nab_format_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.originator_id)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.originator_short_name)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.originator_long_name)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.destination_data_center)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.institution_id_for_returns)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.account_no_for_returns)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.account_no_for_rejects)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.account_no_for_recalls)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.drawee_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.branch_transit_no)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.routing_number_for_returns)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_eft>()
                .Property(e => e.transit_number_for_returns)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.bank_stmt_balance)
                .HasPrecision(19, 2);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.gl_transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.outstanding_deposits)
                .HasPrecision(19, 2);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.outstanding_disbursements)
                .HasPrecision(19, 2);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.cash_acct_balance)
                .HasPrecision(19, 2);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.gl_reversing_trans_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.cash_adjustment_debit_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.cash_adjustment_credit_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<bank_accounts_reconciliation>()
                .Property(e => e.exchange_rate_manual_entry)
                .HasPrecision(19, 6);

            modelBuilder.Entity<bhl_release_bin>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<bhl_release_bin>()
                .Property(e => e.bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<bhl_release_bin>()
                .Property(e => e.qty_to_confirm)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bhl_release_bin>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bhl_release_bin>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_hold_hdr>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bill_hold_hdr>()
                .Property(e => e.complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bill_hold_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_hold_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_hold_hdr>()
                .HasMany(e => e.bill_hold_line)
                .WithRequired(e => e.bill_hold_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bill_hold_line>()
                .Property(e => e.qty_on_hold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bill_hold_line>()
                .Property(e => e.qty_released)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bill_hold_line>()
                .Property(e => e.qty_canceled)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bill_hold_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_hold_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_hold_line>()
                .Property(e => e.qty_to_confirm)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bill_hold_line>()
                .HasMany(e => e.bhl_release_bin)
                .WithRequired(e => e.bill_hold_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bill_hold_line>()
                .HasMany(e => e.bill_hold_line1)
                .WithOptional(e => e.bill_hold_line2)
                .HasForeignKey(e => e.source_bill_hold_line_uid);

            modelBuilder.Entity<bill_hold_line>()
                .HasMany(e => e.bill_hold_line_x_adjust)
                .WithRequired(e => e.bill_hold_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bill_hold_line_x_adjust>()
                .Property(e => e.adjustment_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bill_hold_line_x_adjust>()
                .Property(e => e.adjustment_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bill_hold_line_x_adjust>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_hold_line_x_adjust>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_of_lading_detail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<bill_of_lading_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_of_lading_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_of_lading_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<bill_of_lading_hdr>()
                .Property(e => e.ship_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bill_of_lading_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bill_of_lading_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bill_of_lading_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bill_of_lading_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_of_lading_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_of_lading_hdr>()
                .Property(e => e.print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bill_of_lading_hdr>()
                .HasMany(e => e.bill_of_lading_detail)
                .WithRequired(e => e.bill_of_lading_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bill_to_category>()
                .Property(e => e.bill_to_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<bill_to_category>()
                .Property(e => e.bill_to_category_description)
                .IsUnicode(false);

            modelBuilder.Entity<bill_to_category>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bill_to_category>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<bill_to_category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_to_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_to_category>()
                .HasMany(e => e.bill_to_category_items)
                .WithRequired(e => e.bill_to_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bill_to_category_items>()
                .Property(e => e.customer_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<bill_to_category_items>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bill_to_category_items>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bill_to_category_items>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bin>()
                .Property(e => e.bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.pick_locked_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.put_locked_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.full_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.frozen_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.max_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin>()
                .Property(e => e.current_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin>()
                .Property(e => e.current_volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin>()
                .Property(e => e.bin_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin>()
                .Property(e => e.bin_height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin>()
                .Property(e => e.bin_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin>()
                .Property(e => e.rf_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.consolidation_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.stage_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.door_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.rma_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.master_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.pick_confirmed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.last_validated_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .Property(e => e.zone_pick_consolidation_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin>()
                .HasMany(e => e.bin_ud)
                .WithRequired(e => e.bin)
                .HasForeignKey(e => new { e.company_id, e.location_id, e.bin_id });

            modelBuilder.Entity<bin>()
                .HasMany(e => e.inv_bin)
                .WithRequired(e => e.bin1)
                .HasForeignKey(e => new { e.company_id, e.location_id, e.bin })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bin>()
                .HasMany(e => e.inventory_defaults)
                .WithOptional(e => e.bin)
                .HasForeignKey(e => new { e.company_id, e.location_id, e.default_bin });

            modelBuilder.Entity<bin>()
                .HasMany(e => e.lot_bin_xref)
                .WithRequired(e => e.bin)
                .HasForeignKey(e => new { e.company_id, e.location_id, e.bin_cd })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bin_movement_import_log>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bin_movement_import_log>()
                .Property(e => e.from_bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<bin_movement_import_log>()
                .Property(e => e.to_bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<bin_movement_import_log>()
                .Property(e => e.qty_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_movement_import_log>()
                .Property(e => e.qty_in_bin)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_movement_import_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_movement_import_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_picking_problem_info>()
                .Property(e => e.transaction_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bin_picking_problem_info>()
                .Property(e => e.transaction_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_picking_problem_info>()
                .Property(e => e.adjustment_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_picking_problem_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_picking_problem_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_replenishment>()
                .Property(e => e.pkg_sku_qty_per)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_replenishment>()
                .Property(e => e.min_sku_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_replenishment>()
                .Property(e => e.max_sku_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_replenishment>()
                .Property(e => e.rep_sku_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_replenishment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_replenishment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_replenishment>()
                .HasMany(e => e.bin_replenishment_order)
                .WithRequired(e => e.bin_replenishment)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bin_replenishment_order>()
                .Property(e => e.replenishment_sku_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_replenishment_order>()
                .Property(e => e.replenishment_order_user)
                .IsUnicode(false);

            modelBuilder.Entity<bin_replenishment_order>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_replenishment_order>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_replenishment_order>()
                .Property(e => e.alert_sent_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_replenishment_order>()
                .Property(e => e.order_sku_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_rma>()
                .Property(e => e.qc_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_rma>()
                .Property(e => e.rma_vendor_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_rma>()
                .Property(e => e.supplier_id_for_bin)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bin_rma>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_rma>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.bin_type1)
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.bin_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.putable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.pickable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.quarantine_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.weigh_station_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.front_counter_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.backflush_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.full_skid_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_type>()
                .Property(e => e.shippable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_ud>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bin_ud>()
                .Property(e => e.bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<bin_ud>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<bin_ud>()
                .Property(e => e.offsite)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_ud>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_ud>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.bin_zone_id)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.zone_desc)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.bin_replenishment_user)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.bypass_full_qty_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.aia_point_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.allocation_uom)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.printer_name)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.tag_item_id_validation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .Property(e => e.day_pick_zone_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone>()
                .HasMany(e => e.bins)
                .WithOptional(e => e.bin_zone)
                .HasForeignKey(e => e.putaway_zone_uid);

            modelBuilder.Entity<bin_zone>()
                .HasMany(e => e.bins1)
                .WithOptional(e => e.bin_zone1)
                .HasForeignKey(e => e.pick_zone_uid);

            modelBuilder.Entity<bin_zone>()
                .HasMany(e => e.bin_zone_x_bin_zone_group)
                .WithRequired(e => e.bin_zone)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bin_zone>()
                .HasMany(e => e.carrier_pick_location_zone)
                .WithRequired(e => e.bin_zone)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bin_zone_group>()
                .Property(e => e.bin_zone_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone_group>()
                .Property(e => e.bin_zone_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone_group>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone_group>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<bin_zone_group>()
                .Property(e => e.putaway_rank)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone_group>()
                .HasMany(e => e.bin_zone_x_bin_zone_group)
                .WithRequired(e => e.bin_zone_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<bin_zone_x_bin_zone_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<bin_zone_x_bin_zone_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<block_pt_scan>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<block_pt_scan>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.caller_name)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.budget_number)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.mail_stop)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.caller_phone)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.boeing_routing)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.boeing_ship_code)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.boeing_plant)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.boeing_building)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.boeing_door)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.boeing_col)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_caller_10000>()
                .Property(e => e.boeing_caller_id)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_order_taker)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_caller_name)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.budget_number)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_po_number)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.terms_percent)
                .HasPrecision(6, 4);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_terms_days)
                .HasPrecision(4, 0);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_net_days)
                .HasPrecision(4, 0);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.supplier_code)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_cc)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.work_order)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_budget)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_sn)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.supplier_reference_number)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_order_taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_home_budget)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_opr_no)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_cc_loan)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_po_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_10000>()
                .Property(e => e.boeing_caller_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_xref_10000>()
                .Property(e => e.boeing_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_xref_10000>()
                .Property(e => e.boeing_pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<boeing_order_xref_10000>()
                .Property(e => e.boeing_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_order_xref_10000>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_po_10000>()
                .Property(e => e.boeing_po_number)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<boeing_po_10000>()
                .Property(e => e.boeing_terms_percent)
                .HasPrecision(6, 4);

            modelBuilder.Entity<boeing_po_10000>()
                .Property(e => e.boeing_terms_days)
                .HasPrecision(4, 0);

            modelBuilder.Entity<boeing_po_10000>()
                .Property(e => e.boeing_net_days)
                .HasPrecision(4, 0);

            modelBuilder.Entity<boeing_po_10000>()
                .Property(e => e.boeing_supplier_code)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_po_10000>()
                .Property(e => e.boeing_po_taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<boeing_po_10000>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<boeing_po_10000>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_po_10000>()
                .Property(e => e.boeing_po_id)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.mail_stop)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.mail_stop_phone)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.boeing_plant)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.boeing_building)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.boeing_door)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.boeing_col)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.internal_routing)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.internal_mail_stop)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.internal_mail_stop_phone)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.boeing_ship_code)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.boeing_ship_via)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.boeing_fob)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.approved_by)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.origin)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.approved_by_phone)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.instruction_2)
                .IsUnicode(false);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.premium_amount)
                .HasPrecision(8, 2);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.surface_amount)
                .HasPrecision(8, 2);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.difference)
                .HasPrecision(8, 2);

            modelBuilder.Entity<boeing_shipping_10000>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<box>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<box>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<box>()
                .Property(e => e.box_id)
                .IsUnicode(false);

            modelBuilder.Entity<box>()
                .Property(e => e.box_desc)
                .IsUnicode(false);

            modelBuilder.Entity<box>()
                .Property(e => e.length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<box>()
                .Property(e => e.width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<box>()
                .Property(e => e.height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<box>()
                .Property(e => e.max_weight)
                .HasPrecision(19, 12);

            modelBuilder.Entity<box>()
                .Property(e => e.padding_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<box>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<box>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<box_item_x_each_item>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<box_item_x_each_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<box_item_x_each_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.branch_description)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.payable_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.receivable_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.logo_path_filename)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.remit_to_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<branch>()
                .Property(e => e.labor_billback_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.default_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.duns_number)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.prevent_auto_assign_lots_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.cfdi_timezone_offset)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .Property(e => e.email_subject_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<branch>()
                .HasMany(e => e.apinv_hdr)
                .WithOptional(e => e.branch)
                .HasForeignKey(e => new { e.company_no, e.branch_id });

            modelBuilder.Entity<branch>()
                .HasMany(e => e.chart_of_accts)
                .WithRequired(e => e.branch)
                .HasForeignKey(e => new { e.company_no, e.branch_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<branch>()
                .HasMany(e => e.cartaporte_hdr)
                .WithOptional(e => e.branch)
                .HasForeignKey(e => new { e.company_id, e.branch_id });

            modelBuilder.Entity<branch>()
                .HasMany(e => e.branch_inv_no_display)
                .WithRequired(e => e.branch)
                .HasForeignKey(e => new { e.company_id, e.branch_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<branch>()
                .HasMany(e => e.invoice_hdr)
                .WithRequired(e => e.branch)
                .HasForeignKey(e => new { e.company_no, e.branch_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<branch>()
                .HasMany(e => e.po_hdr)
                .WithRequired(e => e.branch)
                .HasForeignKey(e => new { e.company_no, e.branch_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<branch>()
                .HasMany(e => e.recur_apinv_hdr)
                .WithOptional(e => e.branch)
                .HasForeignKey(e => new { e.company_id, e.branch_id });

            modelBuilder.Entity<branch>()
                .HasMany(e => e.region_x_branch)
                .WithRequired(e => e.branch)
                .HasForeignKey(e => new { e.company_id, e.branch_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<branch>()
                .HasMany(e => e.ship_to)
                .WithRequired(e => e.branch)
                .HasForeignKey(e => new { e.company_id, e.default_branch })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<branch>()
                .HasMany(e => e.users_x_branch)
                .WithRequired(e => e.branch)
                .HasForeignKey(e => new { e.company_id, e.branch_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<branch>()
                .HasMany(e => e.vendor_invoice_hdr)
                .WithOptional(e => e.branch)
                .HasForeignKey(e => new { e.company_id, e.branch_id });

            modelBuilder.Entity<branch_inv_no_display>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<branch_inv_no_display>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<branch_inv_no_display>()
                .Property(e => e.invoice_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<branch_inv_no_display>()
                .Property(e => e.invoice_current_counter)
                .IsUnicode(false);

            modelBuilder.Entity<branch_inv_no_display>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<branch_inv_no_display>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<branch_inv_no_display>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.homeowner_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.contractor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.builder_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.architect_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.designer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<builders_selection_sheet>()
                .Property(e => e.pricing_source)
                .IsUnicode(false);

            modelBuilder.Entity<business_object_key_fields>()
                .Property(e => e.business_object_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_object_key_fields>()
                .Property(e => e.key_field_names)
                .IsUnicode(false);

            modelBuilder.Entity<business_object_key_fields>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_object_key_fields>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.rule_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.class_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.apply_during_save_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.apply_globally_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.run_for_all_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.window_title)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.license_key)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.apply_to_all_rows_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.multirow_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.internal_rule_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.rule_page_url)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.show_rule_page_url_desktop_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.order_entry_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.front_counter_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .Property(e => e.rma_entry_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule>()
                .HasMany(e => e.business_rule_data_element)
                .WithRequired(e => e.business_rule)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<business_rule>()
                .HasMany(e => e.business_rule_x_roles)
                .WithRequired(e => e.business_rule)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<business_rule>()
                .HasMany(e => e.business_rule_x_users)
                .WithRequired(e => e.business_rule)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<business_rule_data_element>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_data_element>()
                .Property(e => e.class_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_data_element>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_data_element>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_data_element>()
                .Property(e => e.field_alias)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event>()
                .Property(e => e.published_event_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event>()
                .Property(e => e.display_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event>()
                .Property(e => e.internal_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event>()
                .Property(e => e.allow_new_rows_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event>()
                .HasMany(e => e.business_rule_event_class)
                .WithRequired(e => e.business_rule_event)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<business_rule_event>()
                .HasMany(e => e.business_rule_event_extd_info)
                .WithRequired(e => e.business_rule_event)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<business_rule_event>()
                .HasMany(e => e.business_rule_event_key)
                .WithRequired(e => e.business_rule_event)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<business_rule_event_class>()
                .Property(e => e.rule_class_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event_extd_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event_extd_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event_key>()
                .Property(e => e.key_value)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event_key>()
                .Property(e => e.display_value)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event_key>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_event_key>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.log_action)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.rule_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.rule_manager_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.rule_assembly_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.run_type)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.xml)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.return_value)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.return_message)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.update_class_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.update_field_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.update_field_value)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_rmb>()
                .Property(e => e.rmb_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_rmb>()
                .Property(e => e.rmb_display_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_rmb>()
                .Property(e => e.rmb_description)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_rmb>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_rmb>()
                .Property(e => e.tabpage_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_rmb>()
                .Property(e => e.datawindow_name)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_rmb>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_rmb>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_rmb>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<business_rule_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_locs>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<buy_get_locs>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_locs>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_supplier_redemption_info>()
                .Property(e => e.free_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_supplier_redemption_info>()
                .Property(e => e.free_item_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buy_get_supplier_redemption_info>()
                .Property(e => e.free_item_uom)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_supplier_redemption_info>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_supplier_redemption_info>()
                .Property(e => e.printed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_supplier_redemption_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_supplier_redemption_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_supplier_redemption_info>()
                .Property(e => e.free_item_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.buy_factor_type)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.buy_factor_id)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.buy_item_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.buy_item_uom)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.free_factor_type)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.free_item_factor_id)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.free_item_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.free_item_uom)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.free_item_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.redeem_code)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.enable_item_value)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.auto_add_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.confirm_add_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.buy_same_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.get_same_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.all_locs_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.get_discount_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .Property(e => e.get_discount_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .HasMany(e => e.buy_get_locs)
                .WithRequired(e => e.buy_get_x_rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .HasMany(e => e.invoice_line_rewards_buy_get)
                .WithRequired(e => e.buy_get_x_rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<buy_get_x_rewards_program>()
                .HasMany(e => e.oe_buy_get_rewards)
                .WithRequired(e => e.buy_get_x_rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<buy_list_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<buy_list_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_list_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_list_hdr>()
                .Property(e => e.buy_list_description)
                .IsUnicode(false);

            modelBuilder.Entity<buy_list_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_list_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_customer_item_list>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<buying_trend_customer_item_list>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_earliest_sales_bucket>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<buying_trend_earliest_sales_bucket>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.normal)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.upper_spec_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.lower_spec_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.ad_stat)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.last_bucket_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.mean_bucket_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.stdev_bucket_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.last_each_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_final_form>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_history>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_history>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<buying_trend_history>()
                .Property(e => e.lower_spec_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_history>()
                .Property(e => e.last_bucket_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_history>()
                .Property(e => e.last_each_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.item_description)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.location_name)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.salesrep_name)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.supplier_name)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.product_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.qty_shipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<buying_trend_invoice_line_bucket>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.tank_name)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.tank_size_gal)
                .HasPrecision(19, 9);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.tank_size_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.cal_default_delivery)
                .HasPrecision(19, 9);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.cal_default_percent_basis)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.sch_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.last_delivery_gal)
                .HasPrecision(19, 9);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.next_delivery_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.guage_uom)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.reading)
                .HasPrecision(19, 9);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.call_in)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.tank_monitor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.calculate_date_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.average_gallons_per_day)
                .HasPrecision(9, 0);

            modelBuilder.Entity<calendar_based_delivery>()
                .Property(e => e.pump_from_drum_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_delivery>()
                .HasMany(e => e.calendar_based_reading_hist)
                .WithRequired(e => e.calendar_based_delivery)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<calendar_based_reading_hist>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<calendar_based_reading_hist>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_reading_hist>()
                .Property(e => e.tank_name)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_reading_hist>()
                .Property(e => e.reading)
                .HasPrecision(19, 9);

            modelBuilder.Entity<calendar_based_reading_hist>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_based_reading_hist>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_measure_10005>()
                .Property(e => e.calendar_measure_name)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_measure_10005>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<calendar_measure_10005>()
                .Property(e => e.calendar_measure_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<call_category>()
                .Property(e => e.category_id)
                .IsUnicode(false);

            modelBuilder.Entity<call_category>()
                .Property(e => e.category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<call_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<call_log>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<call_log>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<call_log>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<call_log>()
                .Property(e => e.call_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<call_log>()
                .Property(e => e.category_id)
                .IsUnicode(false);

            modelBuilder.Entity<call_log>()
                .Property(e => e.source_id)
                .IsUnicode(false);

            modelBuilder.Entity<call_log>()
                .Property(e => e.disposition)
                .IsUnicode(false);

            modelBuilder.Entity<call_log>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<call_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<call_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<canadian_customs_form>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<canadian_customs_form>()
                .Property(e => e.country_of_origin)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<canadian_customs_form>()
                .Property(e => e.harmonized_code)
                .IsUnicode(false);

            modelBuilder.Entity<canadian_customs_form>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<canadian_customs_form>()
                .Property(e => e.transaction_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<canadian_customs_form>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<canadian_customs_form>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<canadian_customs_form>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<canadian_customs_form>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_tag>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cardlock_tax_type>()
                .Property(e => e.cardlock_tax_code)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cardlock_tax_type>()
                .Property(e => e.cardlock_tax_desc)
                .IsUnicode(false);

            modelBuilder.Entity<cardlock_tax_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cardlock_tax_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cardlock_tax_type>()
                .Property(e => e.cardlock_tax_state)
                .IsUnicode(false);

            modelBuilder.Entity<cardlock_tax_type>()
                .Property(e => e.cardlock_tax_county)
                .IsUnicode(false);

            modelBuilder.Entity<cardlock_tax_type>()
                .Property(e => e.cardlock_tax_city)
                .IsUnicode(false);

            modelBuilder.Entity<cardlock_tax_type>()
                .Property(e => e.cardlock_other)
                .IsUnicode(false);

            modelBuilder.Entity<carrier>()
                .Property(e => e.ext_tax_freight_tax_code_in)
                .IsUnicode(false);

            modelBuilder.Entity<carrier>()
                .Property(e => e.ext_tax_freight_tax_code_out)
                .IsUnicode(false);

            modelBuilder.Entity<carrier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_194>()
                .Property(e => e.id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_194>()
                .Property(e => e.np_carrier_id)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_2164>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_2164>()
                .Property(e => e.insurance_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_2164>()
                .Property(e => e.per_dollar_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_2164>()
                .Property(e => e.edn_delivery_type_cd)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_2164>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_2164>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_analytics_contract_pricing>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_analytics_contract_pricing>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_contract_pricing>()
                .Property(e => e.committed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_analytics_contract_pricing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_analytics_contract_pricing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_analytics_contract_pricing>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_analytics_contract_pricing>()
                .Property(e => e.cust_rebate_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.committed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_analytics_item_pricing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_bill_of_lading>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_bill_of_lading>()
                .Property(e => e.bill_of_lading_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_bill_of_lading>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_bill_of_lading>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_customer>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_contract_customer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_customer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_customer>()
                .Property(e => e.apply_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.contract_id)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.contract_desc)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.contract_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.exclude_customer_list_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.mandatory_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.margin_sharing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.apply_to_ship_to_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .Property(e => e.mandatory_rebate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .HasMany(e => e.carrier_analytics_contract_pricing)
                .WithRequired(e => e.carrier_contract_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .HasMany(e => e.carrier_contract_customer)
                .WithRequired(e => e.carrier_contract_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .HasMany(e => e.carrier_contract_line)
                .WithRequired(e => e.carrier_contract_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .HasMany(e => e.carrier_contract_ship_to)
                .WithRequired(e => e.carrier_contract_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_contract_hdr>()
                .HasMany(e => e.carrier_contract_z_line)
                .WithRequired(e => e.carrier_contract_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.rebate_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.master_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.area_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.dist_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.participation_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.max_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.claim_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.wquote_number)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_line>()
                .Property(e => e.cust_rebate_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_line>()
                .HasMany(e => e.carrier_contract_qty_used_hist)
                .WithOptional(e => e.carrier_contract_line)
                .HasForeignKey(e => e.new_cost_carrier_contract_line_uid);

            modelBuilder.Entity<carrier_contract_line>()
                .HasMany(e => e.carrier_contract_qty_used_hist1)
                .WithOptional(e => e.carrier_contract_line1)
                .HasForeignKey(e => e.old_cost_carrier_contract_line_uid);

            modelBuilder.Entity<carrier_contract_line>()
                .HasMany(e => e.invoice_line)
                .WithOptional(e => e.carrier_contract_line)
                .HasForeignKey(e => e.cost_carrier_contract_line_uid);

            modelBuilder.Entity<carrier_contract_line>()
                .HasMany(e => e.invoice_line1)
                .WithOptional(e => e.carrier_contract_line1)
                .HasForeignKey(e => e.price_carrier_contract_line_uid);

            modelBuilder.Entity<carrier_contract_line>()
                .HasMany(e => e.oe_line)
                .WithOptional(e => e.carrier_contract_line)
                .HasForeignKey(e => e.cost_carrier_contract_line_uid);

            modelBuilder.Entity<carrier_contract_line>()
                .HasMany(e => e.oe_line1)
                .WithOptional(e => e.carrier_contract_line1)
                .HasForeignKey(e => e.price_carrier_contract_line_uid);

            modelBuilder.Entity<carrier_contract_qty_used_hist>()
                .Property(e => e.old_qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_qty_used_hist>()
                .Property(e => e.old_qty_canceled)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_qty_used_hist>()
                .Property(e => e.old_prior_contract_qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_qty_used_hist>()
                .Property(e => e.new_qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_qty_used_hist>()
                .Property(e => e.new_qty_canceled)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_qty_used_hist>()
                .Property(e => e.new_prior_contract_qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_qty_used_hist>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_qty_used_hist>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_ship_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_ship_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_ship_to>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_contract_ship_to>()
                .Property(e => e.apply_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.type_of_sale)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.gross_margin)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.price_mult_1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.reduction_rate_1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.price_mult_2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.reduction_rate_2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.price_mult_3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.approved_unit_claim_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.approved_sell_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_z_line>()
                .Property(e => e.approved_profit_margin)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_contract_z_line>()
                .HasMany(e => e.invoice_line)
                .WithOptional(e => e.carrier_contract_z_line)
                .HasForeignKey(e => e.cost_carrier_contract_z_line_uid);

            modelBuilder.Entity<carrier_contract_z_line>()
                .HasMany(e => e.oe_line)
                .WithOptional(e => e.carrier_contract_z_line)
                .HasForeignKey(e => e.cost_carrier_contract_z_line_uid);

            modelBuilder.Entity<carrier_cube_factor>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_cube_factor>()
                .Property(e => e.core_a)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_cube_factor>()
                .Property(e => e.core_b)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_cube_factor>()
                .Property(e => e.non_core_c)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_cube_factor>()
                .Property(e => e.non_core_d)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_cube_factor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_cube_factor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_cube_modifier>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_cube_modifier>()
                .Property(e => e.minimum_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_cube_modifier>()
                .Property(e => e.freight_cube_modifier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_cube_modifier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_cube_modifier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_data>()
                .HasMany(e => e.carrier_data_detail)
                .WithRequired(e => e.carrier_data)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_data>()
                .HasMany(e => e.carrier_data_x_package)
                .WithRequired(e => e.carrier_data)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_data>()
                .HasMany(e => e.carrier_data_x_shipment)
                .WithRequired(e => e.carrier_data)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_data_detail>()
                .Property(e => e.detail_value)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_data_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_data_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_data_x_package>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_data_x_package>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_data_x_shipment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_data_x_shipment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_info>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_integration_direct_ship_data>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_integration_direct_ship_data>()
                .Property(e => e.po_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_integration_direct_ship_data>()
                .Property(e => e.ext_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_integration_direct_ship_data>()
                .Property(e => e.serial_no_list)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_integration_direct_ship_data>()
                .Property(e => e.applied_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_integration_direct_ship_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_integration_direct_ship_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_integration_direct_ship_data>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_integration_direct_ship_data>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_package_type>()
                .Property(e => e.carrier_package_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_package_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_package_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_pick_location>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_pick_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_pick_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_pick_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_pick_location>()
                .HasMany(e => e.carrier_pick_location_zone)
                .WithRequired(e => e.carrier_pick_location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_pick_location_zone>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_pick_location_zone>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_priority>()
                .Property(e => e.carrier_priority_id)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_priority>()
                .Property(e => e.carrier_priority_desc)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_priority>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<carrier_priority>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_priority>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_provider_type>()
                .Property(e => e.carrier_provider_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_provider_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_provider_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_provider_type>()
                .HasMany(e => e.carrier_package_type)
                .WithRequired(e => e.carrier_provider_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_provider_type>()
                .HasMany(e => e.carrier_service_type)
                .WithRequired(e => e.carrier_provider_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<carrier_reference>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_reference>()
                .Property(e => e.scac)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_reference>()
                .Property(e => e.carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_reference>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_reference>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_reference>()
                .HasMany(e => e.po_acknowledgement_line)
                .WithOptional(e => e.carrier_reference)
                .HasForeignKey(e => e.asn_carrier_reference_id);

            modelBuilder.Entity<carrier_service_type>()
                .Property(e => e.carrier_service_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_service_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_service_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_ship_method>()
                .Property(e => e.carrier_ship_method_id)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_ship_method>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_ship_method>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_ship_method>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_ship_via>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_ship_via>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_ship_via>()
                .Property(e => e.ship_via_desc)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_ship_via>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_ship_via>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_shipping_charge>()
                .Property(e => e.monetary_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<carrier_shipping_charge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_shipping_charge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_shipping_document>()
                .Property(e => e.document_contents)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_shipping_document>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_shipping_document>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_size_category_cube_factor>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_size_category_cube_factor>()
                .Property(e => e.very_tiny)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_size_category_cube_factor>()
                .Property(e => e.tiny)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_size_category_cube_factor>()
                .Property(e => e.small)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_size_category_cube_factor>()
                .Property(e => e.medium)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_size_category_cube_factor>()
                .Property(e => e.large)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_size_category_cube_factor>()
                .Property(e => e.huge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_size_category_cube_factor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_size_category_cube_factor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_size_category_cube_modifier>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_size_category_cube_modifier>()
                .Property(e => e.minimum_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_size_category_cube_modifier>()
                .Property(e => e.freight_cube_modifier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<carrier_size_category_cube_modifier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_size_category_cube_modifier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_x_freight_code>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<carrier_x_freight_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<carrier_x_freight_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.file_path)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.digital_seal)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.cfd_certificate_sn)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.cfd_certificate)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.cfd_original_string)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.tfd_version)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.tfd_uuid)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.tfd_certified_timestamp)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.sat_seal)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.sat_certificate_sn)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.tfd_original_string)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.barcode_file)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.xml_certified)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.rfc_emisor_cancelation)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.date_cancellation_string)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.cancellation_uuid)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.cancellation_uuid_status)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.cancellation_codigo_estatus)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.cancellation_es_cancelable)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.cancellation_estatus)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_cfdi>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.document_no)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.document_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.value_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.currency_code)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.customs_duty_code)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.international_trade_code)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_detail>()
                .Property(e => e.pedimento_number)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.cartaporte_desc)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.issue_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.international_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.total_distance_traveled)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.distance_traveled_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.printed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.country_origin_destination)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .Property(e => e.weight_uom)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .HasMany(e => e.cartaporte_cfdi)
                .WithRequired(e => e.cartaporte_hdr)
                .HasForeignKey(e => e.cartaporte_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .HasMany(e => e.cartaporte_detail)
                .WithRequired(e => e.cartaporte_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .HasMany(e => e.cartaporte_hdr_x_driver)
                .WithRequired(e => e.cartaporte_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .HasMany(e => e.cartaporte_hdr_x_location)
                .WithRequired(e => e.cartaporte_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .HasMany(e => e.cartaporte_hdr_x_trailer)
                .WithRequired(e => e.cartaporte_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cartaporte_hdr>()
                .HasMany(e => e.cartaporte_hdr_x_document)
                .WithRequired(e => e.cartaporte_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cartaporte_hdr_x_document>()
                .Property(e => e.document_no)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_document>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_document>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_driver>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_driver>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_driver>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.location_name)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.destination_rfc_no)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.registration_id)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.registration_country_code)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.neighborhood_code)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.locality_code)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.city_code)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.distance_traveled)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_trailer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cartaporte_hdr_x_trailer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.cash_drawer_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.cash_drawer_description)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.current_sequence_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.opening_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.withdrawals)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.deposits)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.current_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.drawer_open)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.cash_on_hand_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.cash_card_load)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.loc_id_for_branch_conflict)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_drawer>()
                .Property(e => e.default_close_branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer>()
                .HasMany(e => e.cash_drawer_default_user)
                .WithRequired(e => e.cash_drawer)
                .HasForeignKey(e => new { e.cash_drawer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cash_drawer>()
                .HasMany(e => e.cash_drawer_transaction)
                .WithRequired(e => e.cash_drawer)
                .HasForeignKey(e => new { e.cash_drawer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cash_drawer>()
                .HasMany(e => e.cash_drawer_history)
                .WithRequired(e => e.cash_drawer)
                .HasForeignKey(e => new { e.cash_drawer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cash_drawer>()
                .HasMany(e => e.remittances)
                .WithRequired(e => e.cash_drawer)
                .HasForeignKey(e => new { e.cash_drawer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cash_drawer>()
                .HasMany(e => e.users_x_cash_drawer)
                .WithRequired(e => e.cash_drawer)
                .HasForeignKey(e => new { e.cash_drawer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cash_drawer_default_user>()
                .Property(e => e.cash_drawer_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_default_user>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_default_user>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_default_user>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_default_user>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.cash_drawer_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.sequence_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.starting_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.closing_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.withdraw_total)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.deposit_total)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.deposit_number)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.cash_on_hand_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_history>()
                .Property(e => e.total_cash_card_loads)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.cash_drawer_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.sequence_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.transaction_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.transaction_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.cc_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<cash_drawer_transaction>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.source_company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.source_bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.source_transfer_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.source_transfer_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.source_bank_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.source_exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.destination_company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.destination_bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.destination_transfer_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.destination_transfer_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.destination_bank_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.destination_exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.source_gl_transaction_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.destination_gl_transaction_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.source_exch_rate_manual_entry)
                .HasPrecision(19, 6);

            modelBuilder.Entity<cash_transfer>()
                .Property(e => e.dest_exch_rate_manual_entry)
                .HasPrecision(19, 6);

            modelBuilder.Entity<castrol_trans_summary>()
                .Property(e => e.import_or_export)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<castrol_trans_summary>()
                .Property(e => e.error)
                .IsUnicode(false);

            modelBuilder.Entity<castrol_trans_summary>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<castrol_trans_summary>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<category>()
                .Property(e => e.category_id)
                .IsUnicode(false);

            modelBuilder.Entity<category>()
                .Property(e => e.category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<category>()
                .HasMany(e => e.category_x_activity)
                .WithRequired(e => e.category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<category_x_activity>()
                .Property(e => e.activity_id)
                .IsUnicode(false);

            modelBuilder.Entity<category_x_activity>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<category_x_activity>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cc_columns>()
                .Property(e => e.column_name)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cc_columns>()
                .Property(e => e.column_description)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cc_payment_type_x_processor>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cc_payment_type_x_processor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cc_payment_type_x_processor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cc_payment_type_x_processor>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cc_processor_x_location>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cc_processor_x_location>()
                .Property(e => e.location_id)
                .IsUnicode(false);

            modelBuilder.Entity<cc_processor_x_location>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cc_processor_x_location>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cc_processor_x_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cc_processor_x_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cc_processor_x_tripos_instance>()
                .Property(e => e.tripos_instance_id)
                .IsUnicode(false);

            modelBuilder.Entity<cc_processor_x_tripos_instance>()
                .Property(e => e.use_tripos_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cc_processor_x_tripos_instance>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cc_processor_x_tripos_instance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cc_tables>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<cc_tables>()
                .Property(e => e.table_description)
                .IsUnicode(false);

            modelBuilder.Entity<cc_tables>()
                .HasMany(e => e.cc_columns)
                .WithRequired(e => e.cc_tables)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cell_definition>()
                .Property(e => e.fin_report_id)
                .IsUnicode(false);

            modelBuilder.Entity<cell_definition>()
                .Property(e => e.cell)
                .IsUnicode(false);

            modelBuilder.Entity<cell_definition>()
                .Property(e => e.field)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cell_definition>()
                .Property(e => e.column_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cell_definition>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cell_definition>()
                .Property(e => e.account_mask)
                .IsUnicode(false);

            modelBuilder.Entity<cell_range>()
                .Property(e => e.fin_report_id)
                .IsUnicode(false);

            modelBuilder.Entity<cell_range>()
                .Property(e => e.cell)
                .IsUnicode(false);

            modelBuilder.Entity<cell_range>()
                .Property(e => e.from_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cell_range>()
                .Property(e => e.thru_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cell_range>()
                .Property(e => e.add_subtract)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cell_range>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_order_import>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<centeron_order_import>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_order_import>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<centeron_order_import>()
                .Property(e => e.reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_order_import>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<centeron_order_import>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_order_import>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.release_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.order_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.ref_number)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.back_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.pickup_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.site_name)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.site_group_name)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.warehouse_number)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.address1)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.address2)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.zip)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.product_name)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.product_code)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.unit_measure)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.product_class)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.product_cost)
                .HasPrecision(18, 4);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.product_price)
                .HasPrecision(18, 4);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_export>()
                .Property(e => e.route_code)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_import>()
                .Property(e => e.route_code)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_import>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_import>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_import>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_route_import>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_tank_monitor>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<centeron_tank_monitor>()
                .Property(e => e.tank_name)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_tank_monitor>()
                .Property(e => e.inv_mast_uid)
                .HasPrecision(19, 0);

            modelBuilder.Entity<centeron_tank_monitor>()
                .Property(e => e.tank_reading_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<centeron_tank_monitor>()
                .Property(e => e.tank_reading_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<centeron_tank_monitor>()
                .Property(e => e.tank_id)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_tank_monitor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<centeron_tank_monitor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<certification_level>()
                .Property(e => e.certification_level_id)
                .IsUnicode(false);

            modelBuilder.Entity<certification_level>()
                .Property(e => e.certification_level_desc)
                .IsUnicode(false);

            modelBuilder.Entity<certification_level>()
                .Property(e => e.over_dealer_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<certification_level>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<certification_level>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_payment_receipts_line>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cfdi_payment_receipts_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_payment_receipts_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_type_mx>()
                .Property(e => e.cfdi_type_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_type_mx>()
                .Property(e => e.cfdi_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_type_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_type_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_type_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<cfdi_type_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_usage_mx>()
                .Property(e => e.cfdi_usage_cd)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_usage_mx>()
                .Property(e => e.cfdi_usage_desc)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_usage_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_usage_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_usage_mx>()
                .Property(e => e.use_for_person_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_usage_mx>()
                .Property(e => e.use_for_company_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cfdi_usage_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<cfdi_usage_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.account_desc)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.account_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.maintain_encumbrances)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.account_information)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .Property(e => e.doc_link_smart_form_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.account_x_currency)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.apinv_hdr)
                .WithOptional(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.terms_taken_account, e.company_no });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.balances_reporting_curr)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.bank_accounts)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.gl_account_no, e.company_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.branches)
                .WithOptional(e => e.chart_of_accts1)
                .HasForeignKey(e => new { e.labor_billback_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cash_drawer)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.cash_on_hand_account_number, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cash_drawer_history)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.cash_on_hand_account_number, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.chart_of_accts_edi)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.acct_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.companies)
                .WithOptional(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.default_sales_tax_payable_acct, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.companies1)
                .WithOptional(e => e.chart_of_accts1)
                .HasForeignKey(e => new { e.retail_delivery_fee_payable_acct, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.company_ext_tax_gl_by_state)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.crews)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.labor_cogs_account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.crews1)
                .WithRequired(e => e.chart_of_accts1)
                .HasForeignKey(e => new { e.labor_revenue_account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign)
                .WithOptional(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.advance_bill_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign1)
                .WithOptional(e => e.chart_of_accts1)
                .HasForeignKey(e => new { e.allowed_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign2)
                .WithOptional(e => e.chart_of_accts2)
                .HasForeignKey(e => new { e.ar_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign3)
                .WithOptional(e => e.chart_of_accts3)
                .HasForeignKey(e => new { e.brokerage_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign4)
                .WithOptional(e => e.chart_of_accts4)
                .HasForeignKey(e => new { e.cos_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign5)
                .WithOptional(e => e.chart_of_accts5)
                .HasForeignKey(e => new { e.deferred_revenue_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign6)
                .WithOptional(e => e.chart_of_accts6)
                .HasForeignKey(e => new { e.finance_chg_revenue_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign7)
                .WithOptional(e => e.chart_of_accts7)
                .HasForeignKey(e => new { e.freight_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign8)
                .WithOptional(e => e.chart_of_accts8)
                .HasForeignKey(e => new { e.pending_payment_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign9)
                .WithOptional(e => e.chart_of_accts9)
                .HasForeignKey(e => new { e.revenue_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.cust_defaults_foreign10)
                .WithOptional(e => e.chart_of_accts10)
                .HasForeignKey(e => new { e.terms_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.customer_tpw)
                .WithOptional(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.tpw_deferred_cogs_account, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.customer_tpw1)
                .WithOptional(e => e.chart_of_accts1)
                .HasForeignKey(e => new { e.tpw_deferred_rebate_account, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.customer_tpw2)
                .WithOptional(e => e.chart_of_accts2)
                .HasForeignKey(e => new { e.tpw_deferred_revenue_account, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.eco_fee_code)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.financial_report_row_x_acct)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.freight_code)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.revenue_account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.intercompany_acct)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.account, e.from_company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.inventory_defaults)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.asset_account, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.jurisdiction_acct)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.gl_account_no, e.company_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.labors)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.labor_cogs_account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.labors1)
                .WithRequired(e => e.chart_of_accts1)
                .HasForeignKey(e => new { e.labor_revenue_account_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.locations)
                .WithOptional(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.sales_tax_payable_gl_account, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.sales_market_group)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.cos_account, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.sales_market_group1)
                .WithRequired(e => e.chart_of_accts1)
                .HasForeignKey(e => new { e.revenue_account, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.stages)
                .WithOptional(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.stage_wip_account_number, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.vendors)
                .WithOptional(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.ap_account_no, e.company_id });

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.vendor_defaults)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.ap_account_number, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts>()
                .HasMany(e => e.voucher_purchase_acct)
                .WithRequired(e => e.chart_of_accts)
                .HasForeignKey(e => new { e.purchase_acct_no, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<chart_of_accts_edi>()
                .Property(e => e.acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts_edi>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts_edi>()
                .Property(e => e.sac_id)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts_edi>()
                .Property(e => e.sac_desc)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts_edi>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<chart_of_accts_edi>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.licence_number)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.birth_date)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.alternate_id)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.micr_line)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.bypass_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.eft_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.aba_number)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.retrieval_ref_number)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.batch_number)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<check_payment_details>()
                .Property(e => e.eft_ref_number)
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.class_type)
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.class_number)
                .HasPrecision(3, 0);

            modelBuilder.Entity<_class>()
                .Property(e => e.class_id)
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.class_description)
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.logo_path_filename)
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.export_class_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.fuel_surcharge_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<_class>()
                .Property(e => e.max_fuel_charge_per_ship)
                .HasPrecision(19, 4);

            modelBuilder.Entity<_class>()
                .Property(e => e.affinity_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.harmonized_code)
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .Property(e => e.avail_for_cycle_count_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<_class>()
                .HasMany(e => e.alternate_oe_settings)
                .WithOptional(e => e._class)
                .HasForeignKey(e => new { e.class_type, e.class_number, e.class_id });

            modelBuilder.Entity<_class>()
                .HasMany(e => e.item_category_x_class)
                .WithRequired(e => e._class)
                .HasForeignKey(e => new { e.class_type, e.class_number, e.class_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<class_name_x_form_code>()
                .Property(e => e.class_name)
                .IsUnicode(false);

            modelBuilder.Entity<class_name_x_form_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<class_name_x_form_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.package_weight)
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.total_charge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.package_surcharge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.handling_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_10004>()
                .Property(e => e.container_id)
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_nfa_1934>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<clippership_return_nfa_1934>()
                .Property(e => e.nfa_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_nfa_1934>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_nfa_1934>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<clippership_return_nfa_1934>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<code_group_p21>()
                .Property(e => e.code_group_description)
                .IsUnicode(false);

            modelBuilder.Entity<code_group_p21>()
                .Property(e => e.row_status_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<code_group_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<code_p21>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<code_p21>()
                .Property(e => e.code_description)
                .IsUnicode(false);

            modelBuilder.Entity<code_p21>()
                .Property(e => e.row_status_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<code_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<code_p21>()
                .Property(e => e.code_sub_description)
                .IsUnicode(false);

            modelBuilder.Entity<code_x_code_group_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<code_x_code_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_message_queue>()
                .Property(e => e.data)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_message_queue>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_message_queue>()
                .Property(e => e.error_message)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_message_queue>()
                .Property(e => e.is_processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_message_queue>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_message_queue>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_settings>()
                .Property(e => e.collab_setting_name)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_settings>()
                .Property(e => e.collab_setting_value)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_settings>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_settings>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_subscriber>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_subscriber>()
                .Property(e => e.collaborate_secret)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_subscriber>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_subscriber>()
                .Property(e => e.subscriber_mode)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_subscriber>()
                .Property(e => e.webhook_uri)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_subscriber>()
                .Property(e => e.webhook_secret)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_subscriber>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<collaborate_subscriber>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<column>()
                .Property(e => e.fin_report_id)
                .IsUnicode(false);

            modelBuilder.Entity<column>()
                .Property(e => e.column_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<column>()
                .Property(e => e.base_year_offset)
                .HasPrecision(4, 0);

            modelBuilder.Entity<column>()
                .Property(e => e.base_period_offset)
                .HasPrecision(3, 0);

            modelBuilder.Entity<column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<column>()
                .Property(e => e.base_quarter_offset)
                .HasPrecision(4, 0);

            modelBuilder.Entity<column>()
                .HasMany(e => e.cell_definition)
                .WithRequired(e => e.column)
                .HasForeignKey(e => new { e.fin_report_id, e.column_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<comm_defaults_days_overdue>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<comm_defaults_days_overdue>()
                .Property(e => e.percent_forfeiture)
                .HasPrecision(19, 2);

            modelBuilder.Entity<comm_defaults_days_overdue>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<comm_defaults_days_overdue>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<comm_defaults_days_overdue>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.linked_invno)
                .IsUnicode(false);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.linked_lineno)
                .HasPrecision(19, 0);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.total_comm_amt_per_line)
                .HasPrecision(19, 4);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.linked_qtyshipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.sku_comm_amt)
                .HasPrecision(19, 6);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.rmaline_qtyshipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.rmaline_total_comm)
                .HasPrecision(19, 6);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<comm_run_line_rma_linked>()
                .Property(e => e.new_comm_amt_per_rep)
                .HasPrecision(19, 6);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.commission_based_on)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.commission_paid_on)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.paid_on_partial_payments)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.commission_cut_off)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.number_of_days_overdue)
                .HasPrecision(3, 0);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.include_other_charge)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.commission_schedule_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.include_freight_out)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.include_freight_in)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.include_no_charge_invoices)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.reduce_comm_by_terms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.total_profit_threshold)
                .HasPrecision(19, 2);

            modelBuilder.Entity<commission_defaults>()
                .Property(e => e.total_profit_threshold_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.commission_rule_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.commission_rule_desc)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.applies_to)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.commission_based_on)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.negative_commission)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.stock_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.non_stock_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.direct_ship_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.group_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.sales_discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.item_commission_class)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.manufacturing_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.customer_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.sales_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.primary_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.allocated_backorder_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.special_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.other_charge_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.line_threshold)
                .HasPrecision(19, 2);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.line_threshold_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.all_other_dispositions_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.include_manual_invoices_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.new_customer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.new_item_for_customer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.completed_prog_bills_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.apply_to_shipto_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.new_item_for_ship_to_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.apply_to_sb_credit_memo_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .Property(e => e.apply_to_manual_ar_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule>()
                .HasMany(e => e.commission_rule_detail)
                .WithRequired(e => e.commission_rule)
                .HasForeignKey(e => new { e.company_id, e.commission_rule_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<commission_rule>()
                .HasMany(e => e.commission_schedule_detail)
                .WithRequired(e => e.commission_rule)
                .HasForeignKey(e => new { e.company_id, e.commission_rule_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.commission_rule_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.break_number)
                .HasPrecision(4, 0);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.break_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.break_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.factor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.source)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_rule_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.paid_in_full_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.commission_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.commission_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.total_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.terms_taken)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.split_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.commission_schedule_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.sales_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.house_split_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.amount_paid_adjusted)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.percent_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.allowed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.consolidated)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.cons_total_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.cons_total_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.comm_based_on)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.total_profit_threshold)
                .HasPrecision(19, 4);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.total_profit_threshold_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.invoice_eligible_for_commission)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.original_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.calculation_from_split_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.partial_invoice_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.forfeited_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.prior_forfeited_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.edited_commission_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.forfeiture_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.tax_terms_taken)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.commission_override_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.extended_price_no_cnd_adjust)
                .HasPrecision(19, 4);

            modelBuilder.Entity<commission_run>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_exception>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.commission_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.commission_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.original_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.forfeited_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.forfeiture_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.commission_override_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.extended_price_no_cnd_adjust)
                .HasPrecision(19, 4);

            modelBuilder.Entity<commission_run_line>()
                .Property(e => e.rma_linked_commissions)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_line_rule>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<commission_run_line_rule>()
                .Property(e => e.commission_rule_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_line_rule>()
                .Property(e => e.commission_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_line_rule>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_line_rule>()
                .Property(e => e.original_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_line_rule>()
                .Property(e => e.split_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<commission_run_line_rule>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_rule>()
                .Property(e => e.commission_rule_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_rule>()
                .Property(e => e.commission_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<commission_run_rule>()
                .Property(e => e.original_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_run_rule>()
                .Property(e => e.split_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<commission_schedule>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule>()
                .Property(e => e.commission_schedule_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule>()
                .Property(e => e.commission_schedule_desc)
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule>()
                .Property(e => e.commission_schedule_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule>()
                .Property(e => e.inactive)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule>()
                .Property(e => e.applies_to)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule>()
                .HasMany(e => e.commission_defaults)
                .WithOptional(e => e.commission_schedule)
                .HasForeignKey(e => new { e.company_id, e.commission_schedule_id });

            modelBuilder.Entity<commission_schedule>()
                .HasMany(e => e.commission_schedule_detail)
                .WithRequired(e => e.commission_schedule)
                .HasForeignKey(e => new { e.company_id, e.commission_schedule_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<commission_schedule>()
                .HasMany(e => e.salesrep_commission)
                .WithOptional(e => e.commission_schedule)
                .HasForeignKey(e => new { e.company_id, e.commission_schedule_id });

            modelBuilder.Entity<commission_schedule>()
                .HasMany(e => e.salesrep_quota_detail)
                .WithRequired(e => e.commission_schedule)
                .HasForeignKey(e => new { e.company_id, e.commission_schedule_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<commission_schedule_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule_detail>()
                .Property(e => e.commission_schedule_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule_detail>()
                .Property(e => e.commission_rule_id)
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule_detail>()
                .Property(e => e.sort_order)
                .HasPrecision(19, 0);

            modelBuilder.Entity<commission_schedule_detail>()
                .Property(e => e.inactive)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<commission_schedule_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<commodity_code>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<commodity_code>()
                .Property(e => e.commodity_code1)
                .IsUnicode(false);

            modelBuilder.Entity<commodity_code>()
                .Property(e => e.commodity_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<commodity_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<commodity_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.company_name)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.federal_id_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.fiscal_year_end)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.re_price_line_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.pricing_by_location)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_account_length)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_capitalized_overhead)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_freight_in)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.number_of_periods)
                .HasPrecision(3, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.retained_earnings_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.terms_taken_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.home_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_gain_or_loss_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.san)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.group_control_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.intl_san)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gst_paid_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.max_invoice_allowance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<company>()
                .Property(e => e.gst_registration_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.stage_clearing_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.transmitter_control_code)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.foreign_entity_indicator)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.use_branch_accounting)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.branch_segment_in_coa)
                .HasPrecision(2, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_scan_1)
                .HasPrecision(1, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_scan_2)
                .HasPrecision(1, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_scan_3)
                .HasPrecision(1, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_scan_4)
                .HasPrecision(1, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_scan_5)
                .HasPrecision(1, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_scan_6)
                .HasPrecision(1, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.ar_aging_period1)
                .HasPrecision(3, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.ar_aging_period2)
                .HasPrecision(3, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.ar_aging_period3)
                .HasPrecision(3, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.jc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_receipts_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.interbranch_rec_payable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.branch_debit_equal_credit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.fc_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<company>()
                .Property(e => e.fc_grace_days)
                .HasPrecision(19, 4);

            modelBuilder.Entity<company>()
                .Property(e => e.minimum_fc)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.minimum_fc_to_invoice)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.wip_cos_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.compound_fc)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.fc_allowed_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.fc_invoice_class)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.generate_finance_charges)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.fc_allowed_account)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.fc_revenue_account)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.using_encumbrances)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.cost_to_order)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.carrying_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.track_ap_by_branch)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.track_ar_by_branch)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.track_prod_capitalized_oh)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.logo_path_filename)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.commission_expense_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.accrual_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_cost_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_freight_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_qty_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.post_variance_to_avg_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.prorate_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.post_freight_to_avg_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.frl_use_frx)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.frl_acct_mask)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.create_order_based_transfers)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.mark_up_on_transfers)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.mark_up_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.mark_up_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.source_mark_up_account)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.mark_up_source)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.source_other_charge_account)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.destination_mark_up_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.destination_other_charge_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.default_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.landed_cost_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.default_sales_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.edi_export_path)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_freight_expense_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.requisition_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.restocking_fee_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.signature_path)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.lot_cost_change_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.rebate_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.rebate_allowance_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.allow_discounts_on_partial_pmt)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.auto_apply_avail_discounts)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.disassembly_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.tpcx_member)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.vendor_consign_inv_offset_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.rma_receipt_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.rma_adjustment_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.rma_default_rts_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.rma_auto_return_to_stock)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.inventory_adjustment_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.returned_check_fee_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.allowable_invoice_variance)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.invoice_variance_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.create_prepaid_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.tag_suffix)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.rf_scanner_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.default_arpymt_bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.default_arpymt_branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.carrier_insurance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.post_lc_variance_to_avg_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.restock_fee_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.restock_fee_account)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.coupon_clearing_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.disassembly_cost_var_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.coupon_issued_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.job_id_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.track_lost_sales_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.restocking_fee_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.company_mac_rounding_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.special_inventory_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_in_vessel_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.inv_in_transit_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.commission_receivable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.commission_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.commission_allowance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.lot_bill_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.assembly_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_acct_for_applied_labor)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_acct_for_labor_cos)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_acct_for_freight_clearing)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.currency_bank_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.assembly_cost_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.post_commission_accruals_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.ups_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.ups_olt_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.ups_olt_password)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.ups_olt_access_key)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.duns_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_acct_longterm_contracts)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.sp_alloc_from_stock_var_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_acct_for_labor_wip)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.prod_auto_transfer_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.coupon_allowed_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.accept_pymts_with_no_inv_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.accept_incorrect_inv_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.accept_partial_payment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.pedigree_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.validate_commission_split_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.duns_number)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.vertex_enabled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.default_sales_tax_payable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.pall_rep_number)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.intrastat_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.use_int_address_format_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.use_cogs_acct_for_oci_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.restocking_fee_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.use_quote_revision_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.summary_commodity_code)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.company_taxgroup_by_zipcode_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.service_user_number)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.cfn_gas_cogs_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.cfn_receivable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.cfn_gas_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.round_unit_prices_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.avalara_enabled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.iva_enabled)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.track_inv_on_water_branch_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.freight_wip_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.pending_warranty_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.default_customer_tax_class)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.borrowing_rate_to_carry)
                .HasPrecision(19, 4);

            modelBuilder.Entity<company>()
                .Property(e => e.invoice_only_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.external_tax_company_code)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.ar_to_ap_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.gl_foreign_cardlock_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.price_rounding_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.over_under_rounding_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.cfn_diesel_cogs_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.cfn_diesel_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.future_cost_default_from_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company>()
                .Property(e => e.edit_tracking_number_flag)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.rebate_cogs_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.fillable_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.average_pretax_profit)
                .HasPrecision(19, 4);

            modelBuilder.Entity<company>()
                .Property(e => e.enable_multi_currency_payments)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.currency_clearing_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.broker_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.warranty_rma_receipt_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.warr_inv_receipts_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.traffic_manager_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.pro_forma_signature_path)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.pro_forma_signature_name)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.cost_and_revenue_based_on_salesrep_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.remnant_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.sb_vendor_credit_offset_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.ta_cylinder_rental_rev_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.ta_equipment_rental_rev_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.use_xfersrcloc_revacct_lc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.xfersrcloc_revenue_acct_for_lc)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.use_dimensions)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.inventory_wip_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.other_charge_wip_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.zone_cost_exchange_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.zone_cost_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.show_vat_per_inv_line_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.fixed_gross_profit_margin_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company>()
                .Property(e => e.damaged_inventory_expense_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.tax_on_progress_bill_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.rental_expense_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.dealer_comm_tax_class)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.quickship_url)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.einvoice_path)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .Property(e => e.retail_delivery_fee_payable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.account_group_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.adjustment_criteria)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.ar_receipts)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.ar_receipts_detail)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.asb_call_criteria)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.bank_accounts_reconciliation)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.bin_type)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.bin_zone_group)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.boxes)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.branches)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.carrier_contract_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cartaporte_cfdi)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cartaporte_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cash_transfer)
                .WithRequired(e => e.company)
                .HasForeignKey(e => e.destination_company_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cash_transfer1)
                .WithRequired(e => e.company1)
                .HasForeignKey(e => e.source_company_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cc_processor_x_location)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.comm_defaults_days_overdue)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasOptional(e => e.commission_defaults)
                .WithRequired(e => e.company);

            modelBuilder.Entity<company>()
                .HasMany(e => e.commission_rule)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.commission_rule_detail)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.commission_schedule)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.commission_schedule_detail)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.commodity_code)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.trailers)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.creditcard_proc_comp_user)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_x_dimension)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_111)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_322)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_agent)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_ar_info)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_attachments)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_cfdi_configuration)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_cost_var_info)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_direct_ship)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_distranet_info)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_edi_setting)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_eft_options)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_ext_tax_nexus_state)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_form_template)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_inv_no_display)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_iva_tax)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_language)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_lc_search_order)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_lost_sales)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_price_rounding_rules)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_so_options)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_strategic_pricing)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_tax_registration)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_trade)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_wit)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.company_x_oe_loc)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.users_x_company)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.consolidated_picking_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.contract_x_contract_class)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.coop_gl_account)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.corp_id)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.crews)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cube_factor)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cube_modifier)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.currency_variance_account)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cust_defaults_email_defaults)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cust_defaults_labels)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cust_defaults_merge_cust)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cust_defaults_foreign)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cust_defaults_terms_acct)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.customers)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.customer_coop_advert_allowance)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.customer_merge_cust)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.cust_part_no_group_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.degree_days)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.demand_period)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.discount_group_defaults)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.dispatcher_pricing_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.disputed_voucher_reason)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.epf_payment_type_mapping)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.export_matrix)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.freight_handling_break)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.freightquote_package_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.frl_seg_ctrl)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.frl_seg_desc)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.intercompany_acct)
                .WithRequired(e => e.company)
                .HasForeignKey(e => e.to_company_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.intrastat_info)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.inv_cost_edit)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.inv_excise_tax)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.inv_mast_strategic_pricing)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.inv_mast_trade)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.inv_mast_x_company)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.inv_mast_x_product_service_mx)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.inventory_movement)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.inventory_movement_error_log)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.inv_mast_default_x_company)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.invoice_cfdi)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.invoice_cfdi_x_voucher)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.invoice_iva_tax)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.invoiced_cfdi_certification)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.item_count_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.item_price_level_update_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.job_control_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.job_site)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.journal_type_mx)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.landed_cost_category_x_company)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.labor_type)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.landed_cost_driver)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.location_allocation_path)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.locations)
                .WithRequired(e => e.company)
                .HasForeignKey(e => e.company_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.location_form_template)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.location_rental)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.lost_sales)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.minmax_selection_criteria)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.note_x_company)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.opportunities)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.order_iva_tax)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.p21_integration_x_company)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.partner_program)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.passive_rebate_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.pda_oelist_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.pdaship_delivery_data)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.pending_payments)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.pool_liner_process_defaults)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.price_page_type_x_company)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.price_source_x_company)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.prod_order_line_component)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.prod_order_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.prodorder_shift)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.prodorder_work_center)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.prodorder_calendar)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.prodorder_work_day)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.prorate_reason_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.purchase_acct_group_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.purchase_price_library_detail)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.purchase_pricing_book)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.purchase_price_library)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.quarters)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.rebill_invoice_reason)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.reconciliation_layout_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.restate_accounts_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.review_lockbox_payment_import_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.review_lockbox_payment_import_line)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.salesrep_commission)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.salesrep_notepad)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.salesrep_quota)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.service_center)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.shifts)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.shipping_iva_tax)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.supplier_pricing_detail)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.supplier_pricing)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.tax_group_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.tax_group_line)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.trackabout_truck)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.uom_x_uom_mx)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.vat_code)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.vat_code_group_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.vat_return_wkst)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasOptional(e => e.vendor_defaults)
                .WithRequired(e => e.company);

            modelBuilder.Entity<company>()
                .HasMany(e => e.vendor_rebate)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.voucher_automation_company_settings)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.warranty_claim_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.wip_worksheet_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.wip_worksheet_x_component)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.wireless_trans_audit_hdr)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company>()
                .HasMany(e => e.work_order)
                .WithRequired(e => e.company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<company_111>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_111>()
                .Property(e => e.inv_subtotal_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_111>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_111>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_322>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_322>()
                .Property(e => e.delinquency_notice)
                .IsUnicode(false);

            modelBuilder.Entity<company_322>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_322>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.vat_reg_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.stat_value_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.fiscal_representative)
                .IsUnicode(false);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.fiscal_representative_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.eori_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_agent>()
                .Property(e => e.ioss_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_ar_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_ar_info>()
                .Property(e => e.use_mexican_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_ar_info>()
                .Property(e => e.invoice_form_name)
                .IsUnicode(false);

            modelBuilder.Entity<company_ar_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_ar_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_attachments>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_attachments>()
                .Property(e => e.enable_docstar_integration_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_attachments>()
                .Property(e => e.docstar_site_url)
                .IsUnicode(false);

            modelBuilder.Entity<company_attachments>()
                .Property(e => e.docstar_server_username)
                .IsUnicode(false);

            modelBuilder.Entity<company_attachments>()
                .Property(e => e.docstar_server_password)
                .IsUnicode(false);

            modelBuilder.Entity<company_attachments>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_attachments>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.use_cfdi_flag)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.emisor_rfc)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.sat_certificate_thumbprint)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.cfdi_pac_code)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.cfdi_file_output_path)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.qrcode_flag)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.pac_url)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.pac_key)
                .IsUnicode(false);

            modelBuilder.Entity<company_cfdi_configuration>()
                .Property(e => e.cfdi_timezone_offset)
                .IsUnicode(false);

            modelBuilder.Entity<company_cost_var_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_cost_var_info>()
                .Property(e => e.post_receiving_var_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_cost_var_info>()
                .Property(e => e.std_cost_var_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_cost_var_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_cost_var_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.retail_huge_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.retail_large_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.retail_medium_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.retail_small_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.retail_tiny_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.retail_very_tiny_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.warehouse_huge_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.warehouse_large_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.warehouse_medium_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.warehouse_small_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.warehouse_tiny_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.warehouse_very_tiny_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_cust_size_limits>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_daily_deposit_counter>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_daily_deposit_counter>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_daily_deposit_counter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_direct_ship>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_direct_ship>()
                .Property(e => e.override_revenue)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_direct_ship>()
                .Property(e => e.revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_direct_ship>()
                .Property(e => e.cogs_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_direct_ship>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_direct_ship>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_distranet_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_distranet_info>()
                .Property(e => e.distributor_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_distranet_info>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_distranet_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_distranet_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.san)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.intl_san)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.edi_export_path)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.edi_interchange_id_qualifier)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.edi_interchange_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.application_code)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_edi_setting>()
                .Property(e => e.additional_freight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_eft_options>()
                .Property(e => e.send_remittance_advice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_eft_options>()
                .Property(e => e.default_eft_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<company_eft_options>()
                .Property(e => e.default_remittance_advice_path)
                .IsUnicode(false);

            modelBuilder.Entity<company_eft_options>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_eft_options>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_eft_options>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_ext_tax_gl_by_state>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_ext_tax_gl_by_state>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_ext_tax_gl_by_state>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<company_ext_tax_gl_by_state>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_ext_tax_gl_by_state>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_ext_tax_nexus_state>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_ext_tax_nexus_state>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<company_ext_tax_nexus_state>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_ext_tax_nexus_state>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_form_template>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_form_template>()
                .Property(e => e.purchase_order_filename)
                .IsUnicode(false);

            modelBuilder.Entity<company_form_template>()
                .Property(e => e.inv_return_filename)
                .IsUnicode(false);

            modelBuilder.Entity<company_form_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_form_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_greeting_10016>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_greeting_10016>()
                .Property(e => e.greeting_message)
                .IsUnicode(false);

            modelBuilder.Entity<company_greeting_10016>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_greeting_10016>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_inv_no_display>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_inv_no_display>()
                .Property(e => e.debit_memo_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<company_inv_no_display>()
                .Property(e => e.debit_memo_current_counter)
                .IsUnicode(false);

            modelBuilder.Entity<company_inv_no_display>()
                .Property(e => e.credit_memo_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<company_inv_no_display>()
                .Property(e => e.credit_memo_current_counter)
                .IsUnicode(false);

            modelBuilder.Entity<company_inv_no_display>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_inv_no_display>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_inv_no_display>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.iva_issued_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.iva_collected_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.iva_received_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.iva_paid_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.iva_withheld_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.iva_received_percentage)
                .HasPrecision(19, 2);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.apply_iva_to_terms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_iva_tax>()
                .Property(e => e.auto_apply_terms_on_taxes)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_language>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_language>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_language>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_language>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_lc_search_order>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_lc_search_order>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_lc_search_order>()
                .Property(e => e.application_point_search_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_lost_sales>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_lost_sales>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_lost_sales>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_mac_adjustment>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company_mac_adjustment>()
                .Property(e => e.mac_diff)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_mac_adjustment>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<company_mac_adjustment>()
                .Property(e => e.applied_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_mac_adjustment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_mac_adjustment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_price_rounding_rules>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_price_rounding_rules>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_price_rounding_rules>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.gl_applied_labor_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.gl_labor_cos_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.gl_service_wip_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.gl_service_cos_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.gl_service_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.dflt_warranty_receivable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.dflt_warranty_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.dflt_warranty_allowance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.service_order_adj_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.use_si_rev_cost_acct_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.allowance_liability_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.allowance_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.gl_third_party_service_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_so_options>()
                .Property(e => e.use_parts_rev_cost_acct_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.use_strategic_pricing_flag)
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.data_services_expiration_key)
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.retail_warehouse_separate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.allow_freight_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.allow_free_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.allow_change_library_in_OE_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_strategic_pricing>()
                .Property(e => e.customer_sensitivity_exp_key)
                .IsUnicode(false);

            modelBuilder.Entity<company_tax_registration>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_tax_registration>()
                .Property(e => e.tax_registration_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_tax_registration>()
                .Property(e => e.tax_registration_description)
                .IsUnicode(false);

            modelBuilder.Entity<company_tax_registration>()
                .Property(e => e.default_for_company_flag)
                .IsUnicode(false);

            modelBuilder.Entity<company_tax_registration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_tax_registration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_trade>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_trade>()
                .Property(e => e.se_authorization_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_trade>()
                .Property(e => e.government_program_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_trade>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_trade>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_trade>()
                .Property(e => e.use_nafta_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_uk_mtd_setting>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_uk_mtd_setting>()
                .Property(e => e.make_tax_digital_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_uk_mtd_setting>()
                .Property(e => e.sandbox_mode_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_uk_mtd_setting>()
                .Property(e => e.sandbox_company_vrn)
                .IsUnicode(false);

            modelBuilder.Entity<company_uk_mtd_setting>()
                .Property(e => e.sandbox_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_uk_mtd_setting>()
                .Property(e => e.sandbox_password)
                .IsUnicode(false);

            modelBuilder.Entity<company_uk_mtd_setting>()
                .Property(e => e.production_company_vrn)
                .IsUnicode(false);

            modelBuilder.Entity<company_uk_mtd_setting>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_uk_mtd_setting>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_voucher_variance>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_voucher_variance>()
                .Property(e => e.ds_inv_cost_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_voucher_variance>()
                .Property(e => e.nonstock_inv_cost_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<company_voucher_variance>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_voucher_variance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_wit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_wit>()
                .Property(e => e.duns_no)
                .IsUnicode(false);

            modelBuilder.Entity<company_wit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_wit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_work_day>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_work_day>()
                .Property(e => e.active_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<company_work_day>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_work_day>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_x_dimension>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_x_dimension>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_x_dimension>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_x_oe_loc>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<company_x_oe_loc>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<company_x_oe_loc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<company_x_oe_loc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .Property(e => e.competitor_id)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .Property(e => e.competitor_name)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .Property(e => e.strengths)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .Property(e => e.weaknesses)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .Property(e => e.url)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .Property(e => e.primary_market)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .Property(e => e.other_info)
                .IsUnicode(false);

            modelBuilder.Entity<competitor>()
                .HasMany(e => e.competitor_representative)
                .WithRequired(e => e.competitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<competitor>()
                .HasMany(e => e.opportunities)
                .WithOptional(e => e.competitor)
                .HasForeignKey(e => e.lost_to_competitor_uid);

            modelBuilder.Entity<competitor>()
                .HasMany(e => e.opportunity_competitor)
                .WithRequired(e => e.competitor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<competitor_representative>()
                .Property(e => e.representative_name)
                .IsUnicode(false);

            modelBuilder.Entity<competitor_representative>()
                .Property(e => e.phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<competitor_representative>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<competitor_representative>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<competitor_representative>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<condition>()
                .Property(e => e.condition_id)
                .IsUnicode(false);

            modelBuilder.Entity<condition>()
                .Property(e => e.condition_desc)
                .IsUnicode(false);

            modelBuilder.Entity<condition>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<condition>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<connector_event>()
                .Property(e => e.event_queue)
                .IsUnicode(false);

            modelBuilder.Entity<connector_event>()
                .Property(e => e.validation_view)
                .IsUnicode(false);

            modelBuilder.Entity<connector_event>()
                .Property(e => e.alt_validation_field)
                .IsUnicode(false);

            modelBuilder.Entity<connector_event>()
                .Property(e => e.key_field)
                .IsUnicode(false);

            modelBuilder.Entity<connector_event>()
                .Property(e => e.key_field_datatype)
                .IsUnicode(false);

            modelBuilder.Entity<connector_event>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<connector_event>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<conoco_export_history>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<conoco_export_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<conoco_export_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_log>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cons_ap_log>()
                .Property(e => e.run_status)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_log>()
                .HasMany(e => e.cons_ap_vouchers)
                .WithRequired(e => e.cons_ap_log)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cons_ap_log>()
                .HasMany(e => e.cons_ap_log_voucher_exception)
                .WithRequired(e => e.cons_ap_log)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cons_ap_log_voucher_exception>()
                .Property(e => e.component_voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_log_voucher_exception>()
                .Property(e => e.reason)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_log_voucher_exception>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_log_voucher_exception>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_vendors>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cons_ap_vendors>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_vendors>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_vendors>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_vouchers>()
                .Property(e => e.cons_voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_vouchers>()
                .Property(e => e.component_voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_vouchers>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cons_ap_vouchers>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<consignment_billing_cycle>()
                .Property(e => e.consignment_bc_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<consignment_billing_cycle>()
                .Property(e => e.consignment_bc_desc)
                .IsUnicode(false);

            modelBuilder.Entity<consignment_billing_cycle>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<consignment_billing_cycle>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<consignment_bin_count>()
                .Property(e => e.count_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<consignment_bin_count>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<consignment_bin_count>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_asn_pick_ticket>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<consolidated_asn_pick_ticket>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_asn_pick_ticket>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_invoices_xref>()
                .Property(e => e.consolidated_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_invoices_xref>()
                .Property(e => e.component_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_invoices_xref>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<consolidated_picking_hdr>()
                .Property(e => e.consolidated_pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<consolidated_picking_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_picking_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<consolidated_picking_hdr>()
                .Property(e => e.print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_picking_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_picking_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_picking_hdr>()
                .HasMany(e => e.consolidated_picking_line)
                .WithRequired(e => e.consolidated_picking_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<consolidated_picking_line>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<consolidated_picking_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<consolidated_picking_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_document>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_document>()
                .Property(e => e.document_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_document>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact_document>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_filter_tracking>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_filter_tracking>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_filter_tracking>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contact_filter_tracking>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_filter_tracking>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insurance_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.contact_gender)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insured_gender)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insured_first_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insured_middle_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insured_last_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insured_address)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insured_city)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insured_state)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insured_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.insured_telephone)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.policy_no)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.plan_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.referring_physician)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.diagnostic_code_1)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.diagnostic_code_2)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.diagnostic_code_3)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.diagnostic_code_4)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.claims_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_insurance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_lead_source>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_lead_source>()
                .Property(e => e.source_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_lead_source>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact_lead_source>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_role>()
                .Property(e => e.contact_role_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_role>()
                .Property(e => e.contact_role_desc)
                .IsUnicode(false);

            modelBuilder.Entity<contact_role>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_role>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_salesrep>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_salesrep>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_type>()
                .Property(e => e.contact_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<contact_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_x_oe_hdr>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact_x_oe_hdr>()
                .Property(e => e.primary_contact_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact_x_oe_hdr>()
                .Property(e => e.referring_contact_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact_x_oe_hdr>()
                .Property(e => e.sent_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact_x_oe_hdr>()
                .Property(e => e.selected_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact_x_oe_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact_x_oe_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contactlist>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contactlist>()
                .Property(e => e.list_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contactlist>()
                .Property(e => e.list_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contact>()
                .Property(e => e.salutation)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.first_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.mi)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.last_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.title)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.direct_phone)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.phone_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.direct_fax)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.fax_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.beeper)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.cellular)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.home_address1)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.home_address2)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.home_phone)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.email_address2)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.comment_1)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.comment_2)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.comment_3)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.comment_4)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.salesrep)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.buyer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.schedular)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.login_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.dealer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.url)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.home_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.home_fax)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.employee_vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contact>()
                .Property(e => e.dear_field)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.old_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.employee)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.upper_combined_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.descending_combined_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.direct_watts_number)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.mailstop)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contact>()
                .Property(e => e.address_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.driver)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.inside_salesrep_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.default_branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.technician)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contact>()
                .Property(e => e.fuel_surcharge_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<contact>()
                .Property(e => e.max_fuel_charge_per_ship)
                .HasPrecision(19, 4);

            modelBuilder.Entity<contact>()
                .Property(e => e.sales_manager_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.roadnet_driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.cellular_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.sfdc_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.sfdc_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.sales_agency_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.sales_agency_name)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.driver_enable_gps_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.ads_user)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.salesrep_default_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contact>()
                .Property(e => e.rental_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.email_opt_out)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.driver_rfc_no)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.driver_license_no)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .Property(e => e.driver_registration_id)
                .IsUnicode(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.activity_trans)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.contact_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.asb_call_criteria)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.buyer_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.call_log)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.contact_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.cartaporte_hdr_x_driver)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.driver_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.contact_filter_tracking)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.contact_insurance)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.contactlists)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasOptional(e => e.contacts_335)
                .WithRequired(e => e.contact);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.contacts1)
                .WithOptional(e => e.contact1)
                .HasForeignKey(e => e.sales_manager_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.contacts_x_ship_to)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.contacts_x_supplier)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.cust_defaults)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.salesrep_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.customer_salesrep)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.customer_call)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.customers)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.bill_to_contact_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.customers1)
                .WithOptional(e => e.contact1)
                .HasForeignKey(e => e.salesrep_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.customer_salesrep_location)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.deliveries)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.driver_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.delivery_group)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.driver_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.inv_loc_salesrep)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.inventory_return_hdr)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.buyer_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.inventory_return_hdr1)
                .WithOptional(e => e.contact1)
                .HasForeignKey(e => e.contact_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.job_control_hdr)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.job_contact_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.locations)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.general_manager_salesrep_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.oe_hdr_cardlock)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.contact_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.oe_hdr_salesrep)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.oe_pick_ticket_ups)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.driver_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.oe_line_salesrep)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.opportunity_contact)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.opportunities)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.payment_account_x_contact)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.pda_oelist_hdr)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.pdaship_delivery_data)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.driver_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.po_hdr)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.contact_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.prodorder_technician)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contacts_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.product_group_salesrep)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.salesrep_commission)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.salesrep_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.salesrep_inside)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.salesrep_notepad)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.salesrep_postalcode)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.salesrep_quota)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.salesrep_weboe)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.service_technician)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contacts_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.ship_to_salesrep_location)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.suppliers)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.buyer_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.task_auxiliary_contact)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.contact_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.users)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.contact_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.users_crm)
                .WithRequired(e => e.contact)
                .HasForeignKey(e => e.salesrep_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.vendor_ach)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.payment_contact_id);

            modelBuilder.Entity<contact>()
                .HasMany(e => e.vendor_eft)
                .WithOptional(e => e.contact)
                .HasForeignKey(e => e.remittance_advice_contact_id);

            modelBuilder.Entity<contacts_335>()
                .Property(e => e.id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_335>()
                .Property(e => e.general_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contacts_335>()
                .Property(e => e.lender_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contacts_335>()
                .Property(e => e.owner_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contacts_335>()
                .Property(e => e.subcontractor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contacts_335>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_outlook_sync_criteria>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_outlook_sync_criteria>()
                .Property(e => e.mail_list_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_outlook_sync_criteria>()
                .Property(e => e.user_uid_list)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_outlook_sync_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_outlook_sync_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_outlook_sync_criteria>()
                .Property(e => e.ship_to_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_outlook_sync_criteria>()
                .Property(e => e.customer_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_outlook_sync_criteria>()
                .Property(e => e.contact_role_uid_list)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_ship_to>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_ship_to>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contacts_x_ship_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_ship_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_ship_to>()
                .Property(e => e.pedigree_contact)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_supplier>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_supplier>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<contacts_x_supplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_supplier>()
                .Property(e => e.pedigree_contact)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<container_building>()
                .Property(e => e.container_name)
                .IsUnicode(false);

            modelBuilder.Entity<container_building>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<container_building>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_building>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_building>()
                .Property(e => e.container_packaging_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<container_building_po>()
                .Property(e => e.po_container_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<container_building_po>()
                .Property(e => e.container_uom)
                .IsUnicode(false);

            modelBuilder.Entity<container_building_po>()
                .Property(e => e.container_unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<container_building_po>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_building_po>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_freight_po>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<container_receipts_freight_po>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<container_receipts_freight_po>()
                .Property(e => e.freight_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<container_receipts_freight_po>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_freight_po>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_freight_po>()
                .Property(e => e.manual_edit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<container_receipts_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<container_receipts_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_hdr>()
                .Property(e => e.receiving_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<container_receipts_hdr>()
                .HasMany(e => e.container_receipts_freight_po)
                .WithRequired(e => e.container_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<container_receipts_hdr>()
                .HasMany(e => e.container_receipts_line)
                .WithRequired(e => e.container_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<container_receipts_line>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<container_receipts_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<container_receipts_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_line>()
                .Property(e => e.complete_po_line_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_line>()
                .Property(e => e.transfer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_line>()
                .Property(e => e.wrong_part_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<container_receipts_line>()
                .Property(e => e.exclude_from_landed_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<container_type>()
                .Property(e => e.container_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<container_type>()
                .Property(e => e.container_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<container_type>()
                .Property(e => e.container_area)
                .IsUnicode(false);

            modelBuilder.Entity<container_type>()
                .Property(e => e.container_volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<container_type>()
                .Property(e => e.container_weight_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<container_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<container_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contract_review>()
                .Property(e => e.current_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<contract_review>()
                .Property(e => e.new_contract_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<contract_review>()
                .Property(e => e.new_margin)
                .HasPrecision(19, 9);

            modelBuilder.Entity<contract_review>()
                .Property(e => e.new_markup)
                .HasPrecision(19, 9);

            modelBuilder.Entity<contract_review>()
                .Property(e => e.modified_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contract_review>()
                .Property(e => e.remove_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contract_review>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<contract_review>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<contract_x_contract_class>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<contract_x_contract_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<contract_x_contract_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<coop_gl_account>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<coop_gl_account>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<coop_gl_account>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<coop_gl_account>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_item_sql>()
                .Property(e => e.sql_statement)
                .IsUnicode(false);

            modelBuilder.Entity<copy_item_table>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<copy_item_table>()
                .Property(e => e.table_uid)
                .IsUnicode(false);

            modelBuilder.Entity<copy_item_table>()
                .Property(e => e.key_column)
                .IsUnicode(false);

            modelBuilder.Entity<copy_item_table>()
                .Property(e => e.counter_id)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_argument>()
                .Property(e => e.argument_name)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_argument>()
                .Property(e => e.default_value)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_argument>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_argument>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_argument>()
                .HasMany(e => e.copy_table_data_x_argument_val)
                .WithRequired(e => e.copy_table_data_x_argument)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<copy_table_data_x_argument_val>()
                .Property(e => e.argument_value)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_argument_val>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_argument_val>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_clause>()
                .Property(e => e.from_clause)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_clause>()
                .Property(e => e.where_clause)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_clause>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_clause>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_column>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_column>()
                .Property(e => e.column_value)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_column>()
                .Property(e => e.column_alias_name)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_column>()
                .Property(e => e.column_display_name)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_column>()
                .HasMany(e => e.copy_table_data_x_column_val)
                .WithRequired(e => e.copy_table_data_x_column)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<copy_table_data_x_column_val>()
                .Property(e => e.column_value)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_column_val>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_column_val>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_counter>()
                .Property(e => e.counter_id)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_counter>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_counter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_process>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_process>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_process>()
                .HasMany(e => e.copy_table_data_x_argument)
                .WithRequired(e => e.copy_table_data_x_process)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<copy_table_data_x_process>()
                .HasMany(e => e.copy_table_data_x_table)
                .WithRequired(e => e.copy_table_data_x_process)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<copy_table_data_x_table>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_table>()
                .Property(e => e.source_table_name)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_table>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_table>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_table>()
                .Property(e => e.use_read_uncommitted)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<copy_table_data_x_table>()
                .HasMany(e => e.copy_table_data_x_clause)
                .WithRequired(e => e.copy_table_data_x_table)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<copy_table_data_x_table>()
                .HasMany(e => e.copy_table_data_x_column)
                .WithRequired(e => e.copy_table_data_x_table)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<copy_table_data_x_table>()
                .HasMany(e => e.copy_table_data_x_counter)
                .WithRequired(e => e.copy_table_data_x_table)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<core_class>()
                .Property(e => e.core_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<core_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<core_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<core_status_family_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<core_status_family_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<core_status_family_hdr>()
                .Property(e => e.core_family_id)
                .IsUnicode(false);

            modelBuilder.Entity<core_status_family_hdr>()
                .Property(e => e.core_family_desc)
                .IsUnicode(false);

            modelBuilder.Entity<core_status_family_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<core_status_family_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<core_status_family_hdr>()
                .HasMany(e => e.core_status_family_detail)
                .WithRequired(e => e.core_status_family_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<corp_id>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<corp_id>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<corp_id>()
                .Property(e => e.credit_limit)
                .HasPrecision(19, 4);

            modelBuilder.Entity<corp_id>()
                .Property(e => e.credit_limit_used)
                .HasPrecision(19, 4);

            modelBuilder.Entity<corp_id>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<corp_id>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<corp_id>()
                .Property(e => e.address_name)
                .IsUnicode(false);

            modelBuilder.Entity<counter>()
                .Property(e => e.id)
                .IsUnicode(false);

            modelBuilder.Entity<counter>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<counter>()
                .HasMany(e => e.copy_table_data_x_counter)
                .WithRequired(e => e.counter)
                .HasForeignKey(e => e.counter_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<country>()
                .Property(e => e.two_letter_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<country>()
                .Property(e => e.three_letter_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<country>()
                .Property(e => e.country_name)
                .IsUnicode(false);

            modelBuilder.Entity<country>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<country>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<country>()
                .HasMany(e => e.states)
                .WithRequired(e => e.country)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.country_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.country_name)
                .IsUnicode(false);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.zip_code_format)
                .IsUnicode(false);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.tax_identity_format)
                .IsUnicode(false);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.tax_identity_validation)
                .IsUnicode(false);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.belonging_to_group)
                .IsUnicode(false);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<country_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<county>()
                .Property(e => e.county_name)
                .IsUnicode(false);

            modelBuilder.Entity<county>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<county>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<county>()
                .HasMany(e => e.zip_code)
                .WithRequired(e => e.county)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cpa_grade_notes>()
                .Property(e => e.a_notes)
                .IsUnicode(false);

            modelBuilder.Entity<cpa_grade_notes>()
                .Property(e => e.b_notes)
                .IsUnicode(false);

            modelBuilder.Entity<cpa_grade_notes>()
                .Property(e => e.c_notes)
                .IsUnicode(false);

            modelBuilder.Entity<cpa_grade_notes>()
                .Property(e => e.d_notes)
                .IsUnicode(false);

            modelBuilder.Entity<cpa_grade_notes>()
                .Property(e => e.f_notes)
                .IsUnicode(false);

            modelBuilder.Entity<cpa_indirect_cost_x_gl_account>()
                .Property(e => e.percentage)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_net_profit_configuration>()
                .HasMany(e => e.cpa_indirect_cost)
                .WithOptional(e => e.cpa_net_profit_configuration)
                .WillCascadeOnDelete();

            modelBuilder.Entity<cpa_scorecard_configuration_x_metric>()
                .Property(e => e.weight)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_configuration_x_metric>()
                .Property(e => e.top)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_configuration_x_metric>()
                .Property(e => e.a_to_b)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_configuration_x_metric>()
                .Property(e => e.b_to_c)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_configuration_x_metric>()
                .Property(e => e.c_to_d)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_configuration_x_metric>()
                .Property(e => e.d_to_f)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_configuration_x_metric>()
                .Property(e => e.bottom)
                .HasPrecision(38, 4);

            modelBuilder.Entity<credinv_x_invhdr_x_fcinv>()
                .Property(e => e.credit_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<credinv_x_invhdr_x_fcinv>()
                .Property(e => e.open_credit_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<credinv_x_invhdr_x_fcinv>()
                .Property(e => e.credit_amt_applied)
                .HasPrecision(19, 4);

            modelBuilder.Entity<credinv_x_invhdr_x_fcinv>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<credit_memo_code>()
                .Property(e => e.credit_memo_code1)
                .IsUnicode(false);

            modelBuilder.Entity<credit_memo_code>()
                .Property(e => e.credit_memo_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<credit_memo_code>()
                .Property(e => e.reason_code_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_memo_code>()
                .Property(e => e.source_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_memo_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<credit_memo_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<credit_memo_code>()
                .HasMany(e => e.invoice_hdr)
                .WithOptional(e => e.credit_memo_code)
                .HasForeignKey(e => e.reason_credit_memo_code_uid);

            modelBuilder.Entity<credit_memo_code>()
                .HasMany(e => e.invoice_hdr1)
                .WithOptional(e => e.credit_memo_code1)
                .HasForeignKey(e => e.source_credit_memo_code_uid);

            modelBuilder.Entity<credit_memo_code>()
                .HasMany(e => e.oe_hdr)
                .WithOptional(e => e.credit_memo_code)
                .HasForeignKey(e => e.reason_credit_memo_code_uid);

            modelBuilder.Entity<credit_memo_code>()
                .HasMany(e => e.oe_hdr1)
                .WithOptional(e => e.credit_memo_code1)
                .HasForeignKey(e => e.source_credit_memo_code_uid);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.credit_status_id)
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.credit_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.order_entry_action)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.invoice_entry_action)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.shipping_action)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.pick_ticket_action)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.validation_action)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.require_cc_payment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .Property(e => e.cc_accepted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<credit_status>()
                .HasMany(e => e.credit_status_2164)
                .WithRequired(e => e.credit_status)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<credit_status_2164>()
                .Property(e => e.cod_add_money_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<credit_status_2164>()
                .Property(e => e.cod_add_percent_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<credit_status_2164>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<credit_status_2164>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_avs_response_handling>()
                .Property(e => e.avs_response_code)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_avs_response_handling>()
                .Property(e => e.card_brand)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_avs_response_handling>()
                .Property(e => e.pos_message)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_avs_response_handling>()
                .Property(e => e.pos_response)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_avs_response_handling>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_avs_response_handling>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.applicationidentifier)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.applicationlabel)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.applicationpreferredname)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.cryptogram)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.issuercodetableindex)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.pinverified)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.host_response_code)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .Property(e => e.host_response_message)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv>()
                .HasMany(e => e.creditcard_emv_tags)
                .WithRequired(e => e.creditcard_emv)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<creditcard_emv_tags>()
                .Property(e => e.creditcard_emv_tag_key)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv_tags>()
                .Property(e => e.creditcard_emv_tag_value)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv_tags>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_emv_tags>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.first_name)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.last_name)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.street_address1)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.street_address2)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.state)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.original_auth_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.auth_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.trans_settled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.taker)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.batch_number)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.retrieval_ref_number)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.customer_verification_value)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.user_specified_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.switch_issue_number)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.realex_reference_number)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.realex_order_id)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.payment_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.address_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.commercial_card_response_code)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.card_brand)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.market_code_value)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.swiped_transaction_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.ecommerce_transaction_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_payment_details>()
                .Property(e => e.street_address3)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_proc_comp_user>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_proc_comp_user>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_proc_comp_user>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.location_name)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.processor_name)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.processor_number)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.merchant_id)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.merchantkey)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.help_desk_phone1)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.help_desk_phone2)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.voice_auth_phone1)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.voice_auth_phone2)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.industry_type)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.protobase_path)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.pb_admin_path)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.settlement_batch_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.request_files_path)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.archive_files_path)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.terminal_id)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.freight)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.web_server_url)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.secret_key)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.reporting_url)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.services_url)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.transaction_url)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.default_account_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.level_3_transaction_support_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.force_level_3_mastercard)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<creditcard_processor>()
                .Property(e => e.avs_handling_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor>()
                .HasMany(e => e.cc_payment_type_x_processor)
                .WithRequired(e => e.creditcard_processor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<creditcard_processor>()
                .HasMany(e => e.cc_processor_x_location)
                .WithRequired(e => e.creditcard_processor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<creditcard_processor>()
                .HasMany(e => e.cc_processor_x_tripos_instance)
                .WithRequired(e => e.creditcard_processor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<creditcard_processor>()
                .HasMany(e => e.creditcard_proc_comp_user)
                .WithOptional(e => e.creditcard_processor)
                .HasForeignKey(e => e.processor_uid);

            modelBuilder.Entity<creditcard_processor>()
                .HasMany(e => e.creditcard_processor_x_users)
                .WithRequired(e => e.creditcard_processor)
                .HasForeignKey(e => e.processor_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<creditcard_processor_x_users>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_processor_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_signature>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<creditcard_signature>()
                .Property(e => e.signature_data)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_signature>()
                .Property(e => e.signature_format)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_signature>()
                .Property(e => e.statuscode)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_signature>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_signature>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.receipt_data)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.payment_brand)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.is_for_approved_transaction)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.transaction_status)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transaction_receipt>()
                .Property(e => e.transaction_status_message)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transrequest>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<creditcard_transrequest>()
                .Property(e => e.reqfile_location)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transrequest>()
                .Property(e => e.request_status)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transrequest>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.respfile_location)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.response_status)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.pb_response_code)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.pb_response_message)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.host_ref_number)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.host_response_code)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.host_response_message)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.avs_return_code)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transresponse>()
                .Property(e => e.cvv_response_code)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transtype>()
                .Property(e => e.transtype_name)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transtype>()
                .Property(e => e.transtype_settlable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transtype>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_transtype>()
                .HasMany(e => e.creditcard_transrequest)
                .WithRequired(e => e.creditcard_transtype)
                .HasForeignKey(e => e.requesttype_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<creditcard_transtype>()
                .HasMany(e => e.creditcard_transresponse)
                .WithRequired(e => e.creditcard_transtype)
                .HasForeignKey(e => e.responsetype_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<creditcard_validation>()
                .Property(e => e.validation_expression)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_validation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<creditcard_validation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<crew>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<crew>()
                .Property(e => e.crew_name)
                .IsUnicode(false);

            modelBuilder.Entity<crew>()
                .Property(e => e.crew_description)
                .IsUnicode(false);

            modelBuilder.Entity<crew>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crew>()
                .Property(e => e.time_zone)
                .IsUnicode(false);

            modelBuilder.Entity<crew>()
                .Property(e => e.labor_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<crew>()
                .Property(e => e.labor_cogs_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<crew>()
                .Property(e => e.labor_billback_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<crew>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<crew>()
                .HasMany(e => e.labor_x_crew)
                .WithRequired(e => e.crew)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<crm_contact_information>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<crm_contact_information>()
                .Property(e => e.entity_link_id_char)
                .IsUnicode(false);

            modelBuilder.Entity<crm_contact_information>()
                .Property(e => e.entity_link_id_dec)
                .HasPrecision(19, 0);

            modelBuilder.Entity<crm_contact_information>()
                .Property(e => e.activity_trans_no)
                .IsUnicode(false);

            modelBuilder.Entity<crm_contact_information>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<crm_contact_information>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_30_days_sales)
                .HasPrecision(19, 2);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_60_days_sales)
                .HasPrecision(19, 2);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_90_days_sales)
                .HasPrecision(19, 2);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_365_days_sales)
                .HasPrecision(19, 2);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_365_days_comm_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_365_days_other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_365_days_freight_billed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_365_days_freight_unbilled)
                .HasPrecision(19, 4);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.previous_year_sales)
                .HasPrecision(19, 2);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.open_order_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.open_quote_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.open_opportunity_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.average_dso)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.ytd_prct_amt_won)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.ytd_prct_lines_won)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.rma_value_last_365)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.order_value_last_365)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_365_days_cogs)
                .HasPrecision(19, 9);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.sic_code)
                .HasPrecision(6, 0);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.sic_description)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.lead_source_id)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.source_description)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.new_customer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.salesrep_name)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.in_rewards_program_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.next_task_to_complete)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.last_completed_task)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.roa_0_to_30)
                .HasPrecision(19, 4);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.roa_31_to_60)
                .HasPrecision(19, 4);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.roa_61_to_90)
                .HasPrecision(19, 4);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.gap_0_to_30)
                .HasPrecision(19, 4);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.gap_31_to_60)
                .HasPrecision(19, 4);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.gap_61_to_90)
                .HasPrecision(19, 4);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.missed_buy_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.credit_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.average_order_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<crm_run>()
                .Property(e => e.cost_to_carry_late_invoices)
                .HasPrecision(19, 2);

            modelBuilder.Entity<crystal_external_report>()
                .Property(e => e.report_name)
                .IsUnicode(false);

            modelBuilder.Entity<crystal_external_report>()
                .Property(e => e.report_description)
                .IsUnicode(false);

            modelBuilder.Entity<crystal_external_report>()
                .Property(e => e.report_path)
                .IsUnicode(false);

            modelBuilder.Entity<crystal_external_report>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<crystal_external_report>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<crystal_external_report>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<crystal_external_report>()
                .HasMany(e => e.crystal_external_report_x_role)
                .WithRequired(e => e.crystal_external_report)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<crystal_external_report_x_role>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<crystal_external_report_x_role>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<crystal_external_report_x_role>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cube_factor>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cube_factor>()
                .Property(e => e.core_a)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cube_factor>()
                .Property(e => e.core_b)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cube_factor>()
                .Property(e => e.non_core_c)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cube_factor>()
                .Property(e => e.non_core_d)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cube_factor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cube_factor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cube_modifier>()
                .Property(e => e.minimum_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cube_modifier>()
                .Property(e => e.price_cube_modifier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cube_modifier>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cube_modifier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cube_modifier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_contract>()
                .Property(e => e.contract_no)
                .IsUnicode(false);

            modelBuilder.Entity<currency_contract>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<currency_contract>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 6);

            modelBuilder.Entity<currency_contract>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_contract>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_contract>()
                .Property(e => e.open_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<currency_hdr>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<currency_hdr>()
                .Property(e => e.currency_desc)
                .IsUnicode(false);

            modelBuilder.Entity<currency_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<currency_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_hdr>()
                .Property(e => e.currency_mask)
                .IsUnicode(false);

            modelBuilder.Entity<currency_hdr>()
                .Property(e => e.available_for_orders_invoices)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.account_x_currency)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.currency_variance_account)
                .WithRequired(e => e.currency_hdr)
                .HasForeignKey(e => e.to_currency_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.currency_line)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.currency_x_sat_code)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.cust_defaults_foreign)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.customers)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.intrastat_currency)
                .WithRequired(e => e.currency_hdr)
                .HasForeignKey(e => e.currency_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.intrastat_currency1)
                .WithRequired(e => e.currency_hdr1)
                .HasForeignKey(e => e.to_currency_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.inventory_receipts_hdr)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.inventory_return_hdr)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.landed_cost_driver)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.vendor_defaults)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr>()
                .HasMany(e => e.vendor_invoice_hdr)
                .WithRequired(e => e.currency_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_hdr_warning_parameters>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<currency_hdr_warning_parameters>()
                .Property(e => e.to_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<currency_hdr_warning_parameters>()
                .Property(e => e.tolerance_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<currency_hdr_warning_parameters>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_hdr_warning_parameters>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_line>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<currency_line>()
                .Property(e => e.currency_per)
                .HasPrecision(19, 4);

            modelBuilder.Entity<currency_line>()
                .Property(e => e.exchange_rate)
                .HasPrecision(28, 17);

            modelBuilder.Entity<currency_line>()
                .Property(e => e.exchange_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<currency_line>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<currency_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_line>()
                .Property(e => e.to_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<currency_line>()
                .Property(e => e.exchange_rate_description)
                .IsUnicode(false);

            modelBuilder.Entity<currency_sat_iso>()
                .Property(e => e.currency_sat_iso_code)
                .IsUnicode(false);

            modelBuilder.Entity<currency_sat_iso>()
                .Property(e => e.currency_sat_iso_desc)
                .IsUnicode(false);

            modelBuilder.Entity<currency_sat_iso>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_sat_iso>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_sat_iso>()
                .Property(e => e.percentage_variation_allowed)
                .HasPrecision(9, 5);

            modelBuilder.Entity<currency_sat_iso>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<currency_sat_iso>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<currency_sat_iso>()
                .HasMany(e => e.currency_x_sat_code)
                .WithRequired(e => e.currency_sat_iso)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<currency_variance_account>()
                .Property(e => e.to_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<currency_variance_account>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<currency_variance_account>()
                .Property(e => e.exchange_variance_account)
                .IsUnicode(false);

            modelBuilder.Entity<currency_variance_account>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<currency_variance_account>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_variance_account>()
                .Property(e => e.unrealized_variance_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<currency_x_sat_code>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<currency_x_sat_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_x_sat_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<currency_x_sat_code>()
                .Property(e => e.currency_sat_iso_code)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.ar_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.cos_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.allowed_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.terms_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.freight_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.brokerage_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.price_file_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.fob)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.deferred_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.pick_ticket_type)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.finance_chg_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.invoice_type)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.acceptable_wait_time)
                .HasPrecision(5, 0);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.credit_limit)
                .HasPrecision(22, 4);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.pending_payment_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.price_library_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.default_branch)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.allow_advance_billing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.advance_bill_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.signature_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.invoice_surcharge_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.labor_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.allow_line_item_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.service_terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.downpayment_percentage)
                .HasPrecision(19, 2);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.req_pymt_upon_release_of_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.include_dp_summary_on_invoices)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.job_number_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.use_last_margin_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.cons_inv_summary_filename)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.cons_inv_detail_filename)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.invoice_filename)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.statement_filename)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.use_vendor_item_terms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.rma_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.dealer_wrrty_claims_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.ar_batch_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.cons_backorders_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.apply_convenience_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.applied_fuelcharges_to_ds_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.suppress_zero_dollar_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .Property(e => e.express_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults>()
                .HasMany(e => e.cust_defaults_strategic)
                .WithRequired(e => e.cust_defaults)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.subject)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.copy)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.blind_copy)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.memo)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.cc_user_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.cc_salesrep_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.cc_taker_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.bc_user_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.bc_salesrep_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.bc_taker_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_email_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.ar_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.cos_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.allowed_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.terms_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.freight_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.brokerage_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.deferred_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.finance_chg_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.pending_payment_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.advance_bill_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_foreign>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_labels>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_labels>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_labels>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_merge_cust>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_merge_cust>()
                .Property(e => e.allow_customer_merge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_merge_cust>()
                .Property(e => e.place_on_hold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_merge_cust>()
                .Property(e => e.credit_limit_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_merge_cust>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_merge_cust>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_strategic>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_strategic>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_strategic>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_terms_acct>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_terms_acct>()
                .Property(e => e.tax_terms_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_terms_acct>()
                .Property(e => e.other_charge_terms_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_terms_acct>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_defaults_terms_acct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_group_hdr>()
                .Property(e => e.cust_part_no_group_no)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_group_hdr>()
                .Property(e => e.cust_part_no_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_group_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_group_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_group_hdr>()
                .HasMany(e => e.cust_part_no_group_line)
                .WithRequired(e => e.cust_part_no_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cust_part_no_group_line>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_part_no_group_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_group_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.their_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_part_no_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_x_inv_loc_edi32_discontinued_sent>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_x_inv_loc_edi32_discontinued_sent>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_x_inv_loc_edi32_discontinued_sent>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_x_inv_loc_edi32_discontinued_sent>()
                .Property(e => e.edi_832_discontinued_sent_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cust_x_inv_loc_edi32_discontinued_sent>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_x_inv_loc_edi32_discontinued_sent>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_x_inv_mast_edi846>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cust_x_inv_mast_edi846>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cust_x_inv_mast_edi846>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_x_inv_mast_edi846>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_x_invsupplier_freight>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cust_x_invsupplier_freight>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_customer>()
                .Property(e => e.value_string)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_customer>()
                .Property(e => e.value_decimal)
                .HasPrecision(19, 6);

            modelBuilder.Entity<custom_column_data_customer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_customer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_customer>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<custom_column_data_shipto>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<custom_column_data_shipto>()
                .Property(e => e.value_string)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_shipto>()
                .Property(e => e.value_decimal)
                .HasPrecision(19, 6);

            modelBuilder.Entity<custom_column_data_shipto>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_shipto>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_supplier>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<custom_column_data_supplier>()
                .Property(e => e.value_string)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_supplier>()
                .Property(e => e.value_decimal)
                .HasPrecision(19, 6);

            modelBuilder.Entity<custom_column_data_supplier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_supplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_vendor>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<custom_column_data_vendor>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_vendor>()
                .Property(e => e.value_string)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_vendor>()
                .Property(e => e.value_decimal)
                .HasPrecision(19, 6);

            modelBuilder.Entity<custom_column_data_vendor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_data_vendor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_definition>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_definition>()
                .Property(e => e.required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_definition>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_definition>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_definition>()
                .Property(e => e.column_description)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_definition>()
                .HasMany(e => e.area_x_custom_column)
                .WithRequired(e => e.custom_column_definition)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<custom_column_definition>()
                .HasMany(e => e.custom_column_list)
                .WithRequired(e => e.custom_column_definition)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<custom_column_list>()
                .Property(e => e.custom_column_list_value)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_list>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_column_list>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e._object)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e.mod_string)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e.version_id)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e.version_desc)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e.type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e.object_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e.default_values)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .Property(e => e.migrated_to_web)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects>()
                .HasMany(e => e.custom_objects_detail)
                .WithRequired(e => e.custom_objects)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<custom_objects_detail>()
                .Property(e => e.object_name)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_detail>()
                .Property(e => e.attribute_name)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_detail>()
                .Property(e => e.attribute_value)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.resale_certificate)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.credit_limit)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.credit_limit_used)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.ar_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.cos_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.allowed_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.terms_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.customer_id_string)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.freight_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.brokerage_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.trade_percent_disc)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.accept_partial_orders)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.acceptable_wait_time)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.price_file_id)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.edi_or_paper)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.security_info)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.interchg_receiver_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.intl_san)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.credit_card_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.credit_card_type)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.credit_card_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.last_check_number)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.last_check_amount)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.receivable_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.credit_limit_per_order)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.open_item_balance_forward)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.order_acknowledgments)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.accept_interchangeable_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.bill_to_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.generate_finance_charges)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.limit_max_shipments_per_order)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.credit_limit_check_at_shipment)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.generate_customer_statements)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.sic_code)
                .HasPrecision(6, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.minimum_order_dollar_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.federal_exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.other_exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.floor_plan_account)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.fc_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.fc_grace_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.minimum_finance_charge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.fc_cycle)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.statement_frequency_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.highest_credit_limit_used)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer>()
                .Property(e => e.billed_on_gross_net_qty)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.state_excise_tax_exemption_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.deferred_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.override_revenue_by_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.pick_ticket_type)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.finance_chg_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.finance_charge_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.use_consolidated_invoicing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.ci_for_complete_orders_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.ci_print_detail)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.invoice_print_qty)
                .HasPrecision(5, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.fob_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.cod_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.po_no_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.consolidated_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.trading_partner_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.default_rebate_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.lot_bill_summary_on_invoices)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.print_zero_dollar_customers)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.pending_payment_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.print_prices_on_packinglist)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.job_pricing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.record_source)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.slx_contactid)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.allow_advance_billing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.advance_bill_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.exclude_canceld_from_pick_tix)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.exclude_hold_from_pick_tix)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.exclude_canceld_from_pack_list)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.exclude_hold_from_pack_list)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.exclude_canceld_from_order_ack)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.exclude_hold_from_order_ack)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.disp_addl_info_on_invc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.remit_to_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.default_branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.override_profit_limit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.minimum_order_line_profit)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer>()
                .Property(e => e.maximum_order_line_profit)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer>()
                .Property(e => e.minimum_order_profit)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer>()
                .Property(e => e.maximum_order_profit)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.print_packinglist_in_shipping)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.multiplier_web)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.default_orders_to_will_call)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.send_ucc128info)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.mfr_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.always_use_job_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.allow_non_job_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.prompt_for_non_job_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.allow_exceed_job_qty)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.print_lot_attrib_on_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.print_lot_attrib_on_packlist)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.lead_source_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.passport_customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.allow_item_level_contract_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.ship_to_credit_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.legacy_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.parker_customer_cd)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.allow_line_item_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.send_dsc856_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.pass_through_option_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.enable_budget_codes_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.enable_aggregate_budgets_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.service_terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.downpayment_percentage)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer>()
                .Property(e => e.req_pymt_upon_release_of_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.include_dp_summary_on_invoices)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.job_number_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.use_last_margin_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.district_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.preferred_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.applied_fuelcharges_to_ds_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.suppress_zero_dollar_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.signature_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.reclaim_discount_on_memos_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.split_cores_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.clock_cell_tracking_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.environmental_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.admin_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.epa_cert_on_file_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.order_disc_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.freight_markup_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.floor_plan_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.use_vendor_contracts_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.pedigree_customer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.national_account_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.manufacturer_distributor_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.manufacturer_program_type_pct)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer>()
                .Property(e => e.manufacturer_rebate_loc)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.use_vendor_item_terms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.rental_update_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.foreign_currency_guarantee_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.special_labeling_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.special_packaging_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.sfdc_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.use_sys_ups_handling_chrg_flag)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.ups_handling_charge)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer>()
                .Property(e => e.print_pick_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.zoom360_grade)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.price_label_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.print_complete_orders_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.cmi_customer_note)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.rma_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.so_po_no_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.ar_batch_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.use_int_address_format_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.gl_code_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.ucc128_form_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.lowest_across_libraries_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.price_rounding_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.dealer_wrrty_claims_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.include_aging_info_on_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.private_label_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.cfn_cost_goods_sold_account)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.cfn_receivable_account)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.cfn_revenue_account)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.servicebench_servicer_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.apply_convenience_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.default_kit_markup_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.sales_tax_payable_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.customer_tax_class)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.cons_backorders_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.import_price_tolerance)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.servicebench_alt_servicer_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.always_use_eft_payment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.eft_validation_sent_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.scheduled_order_discount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.will_call_discount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.freight_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.place_orders_on_hold)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.order_hold_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.duplicate_po_no)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.forms_output_print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.forms_output_email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.forms_output_fax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.consolidate_per_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.purchasing_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.customer_disc_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.hold_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer>()
                .Property(e => e.courtesy_past_due_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.generic_desc_on_packinglist_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.generic_desc_on_invoice_ack_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.fill_or_kill_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.prevent_dc_switching_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.bypass_def_item_uom_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.discount_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.individual_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.track_customer_package_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.mult_cust_part_no_group_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.marketing_allowance_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.ad_allowance_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.discount_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.discount_gl_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.validate_oe_import_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.record_usage_actual_loc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.stmt_forms_output_print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.stmt_forms_output_email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.stmt_forms_output_fax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.gen_past_due_stmt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.pds_forms_output_print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.pds_forms_output_email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.pds_forms_output_fax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.auto_substitute_items_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.shipping_recalc_price_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.calculate_canadian_comm_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.electronic_order_discount_ignore_overdue)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.use_pallet_labels)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.consolidated_asn_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.allow_auto_apply_orig_inv)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.drum_deposit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.multiplier_price_library)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.complete_lots_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.weight_per_box)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.req_supp_order_no_for_dispatch)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.do_not_chg_oe_loc_to_replen_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.distributor_code)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.gl_applied_labor_acct)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.gl_labor_cos_acct)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.gl_service_cos_acct)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.gl_service_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.freight_discount_acct)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.natl_acct_pricing_eligible_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.wty_claim_appr_credit_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer>()
                .Property(e => e.prnt_carton_label_after_final_pkg_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.prnt_shipping_lbl_after_final_pkg_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.prnt_ucc128_label_after_final_pkg_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.use_scan_pack_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.exclude_from_external_tax_calc)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.advanced_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.asn_by_job_contract_line_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.override_fc_price_conversion_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.override_fc_receipt_defaults)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.fc_receipt_default_print)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.fc_receipt_default_email)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.fc_receipt_default_unpriced)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.fc_receipt_default_skinny)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.express_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.send_einvoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.australian_business_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.legal_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.pricing_pros_price_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.pricing_pros_guidance_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .Property(e => e.rental_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.apinv_hdr)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_no });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.ar_receipts_detail)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.bill_of_lading_hdr)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.bill_to_category)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.builders_selection_sheet)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.homeowner_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.carrier_contract_customer)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.commission_rule)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.cust_x_inv_loc_edi32_discontinued_sent)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.cust_x_inv_mast_edi846)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_eft)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasOptional(e => e.customer_194)
                .WithRequired(e => e.customer);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_item_comm_class)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_salesrep)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_statement_history)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_2164)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_322)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_45)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_aha)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_call)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_cons_inv_cardlock)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_contract)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_coop_advert_allowance)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_core_tracking)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_coupon)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_document)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_edi_setting)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_email_defaults)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_email_subject)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_fedex)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_form_template)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_freight_charge)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_freight_display)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_freight_options)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_gpo)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_item_reserve)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_iva_tax)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_kit_markup)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_language)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_lot_requirement)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_merge_cust)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_merge_cust1)
                .WithRequired(e => e.customer1)
                .HasForeignKey(e => new { e.merged_customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_notepad)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_oe_info)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_order_duplicate_check)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_order_history)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_order_surcharge)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_retail)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_retail_pricing)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_salesrep_location)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_single_discount)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_state_taxable_setting)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_strategic_item)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_strategic_pricing)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_strategic_pricing1)
                .WithOptional(e => e.customer1)
                .HasForeignKey(e => new { e.pricing_customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_supplier)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_terms)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_tpw)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_vat)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_volume_discount)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_weboe)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_x_contract_class)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_x_dealer_type)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_x_restricted_class)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_x_rewards_program)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_x_vendor)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_invoice_surcharge)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.customer_edi_transaction)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.delivery_ticket_info)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.dispatcher_pricing_hdr)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.edi_852_reserved_po_info)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.email_signature_dflt_user_x_cust)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.ewing_job_line)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.export_matrix)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.icm_customer_item_info)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.inv_xref)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.invoice_hdr)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id_number, e.company_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.invoice_hdr1)
                .WithRequired(e => e.customer1)
                .HasForeignKey(e => new { e.sold_to_customer_id, e.company_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.job_price_hdr)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.job_price_ship_control_no)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.job_price_customer_shipto)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.label_definition_x_customer)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.loans)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.loan_customer)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.medical_coupon_customer_dtl)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.medical_coupon_hdr)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.oe_hdr)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.oe_hdr1)
                .WithOptional(e => e.customer1)
                .HasForeignKey(e => new { e.architect_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.oe_hdr2)
                .WithOptional(e => e.customer2)
                .HasForeignKey(e => new { e.builder_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.oe_hdr3)
                .WithOptional(e => e.customer3)
                .HasForeignKey(e => new { e.contractor_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.oe_hdr4)
                .WithOptional(e => e.customer4)
                .HasForeignKey(e => new { e.designer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.oe_hdr5)
                .WithOptional(e => e.customer5)
                .HasForeignKey(e => new { e.homeowner_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.opportunities)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.order_import_exception)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.payment_account_x_contact)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.payment_account_x_customer)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.payment_account_x_ship_to)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.pending_retroactive_rebates_info)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.price_library_x_cust_x_cmpy)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.price_page)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.price_page_po_cost_calc)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.research_tracking_hdr)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.service_labor_rate_x_cust)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.ship_to)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.store_credit_hdr)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id });

            modelBuilder.Entity<customer>()
                .HasMany(e => e.tax_exemption_hdr)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.territory_x_customer)
                .WithRequired(e => e.customer)
                .HasForeignKey(e => new { e.customer_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer>()
                .HasMany(e => e.users)
                .WithOptional(e => e.customer)
                .HasForeignKey(e => new { e.default_bss_customer_id, e.default_company });

            modelBuilder.Entity<customer_10011>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_10011>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_10011>()
                .Property(e => e.mercury_dealer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_10011>()
                .Property(e => e.mercury_dealer_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_10011>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_194>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_194>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_194>()
                .Property(e => e.response_type)
                .IsUnicode(false);

            modelBuilder.Entity<customer_194>()
                .Property(e => e.show_part_numbers_on_response)
                .IsUnicode(false);

            modelBuilder.Entity<customer_194>()
                .Property(e => e.include_open_lines_on_response)
                .IsUnicode(false);

            modelBuilder.Entity<customer_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_194>()
                .Property(e => e.capture_usage)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_194>()
                .Property(e => e.add_core_charges_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_2164>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_2164>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_2164>()
                .Property(e => e.import_baac_approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_2164>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_2164>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_2164>()
                .Property(e => e.trk_coop_advert_allowance_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_2164>()
                .Property(e => e.labor_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_2164>()
                .Property(e => e.type_documentation)
                .IsUnicode(false);

            modelBuilder.Entity<customer_2164>()
                .Property(e => e.number_of_copies)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_322>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_322>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_322>()
                .Property(e => e.delinquency_notice)
                .IsUnicode(false);

            modelBuilder.Entity<customer_322>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_322>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_723>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_723>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_723>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_activity>()
                .Property(e => e.customer_activity1)
                .IsUnicode(false);

            modelBuilder.Entity<customer_activity>()
                .Property(e => e.path)
                .IsUnicode(false);

            modelBuilder.Entity<customer_activity>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_activity>()
                .HasMany(e => e.customer_activity_link)
                .WithRequired(e => e.customer_activity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_activity_link>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_activity_link>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_activity_link>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_activity_type>()
                .Property(e => e.activity_type)
                .IsUnicode(false);

            modelBuilder.Entity<customer_activity_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_activity_type>()
                .HasMany(e => e.customer_activity)
                .WithRequired(e => e.customer_activity_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_aha>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_aha>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_aha>()
                .Property(e => e.training_center_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_aha>()
                .Property(e => e.affiliated_training_center)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_aha>()
                .Property(e => e.security_code)
                .IsUnicode(false);

            modelBuilder.Entity<customer_aha>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_aha>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_call>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_call>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_call>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_call>()
                .Property(e => e.promised_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_call>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<customer_call>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_call>()
                .HasMany(e => e.customer_call_inv_detail)
                .WithRequired(e => e.customer_call)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_call_inv_detail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_call_inv_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_category>()
                .Property(e => e.customer_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_category>()
                .Property(e => e.customer_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<customer_category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_category>()
                .HasMany(e => e.carrier_size_category_cube_factor)
                .WithRequired(e => e.customer_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_category>()
                .HasMany(e => e.company_cust_size_limits)
                .WithRequired(e => e.customer_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_category>()
                .HasMany(e => e.customer_sensitivity_matrix)
                .WithRequired(e => e.customer_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_category>()
                .HasMany(e => e.price_override_exception)
                .WithRequired(e => e.customer_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_class_order_charge>()
                .Property(e => e.single_use_order_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_class_order_charge>()
                .Property(e => e.single_use_order_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_class_order_charge>()
                .Property(e => e.reusable_order_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_class_order_charge>()
                .Property(e => e.reusable_order_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_class_order_charge>()
                .Property(e => e.mixed_order_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_class_order_charge>()
                .Property(e => e.mixed_order_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_class_order_charge>()
                .Property(e => e.expediting_order_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_class_order_charge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_class_order_charge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_class_x_inventory_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_class_x_inventory_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_class_x_inventory_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_cons_inv_cardlock>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_cons_inv_cardlock>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_cons_inv_cardlock>()
                .Property(e => e.cardlock_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_cons_inv_cardlock>()
                .Property(e => e.cardlock_separate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_cons_inv_cardlock>()
                .Property(e => e.consolidated_terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_cons_inv_cardlock>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_cons_inv_cardlock>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.customer_contract_desc)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.customer_po)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.all_parts)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.parts_covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.all_labor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.labor_covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.include_pm)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.charge_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.bill_on_pm_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_contract_class>()
                .Property(e => e.classification_desc)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_contract_class>()
                .HasMany(e => e.contract_x_contract_class)
                .WithRequired(e => e.customer_contract_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_contract_class>()
                .HasMany(e => e.customer_x_contract_class)
                .WithRequired(e => e.customer_contract_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_coop_advert_allowance>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_coop_advert_allowance>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_coop_advert_allowance>()
                .Property(e => e.allowance_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_coop_advert_allowance>()
                .Property(e => e.allowance_to_date)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_coop_advert_allowance>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_coop_advert_allowance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.order_no_rma)
                .IsUnicode(false);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.core_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.core_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.core_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_core_tracking>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_coupon>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_coupon>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_coupon>()
                .Property(e => e.allow_restrict_item_purchase)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_coupon>()
                .Property(e => e.customer_is_client)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_coupon>()
                .Property(e => e.use_coupon_expiration_date)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_coupon>()
                .Property(e => e.coupon_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<customer_coupon>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_coupon>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.high_credit_used)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.avg_fast_slow_days)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.sum_days_x_payment)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.invoiced_sales)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.invoiced_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.invoiced_other_charges)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.invoiced_other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.invoiced_commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.freight_billed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.freight_unbilled)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.avg_fast_slow_days_amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history>()
                .Property(e => e.merchandise_invoiced_sales)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.high_credit_used)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.sum_days_x_payment)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.invoiced_sales)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.invoiced_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.invoiced_other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.invoiced_commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.freight_billed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.freight_unbilled)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_credit_history_daily>()
                .Property(e => e.avg_fast_slow_days_amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_document>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_document>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_document>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_document>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_dynamic_dataset>()
                .Property(e => e.dataset_description)
                .IsUnicode(false);

            modelBuilder.Entity<customer_dynamic_dataset>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_dynamic_dataset>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_dynamic_dataset>()
                .HasMany(e => e.customer_dynamic_dataset_detail)
                .WithRequired(e => e.customer_dynamic_dataset)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_dynamic_dataset_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_dynamic_dataset_detail>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_dynamic_dataset_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_dynamic_dataset_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.interchg_receiver_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.intl_san)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.trading_partner_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.passport_customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.edi_interchange_id_qualifier)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.edi_interchange_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.application_code)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.element_separator)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.sub_element_separator)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.segment_terminator)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.repetition_separator)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.append_line_feed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.functional_ack_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.testing_mode_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.eighty_column_line_break_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.validate_x12_document_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_setting>()
                .Property(e => e.edi855_consignment_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_trans_detail>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_trans_detail>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_trans_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_trans_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_transaction>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_transaction>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_edi_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_edi_transaction>()
                .HasMany(e => e.customer_edi_trans_detail)
                .WithRequired(e => e.customer_edi_transaction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_eft>()
                .Property(e => e.bank)
                .IsUnicode(false);

            modelBuilder.Entity<customer_eft>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<customer_eft>()
                .Property(e => e.routing_number)
                .IsUnicode(false);

            modelBuilder.Entity<customer_eft>()
                .Property(e => e.status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_eft>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_eft>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_eft>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_eft>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.subject)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.copy)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.blind_copy)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.memo)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.cc_user)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.cc_salesrep)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.cc_taker)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.bc_user)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.bc_salesrep)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.bc_taker)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.invoice_subject)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.order_ack_subject)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.quote_subject)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.rma_subject)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.packing_slip_subject)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.consolidated_invoice_subject)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.statement_subject)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_email_subject>()
                .Property(e => e.blind_copy)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.payer_account)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.payer_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.address1)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.address2)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.country)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.company_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.use_system_handling_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_fedex>()
                .Property(e => e.fixed_handling_charge)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.order_ack_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.rma_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.packing_list_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.invoice_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.statement_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.cons_inv_summary_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.cons_inv_detail_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.pick_ticket_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.packing_list_priced_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_form_template>()
                .Property(e => e.service_order_filename)
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_charge>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_freight_charge>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_charge>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_charge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_charge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_display>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_display>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_freight_display>()
                .Property(e => e.include_freight_in_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_display>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_display>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_options>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_freight_options>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_options>()
                .Property(e => e.freight_allowable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_options>()
                .Property(e => e.freight_allowed_level_1)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_freight_options>()
                .Property(e => e.freight_allowed_level_2)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_freight_options>()
                .Property(e => e.freight_allowed_level_3)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_freight_options>()
                .Property(e => e.other_location_minimum_order)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_freight_options>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_freight_options>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gl_code>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gl_code>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_gl_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gl_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gl_code>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gl_code>()
                .Property(e => e.gl_code_description)
                .IsUnicode(false);

            modelBuilder.Entity<customer_goal_detail>()
                .Property(e => e.goal_detail)
                .IsUnicode(false);

            modelBuilder.Entity<customer_goal_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_goal_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_goal_detail>()
                .Property(e => e.performance)
                .IsUnicode(false);

            modelBuilder.Entity<customer_goal_detail>()
                .Property(e => e.goal_detail_number)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_goal_detail>()
                .Property(e => e.performance_number)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_goal_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_goal_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_goal_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_goal_hdr>()
                .HasMany(e => e.customer_goal_detail)
                .WithRequired(e => e.customer_goal_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_gpo>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gpo>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_gpo>()
                .Property(e => e.gpo_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gpo>()
                .Property(e => e.facility_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gpo>()
                .Property(e => e.gln)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gpo>()
                .Property(e => e.hin)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gpo>()
                .Property(e => e.pay_fees_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_gpo>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_gpo>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_help>()
                .Property(e => e.window_title)
                .IsUnicode(false);

            modelBuilder.Entity<customer_help>()
                .Property(e => e.help_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<customer_help>()
                .Property(e => e.help_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_help>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_help>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_high_radius>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_high_radius>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_high_radius>()
                .Property(e => e.export_data_changed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_high_radius>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_high_radius>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_high_radius>()
                .Property(e => e.bank_file_export_data_changed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_invoice_surcharge>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_invoice_surcharge>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_invoice_surcharge>()
                .Property(e => e.invoice_surcharge_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_invoice_surcharge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_invoice_surcharge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_item_comm_class>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_item_comm_class>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_item_comm_class>()
                .Property(e => e.item_commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_item_comm_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_item_comm_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_item_reserve>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_item_reserve>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_item_reserve>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_item_reserve>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.iva_exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.iva_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.payment_method_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.domestic_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.account_digits)
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.leyenda_fiscal_1)
                .IsUnicode(false);

            modelBuilder.Entity<customer_iva_tax>()
                .Property(e => e.tax_registration_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_kit_markup>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_kit_markup>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_kit_markup>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_kit_markup>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_kit_markup>()
                .Property(e => e.kit_markup_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_kit_markup>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_kit_markup>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_language>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_language>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_language>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_language>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_language>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.shelf_life_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.same_lot_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.msds_doc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.tds_doc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.cert_doc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_lot_requirement>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_audit>()
                .Property(e => e.company_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_audit>()
                .Property(e => e.source_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_merge_audit>()
                .Property(e => e.target_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_merge_audit>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_audit>()
                .Property(e => e.merge_message)
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_audit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_audit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_audit>()
                .Property(e => e.keep_custas_shipto_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_cust>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_cust>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_merge_cust>()
                .Property(e => e.merged_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_merge_cust>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_cust>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_verification>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_verification>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_merge_verification>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.min_order_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.print_upc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.print_customer_part_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.track_buyer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.track_cost_center_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_oe_info>()
                .Property(e => e.track_recipient_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_duplicate_check>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_order_duplicate_check>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_duplicate_check>()
                .Property(e => e.duplicate_order_checking_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_duplicate_check>()
                .Property(e => e.use_shipto_in_dup_check_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_duplicate_check>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_duplicate_check>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_history>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_history>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_order_history>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_order_history>()
                .Property(e => e.extended_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_order_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_history_daily>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_history_daily>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_order_history_daily>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_order_history_daily>()
                .Property(e => e.extended_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_order_history_daily>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_history_daily>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_surcharge>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_surcharge>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_order_surcharge>()
                .Property(e => e.class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_surcharge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_order_surcharge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_package_hdr>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_package_hdr>()
                .Property(e => e.weight_manual_edit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr>()
                .Property(e => e.skid_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr>()
                .Property(e => e.volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_package_hdr>()
                .HasMany(e => e.customer_package_line)
                .WithRequired(e => e.customer_package_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_package_hdr_xfer>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_package_hdr_xfer>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_package_hdr_xfer>()
                .Property(e => e.weight_manual_edit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr_xfer>()
                .Property(e => e.skid_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr_xfer>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr_xfer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr_xfer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_hdr_xfer>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_line>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_package_line>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_package_line_xfer>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_package_line_xfer>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_line_xfer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_line_xfer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_package_line_xfer>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_profitability_role>()
                .Property(e => e.customer_profit_role_desc)
                .IsUnicode(false);

            modelBuilder.Entity<customer_profitability_role>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_profitability_role>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_profitability_role>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_retail>()
                .Property(e => e.retail_pricing_enabled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail>()
                .Property(e => e.retail_pricing_mult1)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_retail>()
                .Property(e => e.retail_pricing_mult2)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_retail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail>()
                .HasMany(e => e.customer_retail_item)
                .WithRequired(e => e.customer_retail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_retail_item>()
                .Property(e => e.retail_pricing_mult)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_retail_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail_pricing>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail_pricing>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_retail_pricing>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail_pricing>()
                .Property(e => e.retail_price_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_retail_pricing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_retail_pricing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_salesrep>()
                .Property(e => e.primary_salesrep_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep_location>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep_location>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_salesrep_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_salesrep_location>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep_location>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_salesrep_location>()
                .Property(e => e.primary_salesrep_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep_location>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_salesrep_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_sensitivity_matrix>()
                .Property(e => e.very_tiny_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_sensitivity_matrix>()
                .Property(e => e.tiny_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_sensitivity_matrix>()
                .Property(e => e.small_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_sensitivity_matrix>()
                .Property(e => e.medium_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_sensitivity_matrix>()
                .Property(e => e.large_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_sensitivity_matrix>()
                .Property(e => e.huge_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_sensitivity_matrix>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_sensitivity_matrix>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_sensitivity_matrix>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_single_discount>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_single_discount>()
                .Property(e => e.single_break_point)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_single_discount>()
                .Property(e => e.single_discount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_single_discount>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_single_discount>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_single_discount>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_single_discount>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.al_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ak_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.az_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ar_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ca_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.co_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ct_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.de_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.fl_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ga_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.hi_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.id_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.il_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.in_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ia_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ks_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ky_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.la_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.me_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.md_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ma_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.mi_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.mn_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ms_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.mo_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.mt_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ne_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.nv_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.nh_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.nj_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.nm_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ny_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.nc_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.nd_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.oh_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ok_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.or_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.pa_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ri_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.sc_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.sd_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.tn_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.tx_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.ut_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.vt_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.va_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.wa_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.wv_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.wi_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.wy_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_state_taxable_setting>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_statement_history>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_statement_history>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_statement_history>()
                .Property(e => e.statement_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_statement_history>()
                .Property(e => e.prior_statement_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_statement_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_strategic_item>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_strategic_item>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_strategic_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_strategic_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_strategic_item>()
                .Property(e => e.item_coreness_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_strategic_pricing>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_strategic_pricing>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_strategic_pricing>()
                .Property(e => e.pricing_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_strategic_pricing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_strategic_pricing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_supplier>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_supplier>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_supplier>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_supplier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_supplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_supplier_freight>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_supplier_freight>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_supplier_freight>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_supplier_freight>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_supplier_freight>()
                .Property(e => e.all_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_supplier_freight>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_supplier_freight>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_supplier_freight>()
                .HasMany(e => e.cust_x_invsupplier_freight)
                .WithRequired(e => e.customer_supplier_freight)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<customer_terms>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_terms>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_terms>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_terms>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_terms>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tpw>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tpw>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_tpw>()
                .Property(e => e.tpw_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_tpw>()
                .Property(e => e.tpw_deferred_revenue_account)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tpw>()
                .Property(e => e.tpw_deferred_rebate_account)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tpw>()
                .Property(e => e.tpw_deferred_cogs_account)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tpw>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tpw>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tradenet>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_tradenet>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tradenet>()
                .Property(e => e.tradenet_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tradenet>()
                .Property(e => e.default_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_tradenet>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tradenet>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_tradenet>()
                .Property(e => e.company_tradenet_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_type>()
                .Property(e => e.customer_type1)
                .IsUnicode(false);

            modelBuilder.Entity<customer_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.registration_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.exemption_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.wee_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.wee_collected_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.eu_member_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.ioss_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_vat>()
                .Property(e => e.eori_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_volume_discount>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_volume_discount>()
                .Property(e => e.volume_break_point)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_volume_discount>()
                .Property(e => e.volume_discount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_volume_discount>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_volume_discount>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_volume_discount>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_volume_discount>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_weboe>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_weboe>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_weboe>()
                .Property(e => e.weboe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_weboe>()
                .Property(e => e.balance_of_accts_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_weboe>()
                .Property(e => e.cpa_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_weboe>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_weboe>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_contract_class>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_contract_class>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_contract_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_contract_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_dealer_type>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_dealer_type>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_dealer_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_dealer_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_integration>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_integration>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_inv_mast>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_inv_mast>()
                .Property(e => e.review_comment)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_inv_mast>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_restricted_class>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_restricted_class>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_restricted_class>()
                .Property(e => e.certification_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_restricted_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_restricted_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_rewards_program>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_rewards_program>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_rewards_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_rewards_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_rewards_program>()
                .Property(e => e.invoiced_coop_dollar_basis)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_x_rewards_program>()
                .Property(e => e.invoiced_incentive_points_basis)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customer_x_rewards_program>()
                .Property(e => e.exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.high_credit_used)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.sum_days_x_payment)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.invoiced_sales)
                .HasPrecision(19, 2);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.invoiced_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.invoiced_other_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.invoiced_commission_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.freight_billed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.freight_unbilled)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.avg_fast_slow_days_amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_shipto_credit_history_daily>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_vendor>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_vendor>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_vendor>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_x_vendor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_x_vendor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customs_declaration_mx>()
                .Property(e => e.customs_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customs_declaration_mx>()
                .Property(e => e.customs_quantity)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customs_declaration_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customs_declaration_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customs_declaration_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<customs_declaration_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<customs_duty_rate>()
                .Property(e => e.harmonized_code)
                .IsUnicode(false);

            modelBuilder.Entity<customs_duty_rate>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<customs_duty_rate>()
                .Property(e => e.import_duty_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customs_duty_rate>()
                .Property(e => e.us_duty_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customs_duty_rate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customs_duty_rate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customs_mx>()
                .Property(e => e.customs_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customs_mx>()
                .Property(e => e.customs_desc)
                .IsUnicode(false);

            modelBuilder.Entity<customs_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customs_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customs_mx>()
                .Property(e => e.version_no)
                .HasPrecision(19, 9);

            modelBuilder.Entity<customs_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<customs_patent_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customs_patent_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customs_patent_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<customs_patent_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_accuracy>()
                .Property(e => e.adjustment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cycle_count_accuracy>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_detail>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_detail>()
                .Property(e => e.qty_counted)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cycle_count_detail>()
                .Property(e => e.added_to_physical_count)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_detail>()
                .Property(e => e.qty_on_hand_at_physical_count)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.show_qty_available)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.show_qty_on_hand)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.show_qty_allocated)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.monthly_cycle_count_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.include_all_bins_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.show_supplier_part_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.qty_alloc_proc_prod_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.include_zero_qoh_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.sort_by_level1)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.sort_mod_level1)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.sort_by_level2)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.sort_mod_level2)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.sort_by_level3)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.sort_mod_level3)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.abc_class_list)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.primary_supplier_list)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.item_list)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.product_group_list)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.putaway_rank_list)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.putaway_attribute_list)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.item_class_list)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.bin_selection_option)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.bin_cd_list)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.beg_bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.end_bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.abc_class_list_exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.primary_supplier_list_exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.item_list_exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.prod_group_list_exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.putaway_rank_list_exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.putaway_attrib_list_exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.item_class_list_exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.bin_cd_list_exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .Property(e => e.dtl_bin_sort_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .HasMany(e => e.cycle_count_accuracy)
                .WithRequired(e => e.cycle_count_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cycle_count_hdr>()
                .HasMany(e => e.cycle_count_detail)
                .WithRequired(e => e.cycle_count_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cycle_count_loc_criteria>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<cycle_count_loc_criteria>()
                .Property(e => e.include_non_stock)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_loc_criteria>()
                .Property(e => e.include_requisition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_loc_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_loc_criteria>()
                .Property(e => e.cc_include_null_abc_rank_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_loc_criteria>()
                .Property(e => e.exclude_zero_qoh_bin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_loc_criteria>()
                .HasMany(e => e.cycle_count_hdr)
                .WithRequired(e => e.cycle_count_loc_criteria)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cycle_count_loc_criteria>()
                .HasMany(e => e.cycle_count_product_group)
                .WithRequired(e => e.cycle_count_loc_criteria)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cycle_count_loc_criteria>()
                .HasMany(e => e.cycle_count_purchase_class)
                .WithRequired(e => e.cycle_count_loc_criteria)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<cycle_count_product_group>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_product_group>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_product_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_product_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_purchase_class>()
                .Property(e => e.purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_purchase_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<cycle_count_purchase_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<data_ident_x_data_ident_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<data_ident_x_data_ident_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<data_identifier>()
                .Property(e => e.data_identifier1)
                .IsUnicode(false);

            modelBuilder.Entity<data_identifier>()
                .Property(e => e.data_identifier_desc)
                .IsUnicode(false);

            modelBuilder.Entity<data_identifier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<data_identifier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<data_identifier>()
                .HasMany(e => e.data_ident_x_data_ident_group)
                .WithRequired(e => e.data_identifier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<data_identifier_group>()
                .Property(e => e.data_identifier_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<data_identifier_group>()
                .Property(e => e.data_identifier_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<data_identifier_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<data_identifier_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<data_identifier_group>()
                .HasMany(e => e.data_ident_x_data_ident_group)
                .WithRequired(e => e.data_identifier_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<datasource>()
                .Property(e => e.datasource_desc)
                .IsUnicode(false);

            modelBuilder.Entity<datasource>()
                .Property(e => e.datasource_object)
                .IsUnicode(false);

            modelBuilder.Entity<datasource>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<datasource>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<datasource>()
                .Property(e => e.enable_for_all_users)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<datasource>()
                .HasMany(e => e.datasource_detail)
                .WithRequired(e => e.datasource)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<datasource>()
                .HasMany(e => e.datasource_x_roles)
                .WithRequired(e => e.datasource)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<datasource>()
                .HasMany(e => e.datasource_x_users)
                .WithRequired(e => e.datasource)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<datasource>()
                .HasMany(e => e.report_metadata)
                .WithRequired(e => e.datasource)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<datasource_detail>()
                .Property(e => e.column_alias)
                .IsUnicode(false);

            modelBuilder.Entity<datasource_detail>()
                .Property(e => e.display_by_default)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<datasource_detail>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<datasource_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<datasource_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<datasource_detail>()
                .Property(e => e.add_home_value_to_panel)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<datasource_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<datasource_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<datasource_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<datasource_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<datasource_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<datastream>()
                .Property(e => e.datastream_name)
                .IsUnicode(false);

            modelBuilder.Entity<datastream>()
                .Property(e => e.datastream_desc)
                .IsUnicode(false);

            modelBuilder.Entity<datastream>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<datastream>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<datatypes_with_no_parens>()
                .Property(e => e.column_datatype)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint>()
                .Property(e => e.display_name)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint>()
                .Property(e => e.bo_class)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint>()
                .Property(e => e.br_class)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint>()
                .Property(e => e.vdw_class)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint>()
                .HasMany(e => e.db_driven_maint_key)
                .WithRequired(e => e.db_driven_maint)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<db_driven_maint_key>()
                .Property(e => e.key_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint_key>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<db_driven_maint_key>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<db_sql>()
                .Property(e => e.last_sql_executed)
                .IsUnicode(false);

            modelBuilder.Entity<db_sql>()
                .Property(e => e.sql_description)
                .IsUnicode(false);

            modelBuilder.Entity<dbmail_information>()
                .Property(e => e.use_system_alert)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dbmail_information>()
                .Property(e => e.call_from_within_mail_bo)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dbmail_information>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dbmail_information>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dbmail_information>()
                .Property(e => e.applied_to_alert_queued_mail)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.source_window)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.source_datawindow)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.source_field)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.dest_window)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.dest_datawindow)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.dest_field)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.apply_drill_to_all_users)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.dest_window_name)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .Property(e => e.source_data_field)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill>()
                .HasMany(e => e.dc_nav_drill_source_user)
                .WithOptional(e => e.dc_nav_drill)
                .HasForeignKey(e => e.default_dc_nav_drill_uid);

            modelBuilder.Entity<dc_nav_drill>()
                .HasMany(e => e.dc_nav_drill_x_roles)
                .WithRequired(e => e.dc_nav_drill)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dc_nav_drill>()
                .HasMany(e => e.dc_nav_drill_x_users)
                .WithRequired(e => e.dc_nav_drill)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dc_nav_drill_source_user>()
                .Property(e => e.source_window)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_source_user>()
                .Property(e => e.source_datawindow)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_source_user>()
                .Property(e => e.source_field)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_source_user>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_source_user>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_source_user>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_drill_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_source_request>()
                .Property(e => e.source_window)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_source_request>()
                .Property(e => e.source_datawindow)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_source_request>()
                .Property(e => e.source_field)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_source_request>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_nav_source_request>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security>()
                .Property(e => e.configuration_name)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security>()
                .Property(e => e.apply_to_all_users)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dc_security>()
                .Property(e => e.window_title)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security>()
                .HasMany(e => e.dc_security_detail)
                .WithRequired(e => e.dc_security)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dc_security>()
                .HasMany(e => e.dc_security_x_roles)
                .WithRequired(e => e.dc_security)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dc_security>()
                .HasMany(e => e.dc_security_x_users)
                .WithRequired(e => e.dc_security)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dc_security_detail>()
                .Property(e => e.invisible)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_detail>()
                .Property(e => e.disabled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_detail>()
                .Property(e => e.datawindow_name)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_detail>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_security_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_column>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_column>()
                .Property(e => e.column_desc)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_column>()
                .Property(e => e.legacy_data_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_column>()
                .Property(e => e.cc_data_type)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_column>()
                .Property(e => e.required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_column>()
                .HasMany(e => e.dct_layout_rule)
                .WithRequired(e => e.dct_layout_column)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_layout_file>()
                .Property(e => e.layout_path)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_file>()
                .Property(e => e.layout_filename)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_file>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_file>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_file>()
                .Property(e => e.use_file_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_file>()
                .HasMany(e => e.dct_layout_column)
                .WithRequired(e => e.dct_layout_file)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_layout_hdr>()
                .Property(e => e.layout_desc)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_hdr>()
                .Property(e => e.template_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_hdr>()
                .HasMany(e => e.dct_layout_file)
                .WithRequired(e => e.dct_layout_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_layout_rule>()
                .Property(e => e.rule_value)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_rule>()
                .Property(e => e.factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<dct_layout_rule>()
                .Property(e => e.operand)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_rule>()
                .Property(e => e.rule_sql)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_rule>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_rule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_layout_rule>()
                .Property(e => e.rule_applied_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_detail>()
                .Property(e => e.legacy_value)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_detail>()
                .Property(e => e.cc_value)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_detail>()
                .Property(e => e.cc_company_value)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.lookup_desc)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.cc_table_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.cc_value_column)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.legacy_value_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.company_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.qualifier)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.descriptor_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .Property(e => e.unmatched_value_to_set)
                .IsUnicode(false);

            modelBuilder.Entity<dct_lookup_hdr>()
                .HasMany(e => e.dct_lookup_detail)
                .WithRequired(e => e.dct_lookup_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_transaction>()
                .Property(e => e.transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction>()
                .Property(e => e.transaction_desc)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction>()
                .Property(e => e.baseline_transaction_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction>()
                .Property(e => e.menuclicked_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction>()
                .Property(e => e.legacy_export_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction>()
                .HasMany(e => e.dct_layout_hdr)
                .WithRequired(e => e.dct_transaction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_transaction>()
                .HasMany(e => e.dct_transaction_config)
                .WithRequired(e => e.dct_transaction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_transaction>()
                .HasMany(e => e.dct_transaction_table)
                .WithRequired(e => e.dct_transaction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_transaction_config>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_config>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table>()
                .Property(e => e.table_id)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table>()
                .Property(e => e.table_desc)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table>()
                .Property(e => e.legacy_file_suffix)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table>()
                .Property(e => e.business_object_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table>()
                .Property(e => e.setup_event_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table>()
                .Property(e => e.baseline_table_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table>()
                .HasMany(e => e.dct_layout_file)
                .WithRequired(e => e.dct_transaction_table)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_transaction_table>()
                .HasMany(e => e.dct_transaction_table_config)
                .WithRequired(e => e.dct_transaction_table)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_transaction_table>()
                .HasMany(e => e.dct_transaction_table_rule)
                .WithRequired(e => e.dct_transaction_table)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dct_transaction_table_config>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table_config>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table_rule>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table_rule>()
                .Property(e => e.column_desc)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table_rule>()
                .Property(e => e.rule_value)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table_rule>()
                .Property(e => e.factor)
                .HasPrecision(19, 0);

            modelBuilder.Entity<dct_transaction_table_rule>()
                .Property(e => e.operand)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table_rule>()
                .Property(e => e.source_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table_rule>()
                .Property(e => e.source_column_desc)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table_rule>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dct_transaction_table_rule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dea_license>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<dea_license>()
                .Property(e => e.license)
                .IsUnicode(false);

            modelBuilder.Entity<dea_license>()
                .Property(e => e.home_state_license_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dea_license>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dea_license>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dea_license>()
                .HasMany(e => e.address_x_dea_license)
                .WithRequired(e => e.dea_license)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dealer_comm_tax_line>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_comm_tax_line>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_comm_tax_line>()
                .Property(e => e.tax_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<dealer_comm_tax_line>()
                .Property(e => e.tax_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<dealer_comm_tax_line>()
                .Property(e => e.taxable_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<dealer_comm_tax_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_comm_tax_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.dealer_commission_amt_due)
                .HasPrecision(19, 4);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.dealer_commission_amt_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.dealer_commission_amt_allowed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.paid_in_full_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.external_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission>()
                .Property(e => e.dealer_commission_tax_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<dealer_commission>()
                .HasMany(e => e.dealer_commission_receipts)
                .WithRequired(e => e.dealer_commission)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.dealer_comm_payment_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.dealer_comm_allowed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.check_no)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.cash_acct)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.accounts_payable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.comm_receivable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.comm_allowance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.deposit_number)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .Property(e => e.cleared_bank)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_payments>()
                .HasMany(e => e.dealer_commission_receipts)
                .WithRequired(e => e.dealer_commission_payments)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dealer_commission_receipts>()
                .Property(e => e.dealer_comm_recpt_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<dealer_commission_receipts>()
                .Property(e => e.dealer_comm_recpt_allowed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<dealer_commission_receipts>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_commission_receipts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_type>()
                .Property(e => e.dealer_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_type>()
                .Property(e => e.dealer_type_description)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_type>()
                .HasMany(e => e.customer_x_dealer_type)
                .WithRequired(e => e.dealer_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dealer_warranty_failure_code>()
                .Property(e => e.vendor_failure_code)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_warranty_failure_code>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_warranty_failure_code>()
                .Property(e => e.additional_desc_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dealer_warranty_failure_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_warranty_failure_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dealer_warranty_failure_code>()
                .HasMany(e => e.supplier_failure_code)
                .WithRequired(e => e.dealer_warranty_failure_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.qty_to_deallocate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.document_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.lot_qty_to_deallocate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.bin_qty_to_deallocate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.lot_bin_qty_to_deallocate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<deallocate_transactions_run>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_comb_segment_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_comb_segment_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_comb_segment_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_comb_segment_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_comb_segment_hdr>()
                .HasMany(e => e.decoder_comb_segment_dtl)
                .WithRequired(e => e.decoder_comb_segment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_dtl>()
                .Property(e => e.value_cd)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_dtl>()
                .Property(e => e.value_desc)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_dtl>()
                .Property(e => e.default_value)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_dtl>()
                .Property(e => e.qty_needed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_dtl>()
                .HasMany(e => e.decoder_segment_dtl_breaks)
                .WithRequired(e => e.decoder_segment_dtl)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_dtl>()
                .HasMany(e => e.decoder_template_dtl_val_rules)
                .WithRequired(e => e.decoder_segment_dtl)
                .HasForeignKey(e => e.decoder_segment_dtl_uid_src)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_dtl>()
                .HasMany(e => e.decoder_template_dtl_val_rules1)
                .WithRequired(e => e.decoder_segment_dtl1)
                .HasForeignKey(e => e.decoder_segment_dtl_uid_val)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.multiplier_1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.multiplier_2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.multiplier_3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.multiplier_4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.multiplier_5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.break_1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.break_2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.break_3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.break_4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_dtl_breaks>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .Property(e => e.segment_cd)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .Property(e => e.segment_desc)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .Property(e => e.include_in_item_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .Property(e => e.length_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .Property(e => e.sheet_metal_calc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .Property(e => e.calculation_algorithm)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .HasMany(e => e.decoder_comb_segment_dtl)
                .WithRequired(e => e.decoder_segment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .HasMany(e => e.decoder_comb_segment_hdr)
                .WithRequired(e => e.decoder_segment_hdr)
                .HasForeignKey(e => e.combined_segment_hdr_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .HasMany(e => e.decoder_segment_dtl)
                .WithRequired(e => e.decoder_segment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .HasMany(e => e.decoder_segment_hdr_rules)
                .WithRequired(e => e.decoder_segment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .HasMany(e => e.decoder_template_dtl)
                .WithRequired(e => e.decoder_segment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_hdr>()
                .HasMany(e => e.decoder_template_dtl_rules)
                .WithRequired(e => e.decoder_segment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_segment_hdr_rules>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_segment_hdr_rules>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.accumulate_usage_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.prorate_cost_by_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.allow_disassembly_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.cost_of_disassembly)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.hose_assembly_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.hose_overall_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.hose_uom)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.hours_to_make)
                .HasPrecision(19, 9);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.prod_order_processing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.assembly_for_stock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.allow_oe_add_comps_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.auto_create_prod_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.print_comps_on_pick_ticket_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.print_comps_on_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.print_incomplete_assembly_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.ship_incomplete_assembly_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_assm_opts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .Property(e => e.include_in_item_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .Property(e => e.length_uom)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .Property(e => e.include_in_item_mask)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .Property(e => e.required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .Property(e => e.calculation_formula)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .HasMany(e => e.decoder_comb_segment_dtl)
                .WithRequired(e => e.decoder_template_dtl)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .HasMany(e => e.decoder_template_dtl_rules)
                .WithRequired(e => e.decoder_template_dtl)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_template_dtl>()
                .HasMany(e => e.decoder_template_dtl_val_rules)
                .WithRequired(e => e.decoder_template_dtl)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_template_dtl_rules>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl_rules>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl_val_rules>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_dtl_val_rules>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .Property(e => e.template_cd)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .Property(e => e.template_desc)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .Property(e => e.hose_assm_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .Property(e => e.item_configuration_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .Property(e => e.assembly_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .HasMany(e => e.decoder_comb_segment_hdr)
                .WithRequired(e => e.decoder_template_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .HasMany(e => e.decoder_template_assm_opts)
                .WithRequired(e => e.decoder_template_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .HasMany(e => e.decoder_template_dtl)
                .WithRequired(e => e.decoder_template_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .HasMany(e => e.decoder_template_hdr_dflt)
                .WithRequired(e => e.decoder_template_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_template_hdr>()
                .HasMany(e => e.decoder_template_hdr_mask)
                .WithRequired(e => e.decoder_template_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<decoder_template_hdr_dflt>()
                .Property(e => e.default_sales_discount_group)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr_dflt>()
                .Property(e => e.default_purchase_disc_group)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr_dflt>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr_dflt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr_dflt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr_mask>()
                .Property(e => e.item_mask)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr_mask>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<decoder_template_hdr_mask>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<degree_days>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<degree_days>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<degree_days>()
                .Property(e => e.heat)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days>()
                .Property(e => e.heat_and_hot_water)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<degree_days>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.tank_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.refill_level)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.est_dd_level)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.deg_default_delivery)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.deg_default_percent_basis)
                .IsUnicode(false);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.degree_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.k_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.last_delivery_gal)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.weight_avg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.weight_avg_dd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<degree_days_delivery>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<delivery>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery>()
                .Property(e => e.active_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery>()
                .Property(e => e.gps_data)
                .IsUnicode(false);

            modelBuilder.Entity<delivery>()
                .Property(e => e.delv_charge_inv_created_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery>()
                .HasMany(e => e.delivery_x_delivery_group)
                .WithRequired(e => e.delivery)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<delivery>()
                .HasMany(e => e.stops)
                .WithRequired(e => e.delivery)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<delivery_group>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_group>()
                .HasMany(e => e.delivery_x_delivery_group)
                .WithRequired(e => e.delivery_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<delivery_package>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_package>()
                .Property(e => e.weight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<delivery_package>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_package>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_pick_ticket>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<delivery_pick_ticket>()
                .Property(e => e.reconciliation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_pick_ticket>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_pick_ticket>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_pick_ticket>()
                .HasMany(e => e.delivery_pick_ticket_detail)
                .WithRequired(e => e.delivery_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<delivery_pick_ticket_detail>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_pick_ticket_detail>()
                .Property(e => e.return_to_stock)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_pick_ticket_detail>()
                .Property(e => e.ship_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<delivery_pick_ticket_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_rma>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_rma>()
                .Property(e => e.reconciliation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_rma>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_rma>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_rma>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_rma>()
                .HasMany(e => e.delivery_rma_detail)
                .WithRequired(e => e.delivery_rma)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<delivery_rma_detail>()
                .Property(e => e.return_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<delivery_rma_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_rma_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.document_no)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.document_line)
                .HasPrecision(19, 0);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.delivery_ticket_no)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_ticket_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_x_delivery_group>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<delivery_x_delivery_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_x_delivery_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.delivery_zone_id)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.sunday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.monday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.tuesday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.wednesday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.thursday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.friday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.saturday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<delivery_zone>()
                .HasMany(e => e.ship_to_geocom)
                .WithOptional(e => e.delivery_zone)
                .HasForeignKey(e => e.bulk_delivery_zone_uid);

            modelBuilder.Entity<delivery_zone>()
                .HasMany(e => e.ship_to_geocom1)
                .WithOptional(e => e.delivery_zone1)
                .HasForeignKey(e => e.package_delivery_zone_uid);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.factor13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_forecast_formula>()
                .Property(e => e.formula_name)
                .IsUnicode(false);

            modelBuilder.Entity<demand_level>()
                .Property(e => e.service_level_pct_goal)
                .HasPrecision(19, 2);

            modelBuilder.Entity<demand_level>()
                .Property(e => e.stock_out_deviation)
                .HasPrecision(19, 2);

            modelBuilder.Entity<demand_level>()
                .Property(e => e.backorder_deviation)
                .HasPrecision(19, 2);

            modelBuilder.Entity<demand_level>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_level>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_line_point>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_line_point>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_line_point>()
                .Property(e => e.forecast_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_line_point>()
                .Property(e => e.review_cycle)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_line_point>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_line_point>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.demand_pattern_criteria_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.from_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.to_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.from_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.to_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.from_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.to_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.from_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.to_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.from_purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.to_purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.consider_level_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.consider_trend_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.consider_seasonal_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.consider_seasonal_trend_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.consider_slow_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.consider_erratic_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.warn_if_trend_exceeds_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_criteria>()
                .Property(e => e.consider_sporadic_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_first_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_second_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_third_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_fourth_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_fifth_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_sixth_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_seventh_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_eighth_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_ninth_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_tenth_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_eleventh_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sum_twelfth_quarter_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q3_moving_avg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q4_moving_avg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q5_moving_avg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q6_moving_avg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q7_moving_avg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q8_moving_avg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q9_moving_avg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q10_moving_avg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q3_seasonal_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q4_seasonal_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q5_seasonal_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q6_seasonal_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q7_seasonal_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q8_seasonal_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q9_seasonal_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.q10_seasonal_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.last_year_total_demand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.two_years_ago_total_demand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.sales_pricing_unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.average_trend_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.period_first_stocked)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.year_first_stocked)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_run>()
                .Property(e => e.no_demand_in_half_pds_per_qtr)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_run_seasonal>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<demand_pattern_run_seasonal>()
                .Property(e => e.usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run_seasonal>()
                .Property(e => e.that_years_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run_seasonal>()
                .Property(e => e.percent_years_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_pattern_run_seasonal>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_pattern_run_seasonal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_period>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<demand_period>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_period>()
                .HasMany(e => e.average_inventory_value)
                .WithRequired(e => e.demand_period)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<demand_period>()
                .HasMany(e => e.inv_period_usage_temp)
                .WithRequired(e => e.demand_period)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<demand_period>()
                .HasMany(e => e.inv_period_usage)
                .WithRequired(e => e.demand_period)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<demand_review_adjustment>()
                .Property(e => e.lost_sales_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_review_adjustment>()
                .Property(e => e.exceptional_sales_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<demand_review_adjustment>()
                .Property(e => e.reviewed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<demand_review_adjustment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<demand_review_adjustment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<department>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<department>()
                .Property(e => e.dept_id)
                .IsUnicode(false);

            modelBuilder.Entity<department>()
                .Property(e => e.dept_desc)
                .IsUnicode(false);

            modelBuilder.Entity<department>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<department>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<deployed_map>()
                .Property(e => e.map_name)
                .IsUnicode(false);

            modelBuilder.Entity<deployed_map>()
                .Property(e => e.map)
                .IsUnicode(false);

            modelBuilder.Entity<deployed_map>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<deployed_map>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<deployed_map>()
                .HasMany(e => e.deployed_maps_mft)
                .WithRequired(e => e.deployed_map)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<deployed_maps_mft>()
                .Property(e => e.mft_filename)
                .IsUnicode(false);

            modelBuilder.Entity<deployed_maps_mft>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<deployed_maps_mft>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<design>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<design>()
                .Property(e => e.location)
                .IsUnicode(false);

            modelBuilder.Entity<design>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<design>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<design>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<design>()
                .Property(e => e.design_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<design>()
                .HasMany(e => e.assignments)
                .WithRequired(e => e.design)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<design>()
                .HasMany(e => e.external_object)
                .WithRequired(e => e.design)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<design>()
                .HasMany(e => e.modifications)
                .WithRequired(e => e.design)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dim_acct_report_def>()
                .Property(e => e.report_description)
                .IsUnicode(false);

            modelBuilder.Entity<dim_acct_report_def>()
                .Property(e => e.view_name)
                .IsUnicode(false);

            modelBuilder.Entity<dim_acct_report_def>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dim_acct_report_def>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dim_acct_report_def>()
                .Property(e => e.function_name)
                .IsUnicode(false);

            modelBuilder.Entity<dimension>()
                .Property(e => e.dimension_id)
                .IsUnicode(false);

            modelBuilder.Entity<dimension>()
                .Property(e => e.object_length)
                .HasPrecision(14, 4);

            modelBuilder.Entity<dimension>()
                .Property(e => e.object_height)
                .HasPrecision(14, 4);

            modelBuilder.Entity<dimension>()
                .Property(e => e.dimension_scale_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dimension>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dimension>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dimension>()
                .HasMany(e => e.item_count_detail_sbl)
                .WithOptional(e => e.dimension)
                .HasForeignKey(e => e.dimension_tracking_key);

            modelBuilder.Entity<direct_mass_update_job>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<direct_mass_update_job>()
                .Property(e => e.error_messages)
                .IsUnicode(false);

            modelBuilder.Entity<direct_mass_update_job>()
                .Property(e => e.additional_messages)
                .IsUnicode(false);

            modelBuilder.Entity<direct_mass_update_job>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<direct_mass_update_job>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<direction_recent_search>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<direction_recent_search>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<direction_recent_search>()
                .Property(e => e.address1)
                .IsUnicode(false);

            modelBuilder.Entity<direction_recent_search>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<direction_recent_search>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<direction_recent_search>()
                .Property(e => e.zip)
                .IsUnicode(false);

            modelBuilder.Entity<direction_recent_search>()
                .Property(e => e.country)
                .IsUnicode(false);

            modelBuilder.Entity<direction_recent_search>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<direction_recent_search>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group>()
                .Property(e => e.discount_group_description)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<discount_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group>()
                .HasMany(e => e.commission_rule)
                .WithOptional(e => e.discount_group)
                .HasForeignKey(e => e.sales_discount_group_id);

            modelBuilder.Entity<discount_group>()
                .HasMany(e => e.supplier_po_disc_group)
                .WithRequired(e => e.discount_group)
                .HasForeignKey(e => e.purchase_discount_group_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<discount_group>()
                .HasMany(e => e.discount_group_x_restricted_class)
                .WithRequired(e => e.discount_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<discount_group>()
                .HasMany(e => e.discount_group_x_rewards_program)
                .WithRequired(e => e.discount_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.sales_discount_group)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.purchase_discount_group)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.manufacturing_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.parker_product_cd)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_x_restricted_class>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_x_restricted_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_x_restricted_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_x_rewards_program>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_x_rewards_program>()
                .Property(e => e.coop_dollar_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<discount_group_x_rewards_program>()
                .Property(e => e.incentive_points_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<discount_group_x_rewards_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<discount_group_x_rewards_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<discount_installment_10005>()
                .Property(e => e.discount_installment_name)
                .IsUnicode(false);

            modelBuilder.Entity<discount_installment_10005>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<discount_installment_10005>()
                .Property(e => e.discount_installment_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dispatch_user_setting>()
                .Property(e => e.dispatch_users_id)
                .IsUnicode(false);

            modelBuilder.Entity<dispatch_user_setting>()
                .Property(e => e.setting_name)
                .IsUnicode(false);

            modelBuilder.Entity<dispatch_user_setting>()
                .Property(e => e.setting_value)
                .IsUnicode(false);

            modelBuilder.Entity<dispatch_user_setting>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dispatch_user_setting>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dispatcher_pricing_dtl>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<dispatcher_pricing_dtl>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<dispatcher_pricing_dtl>()
                .Property(e => e.mileage_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<dispatcher_pricing_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dispatcher_pricing_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dispatcher_pricing_hdr>()
                .Property(e => e.dispatcher_pricing_id)
                .IsUnicode(false);

            modelBuilder.Entity<dispatcher_pricing_hdr>()
                .Property(e => e.dispatcher_pricing_desc)
                .IsUnicode(false);

            modelBuilder.Entity<dispatcher_pricing_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<dispatcher_pricing_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<dispatcher_pricing_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<dispatcher_pricing_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<dispatcher_pricing_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dispatcher_pricing_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dispatcher_pricing_hdr>()
                .HasMany(e => e.dispatcher_pricing_dtl)
                .WithRequired(e => e.dispatcher_pricing_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<disputed_voucher_reason>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<disputed_voucher_reason>()
                .Property(e => e.reason)
                .IsUnicode(false);

            modelBuilder.Entity<disputed_voucher_reason>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<disputed_voucher_reason>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<disputed_voucher_reason>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.part_no)
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.dist_no)
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.net_code)
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.suffix)
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.seq_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.assembly_no)
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.available_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.discount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.mfr_code)
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.dist_name)
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<distranet_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<division>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<division>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<division>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<division>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<division>()
                .Property(e => e.division_name)
                .IsUnicode(false);

            modelBuilder.Entity<division>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<division>()
                .Property(e => e.return_division_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<division>()
                .Property(e => e.default_carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<division>()
                .Property(e => e.default_fob)
                .IsUnicode(false);

            modelBuilder.Entity<division>()
                .Property(e => e.charge_freight_to_vendor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<division>()
                .Property(e => e.default_authorization_no)
                .IsUnicode(false);

            modelBuilder.Entity<division>()
                .HasMany(e => e.asb_call_criteria)
                .WithRequired(e => e.division)
                .HasForeignKey(e => new { e.supplier_id, e.division_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<division>()
                .HasMany(e => e.error_log_autocreate_invreturn)
                .WithOptional(e => e.division)
                .HasForeignKey(e => new { e.supplier_id, e.division_id });

            modelBuilder.Entity<division>()
                .HasMany(e => e.inventory_defaults)
                .WithOptional(e => e.division)
                .HasForeignKey(e => new { e.supplier_id, e.division_id });

            modelBuilder.Entity<division>()
                .HasMany(e => e.inventory_return_hdr)
                .WithRequired(e => e.division)
                .HasForeignKey(e => new { e.supplier_id, e.division_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<division>()
                .HasMany(e => e.inventory_supplier)
                .WithRequired(e => e.division)
                .HasForeignKey(e => new { e.supplier_id, e.division_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<division>()
                .HasMany(e => e.oe_hdr_mfr)
                .WithRequired(e => e.division)
                .HasForeignKey(e => new { e.supplier_id, e.division_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<division>()
                .HasMany(e => e.po_hdr)
                .WithOptional(e => e.division)
                .HasForeignKey(e => new { e.supplier_id, e.division_id });

            modelBuilder.Entity<division>()
                .HasMany(e => e.prod_order_line_component)
                .WithRequired(e => e.division)
                .HasForeignKey(e => new { e.supplier_id, e.division_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<division>()
                .HasMany(e => e.stages)
                .WithOptional(e => e.division)
                .HasForeignKey(e => new { e.supplier_id, e.division_id });

            modelBuilder.Entity<document>()
                .Property(e => e.document_id)
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.document_desc)
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.pick_ticket_print)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.invoice_print)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.packing_list_print)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.quote_print)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.ord_ack_print)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.po_print)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.path)
                .IsUnicode(false);

            modelBuilder.Entity<document>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_inout_data>()
                .Property(e => e.data)
                .IsUnicode(false);

            modelBuilder.Entity<document_inout_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_inout_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.document_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.qty_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.document_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.qty_to_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.rf_qty_picked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.qty_from_tags)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.printed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.pick_status)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .Property(e => e.assigned_workstation_id)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_bin>()
                .HasMany(e => e.document_line_bin1)
                .WithOptional(e => e.document_line_bin2)
                .HasForeignKey(e => e.source_dlb_uid);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.department)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.tax_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.order_point)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.order_qty)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.change)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.bin_location)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.category)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.special_status)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.max_qty)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_inv_xref_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.document_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.qty_to_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.qty_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.document_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.qty_from_tags)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.qa_status)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot>()
                .Property(e => e.sub_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot>()
                .HasMany(e => e.document_line_lot_sub)
                .WithRequired(e => e.document_line_lot)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<document_line_lot>()
                .HasMany(e => e.document_line_lot_grid)
                .WithRequired(e => e.document_line_lot)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<document_line_lot>()
                .HasMany(e => e.lot_adjust_alert)
                .WithRequired(e => e.document_line_lot)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.qty_to_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.qty_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.document_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.rf_qty_picked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.qty_from_tags)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.actual_physical_count_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.pick_status)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .Property(e => e.assigned_workstation_id)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_bin_xref>()
                .HasMany(e => e.document_line_lot_bin_xref1)
                .WithOptional(e => e.document_line_lot_bin_xref2)
                .HasForeignKey(e => e.source_dllb_xref_uid);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.gridx)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.gridy)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.offcut_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.offcut_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.transfer_whole_belt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_grid>()
                .Property(e => e.scrap_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_sub>()
                .Property(e => e.comment)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_sub>()
                .Property(e => e.sku_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_line_lot_sub>()
                .Property(e => e.user_defined1)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_sub>()
                .Property(e => e.user_defined2)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_lot_sub>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<document_line_serial>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<document_line_serial>()
                .Property(e => e.document_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_line_serial>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_serial>()
                .Property(e => e.document_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_serial>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_line_serial>()
                .Property(e => e.qty_from_tags)
                .HasPrecision(19, 9);

            modelBuilder.Entity<document_link>()
                .Property(e => e.key1_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.key1_value)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.key2_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.key2_value)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.key3_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.key3_value)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.link_name)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.link_path)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.outside_use_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .Property(e => e.mandatory_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link>()
                .HasMany(e => e.document_link_area)
                .WithRequired(e => e.document_link)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<document_link_area>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_area>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_docstar>()
                .Property(e => e.document_area_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_docstar>()
                .Property(e => e.key1_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_docstar>()
                .Property(e => e.key1_value_field)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_docstar>()
                .Property(e => e.key2_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_docstar>()
                .Property(e => e.key2_value_field)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_docstar>()
                .Property(e => e.key3_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_docstar>()
                .Property(e => e.key3_value_field)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_docstar>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_docstar>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.require_lot_documentation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.fax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.send_outside_use_docs_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.send_outside_use_print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.send_outside_use_fax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_entity_req>()
                .Property(e => e.send_outside_use_email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_key>()
                .Property(e => e.key1_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_key>()
                .Property(e => e.key1_type)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_key>()
                .Property(e => e.key2_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_key>()
                .Property(e => e.key2_type)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_key>()
                .Property(e => e.key3_cd)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_key>()
                .Property(e => e.key3_type)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_key>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_key>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_key>()
                .HasMany(e => e.document_link_window_x_key)
                .WithRequired(e => e.document_link_key)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<document_link_trans_type>()
                .Property(e => e.trans_type)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_trans_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_trans_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window>()
                .Property(e => e.window_class)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window>()
                .HasMany(e => e.document_link_window_x_key)
                .WithRequired(e => e.document_link_window)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.tab_class)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.dw_name)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.key1_column)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.key1_type)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.key2_column)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.key2_type)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.key3_column)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.key3_type)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.display_outside_use_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.display_mandatory_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.display_print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.display_fax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.display_email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.display_all_source_links_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.transmit_lot_link_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.print_item_link_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_link_window_x_key>()
                .Property(e => e.include_for_import_role)
                .IsUnicode(false);

            modelBuilder.Entity<document_printer_x_loc>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<document_printer_x_loc>()
                .Property(e => e.default_printer)
                .IsUnicode(false);

            modelBuilder.Entity<document_printer_x_loc>()
                .Property(e => e.prompt_for_printer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_printer_x_loc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_printer_x_loc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_summary>()
                .Property(e => e.document_id)
                .IsUnicode(false);

            modelBuilder.Entity<document_summary>()
                .Property(e => e.sender)
                .IsUnicode(false);

            modelBuilder.Entity<document_summary>()
                .Property(e => e.receiver)
                .IsUnicode(false);

            modelBuilder.Entity<document_summary>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_summary>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_summary>()
                .Property(e => e.document_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<document_summary>()
                .HasMany(e => e.document_inout_data)
                .WithRequired(e => e.document_summary)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<document_summary>()
                .HasMany(e => e.document_transaction_data)
                .WithRequired(e => e.document_summary)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<document_transaction_data>()
                .Property(e => e.mapped_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_transaction_data>()
                .Property(e => e.data)
                .IsUnicode(false);

            modelBuilder.Entity<document_transaction_data>()
                .Property(e => e.filename)
                .IsUnicode(false);

            modelBuilder.Entity<document_transaction_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_transaction_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<document_types>()
                .Property(e => e.document_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<document_types>()
                .Property(e => e.document_type_description)
                .IsUnicode(false);

            modelBuilder.Entity<document_types>()
                .Property(e => e.document_object)
                .IsUnicode(false);

            modelBuilder.Entity<document_types>()
                .Property(e => e.document_id)
                .IsUnicode(false);

            modelBuilder.Entity<document_types>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<document_types>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<door_bin_x_shipping_route>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<door_bin_x_shipping_route>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<downpayment_refund_details>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<downpayment_refund_details>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<downpayment_refund_details>()
                .Property(e => e.refund_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<downpayment_refund_details>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<downpayment_refund_details>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.drp_item_selection_criteria_id)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.drp_item_selection_criteria_desc)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.from_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.to_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.from_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.to_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.from_purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.to_purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_level_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_trend_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_seasonal_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_seasonal_trend_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_slow_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_erratic_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_minmax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_upto_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_opoq_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.consider_eoq_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<drp_item_selection_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dtproperty>()
                .Property(e => e.property)
                .IsUnicode(false);

            modelBuilder.Entity<dtproperty>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<duty_drawback_hdr>()
                .Property(e => e.comment)
                .IsUnicode(false);

            modelBuilder.Entity<duty_drawback_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<duty_drawback_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<duty_drawback_hdr>()
                .HasMany(e => e.duty_drawback_line)
                .WithRequired(e => e.duty_drawback_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<duty_drawback_line>()
                .Property(e => e.claim_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<duty_drawback_line>()
                .Property(e => e.claim_qty_sku)
                .HasPrecision(19, 9);

            modelBuilder.Entity<duty_drawback_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<duty_drawback_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.target_name)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.target_username)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.target_expression)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.target_datatype)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.target_db_name)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.target_table)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.target_join)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.fc_description)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.fc_updateable)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.fc_updatewhereclause)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.target_join_table_string)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.autopop_trigger_column)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.autopop_trigger_table)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.multitable_join)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.join_operator)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.join_source_column)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.join_source_datatype)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.join_source_db_name)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.join_source_table)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.join_target_column)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.join_target_datatype)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.join_target_db_name)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.join_target_table)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.base_column_info)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.predefined_join_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dw_autopop_cache>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache>()
                .Property(e => e.dwo_name)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache>()
                .Property(e => e.syntax)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache>()
                .Property(e => e.db_version)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache>()
                .Property(e => e.dwo_type)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache_window>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache_window>()
                .Property(e => e.enable_caching_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache_window>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dw_syntax_cache_window>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject>()
                .Property(e => e.object_name)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<dwobject_dependency>()
                .Property(e => e.primary_object_name)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject_dependency>()
                .Property(e => e.secondary_object_name)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject_dependency>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject_dependency>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject_syntax>()
                .Property(e => e.columns)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject_syntax>()
                .Property(e => e.join)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject_syntax>()
                .Property(e => e.script_col_syntax)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject_syntax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<dwobject_syntax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dynachange>()
                .Property(e => e.dynachange_id)
                .HasPrecision(6, 0);

            modelBuilder.Entity<dynachange>()
                .Property(e => e.base_class)
                .IsUnicode(false);

            modelBuilder.Entity<dynachange>()
                .Property(e => e.personalized_class)
                .IsUnicode(false);

            modelBuilder.Entity<dynachange>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dynachange>()
                .HasMany(e => e.dynachange_config)
                .WithRequired(e => e.dynachange)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dynachange>()
                .HasMany(e => e.dynachange_menu)
                .WithRequired(e => e.dynachange)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<dynachange_config>()
                .Property(e => e.dynachange_id)
                .HasPrecision(6, 0);

            modelBuilder.Entity<dynachange_config>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dynachange_menu>()
                .Property(e => e.dynachange_id)
                .HasPrecision(6, 0);

            modelBuilder.Entity<dynachange_menu>()
                .Property(e => e.base_class_item)
                .IsUnicode(false);

            modelBuilder.Entity<dynachange_menu>()
                .Property(e => e.personalized_class_item)
                .IsUnicode(false);

            modelBuilder.Entity<dynachange_menu>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_alternate_code_delete>()
                .Property(e => e.alternate_code)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_attribute_x_custom_column>()
                .Property(e => e.ecc_transfer_type)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_attribute_x_custom_column>()
                .Property(e => e.attribute_set_name)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_attribute_x_custom_column>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_attribute_x_custom_column>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_attribute_x_custom_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_attribute_x_custom_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_contacts_x_ship_to_delete>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_contacts_x_ship_to_delete>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ecc_contacts_x_ship_to_delete>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_custom_column_mapping>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_custom_column_mapping>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_custom_column_mapping_x_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_custom_column_mapping_x_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_custom_column_mapping_x_column>()
                .Property(e => e.use_dropdown_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ecc_custom_column_transfer_type_x_table>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_custom_column_transfer_type_x_table>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_custom_column_transfer_type_x_table>()
                .Property(e => e.apply_table_joins)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ecc_custom_column_transfer_type_x_table>()
                .Property(e => e.use_base_objects)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ecc_customer_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_customer_detail>()
                .Property(e => e.customer_type)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_customer_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_customer_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_document_xref>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_document_xref>()
                .Property(e => e.document_number)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_document_xref>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_document_xref>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_instance>()
                .Property(e => e.instance_url)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_instance>()
                .Property(e => e.instance_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_instance>()
                .Property(e => e.ecc_instance_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_instance>()
                .Property(e => e.instance_syn_ver)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_instance>()
                .Property(e => e.mw_user)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_instance>()
                .Property(e => e.mw_password)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_instance>()
                .Property(e => e.responder_url)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_instance>()
                .Property(e => e.mw_url)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_oe_contacts_customer_delete>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_oe_contacts_customer_delete>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ecc_oe_contacts_customer_delete>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_address_xml>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_address_xml>()
                .Property(e => e.ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_address_xml>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_address_xml>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_address_xml_work>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_address_xml_work>()
                .Property(e => e.ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_address_xml_work>()
                .Property(e => e.xml_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_xml>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_xml>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_xml>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_xml_work>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_customer_xml_work>()
                .Property(e => e.xml_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_items_xml>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_items_xml>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_items_xml_work>()
                .Property(e => e.xml_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_locations_xml>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_locations_xml>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_locations_xml_work>()
                .Property(e => e.xml_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_oe_contacts_customer_xml>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_oe_contacts_customer_xml>()
                .Property(e => e.ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_oe_contacts_customer_xml>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_oe_contacts_customer_xml>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_oe_contacts_customer_xml>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_oe_contacts_customer_xml_work>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_oe_contacts_customer_xml_work>()
                .Property(e => e.ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_oe_contacts_customer_xml_work>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_oe_contacts_customer_xml_work>()
                .Property(e => e.xml_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_shopping_list_xml>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_shopping_list_xml>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_shopping_list_xml>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_shopping_list_xml_work>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_p21_get_shopping_list_xml_work>()
                .Property(e => e.xml_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_ALT>()
                .Property(e => e.item_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_ALT>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_ALT>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.ecc_transaction_table)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.ecc_initiator_audit_table)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.ecc_target_audit_table)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.sb_initiator_message)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.sb_target_message)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.sb_contract)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.sb_initiator_queue)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.sb_target_queue)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.sb_initiator_service)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.sb_target_service)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.audit_trigger_data)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.audit_target_data)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.transfer_type)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_audit>()
                .Property(e => e.trigger_name)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CAD>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CAD>()
                .Property(e => e.ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CAD>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CAD>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CUCO>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CUCO>()
                .Property(e => e.ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CUCO>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CUCO>()
                .Property(e => e.needs_to_send)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CUCO>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CUCO>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CUS>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CUS>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_CUS>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_STK>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_STK>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_STT>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_STT>()
                .Property(e => e.send_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sb_STT>()
                .Property(e => e.ecc_response_text)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_ship_to_x_inv_mast_delete>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_short_code_delete>()
                .Property(e => e.short_code)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sync_info>()
                .Property(e => e.sync_complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<eco_fee_code>()
                .Property(e => e.eco_fee_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<eco_fee_code>()
                .Property(e => e.fee_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<eco_fee_code>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<eco_fee_code>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<eco_fee_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<eco_fee_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<eco_fee_code>()
                .HasMany(e => e.inv_mast_eco_fee)
                .WithRequired(e => e.eco_fee_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<eco_fee_code>()
                .HasMany(e => e.invoice_line_eco_fee)
                .WithRequired(e => e.eco_fee_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<edi_852_reserved_po_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<edi_852_reserved_po_info>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<edi_852_reserved_po_info>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<edi_852_reserved_po_info>()
                .Property(e => e.reserved_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<edi_852_reserved_po_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<edi_852_reserved_po_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<edi_process_info>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<edi_process_info>()
                .Property(e => e.element_name)
                .IsUnicode(false);

            modelBuilder.Entity<edi_process_info>()
                .Property(e => e.element_value)
                .IsUnicode(false);

            modelBuilder.Entity<edi_process_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.eh_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.eh_invoice_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.eh_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.dealer_commission_amt_due)
                .HasPrecision(19, 4);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.dealer_commission_amt_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.check_no)
                .IsUnicode(false);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<eh_invoice_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<eh_mro_api_log>()
                .Property(e => e.request_xml)
                .IsUnicode(false);

            modelBuilder.Entity<eh_mro_api_log>()
                .Property(e => e.eh_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<eh_mro_api_log>()
                .Property(e => e.status)
                .IsUnicode(false);

            modelBuilder.Entity<eh_mro_api_log>()
                .Property(e => e.type)
                .IsUnicode(false);

            modelBuilder.Entity<eh_mro_api_log>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<eh_mro_api_log>()
                .Property(e => e.consumer_info)
                .IsUnicode(false);

            modelBuilder.Entity<eh_mro_api_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<eh_mro_api_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<eh_mro_api_log>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.transaction_number)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.transaction_recipient_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<email_log>()
                .Property(e => e.subject)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.email_to)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.email_body)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.sender_name)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.sender_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.email_cc)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.error_text)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.attachment_file_names)
                .IsUnicode(false);

            modelBuilder.Entity<email_log>()
                .Property(e => e.email_bcc)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification>()
                .Property(e => e.email_notification_id)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification>()
                .Property(e => e.email_notification_desc)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification>()
                .Property(e => e.billable_default_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<email_notification>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification>()
                .HasMany(e => e.email_notification_message)
                .WithRequired(e => e.email_notification)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<email_notification_message>()
                .Property(e => e.email_subject)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_message>()
                .Property(e => e.email_text)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_message>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_message>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_message>()
                .Property(e => e.postbilling_email_subject)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_message>()
                .Property(e => e.postbilling_email_text)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_message>()
                .HasMany(e => e.email_notification_recipient)
                .WithRequired(e => e.email_notification_message)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<email_notification_orders>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_orders>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_orders>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_recipient>()
                .Property(e => e.email_notification_name)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_recipient>()
                .Property(e => e.email_notification_address)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_recipient>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_recipient>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_signature_dflt_user_x_cust>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<email_signature_dflt_user_x_cust>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<email_signature_dflt_user_x_cust>()
                .Property(e => e.signature)
                .IsUnicode(false);

            modelBuilder.Entity<email_signature_dflt_user_x_cust>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_signature_dflt_user_x_cust>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_signature_dflt_user_x_cust>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<enterprise_search>()
                .Property(e => e.entity_type)
                .IsUnicode(false);

            modelBuilder.Entity<enterprise_search>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<enterprise_search>()
                .Property(e => e.search_expression)
                .IsUnicode(false);

            modelBuilder.Entity<enterprise_search>()
                .Property(e => e.id)
                .IsUnicode(false);

            modelBuilder.Entity<enterprise_search>()
                .Property(e => e.primary_desc)
                .IsUnicode(false);

            modelBuilder.Entity<enterprise_search>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<enterprise_search>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<enterprise_search>()
                .Property(e => e.company_column)
                .IsUnicode(false);

            modelBuilder.Entity<enterprise_search>()
                .Property(e => e.include_null_company_records)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epayment_response_code_info>()
                .Property(e => e.response_code)
                .IsUnicode(false);

            modelBuilder.Entity<epayment_response_code_info>()
                .Property(e => e.response_code_description)
                .IsUnicode(false);

            modelBuilder.Entity<epayment_response_code_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epayment_response_code_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_config_settings>()
                .Property(e => e.setting_key)
                .IsUnicode(false);

            modelBuilder.Entity<epf_config_settings>()
                .Property(e => e.setting_value)
                .IsUnicode(false);

            modelBuilder.Entity<epf_config_settings>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_config_settings>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_log>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<epf_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_log>()
                .Property(e => e.amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<epf_log>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<epf_log>()
                .Property(e => e.request_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<epf_log>()
                .Property(e => e.transaction_context)
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account>()
                .Property(e => e.epf_merchant_account_guid)
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account>()
                .Property(e => e.merchant_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account>()
                .Property(e => e.account_name)
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account>()
                .Property(e => e.account_description)
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account>()
                .HasMany(e => e.epf_merchant_account_options)
                .WithRequired(e => e.epf_merchant_account)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<epf_merchant_account>()
                .HasMany(e => e.epf_payment_type_mapping)
                .WithRequired(e => e.epf_merchant_account)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<epf_merchant_account_options>()
                .Property(e => e.preauthorization_padding_percentage)
                .HasPrecision(5, 2);

            modelBuilder.Entity<epf_merchant_account_options>()
                .Property(e => e.submit_itemized_details_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account_options>()
                .Property(e => e.processor_default_merchant_account_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account_options>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account_options>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account_options>()
                .Property(e => e.enable_emv_receipt_printing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account_options>()
                .Property(e => e.print_declined_emv_receipts_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account_options>()
                .Property(e => e.prompt_emv_receipt_printing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_merchant_account_options>()
                .Property(e => e.avs_handling_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_payment_type_mapping>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<epf_payment_type_mapping>()
                .Property(e => e.location_id)
                .IsUnicode(false);

            modelBuilder.Entity<epf_payment_type_mapping>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<epf_payment_type_mapping>()
                .Property(e => e.all_location_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_payment_type_mapping>()
                .Property(e => e.all_payment_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_payment_type_mapping>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_payment_type_mapping>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_payment_type_mapping>()
                .Property(e => e.fc_signature_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_plugin>()
                .Property(e => e.epf_plugin_guid)
                .IsUnicode(false);

            modelBuilder.Entity<epf_plugin>()
                .Property(e => e.plugin_name)
                .IsUnicode(false);

            modelBuilder.Entity<epf_plugin>()
                .Property(e => e.plugin_description)
                .IsUnicode(false);

            modelBuilder.Entity<epf_plugin>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_plugin>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_plugin>()
                .HasMany(e => e.epf_processor_account)
                .WithRequired(e => e.epf_plugin)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<epf_plugin_log>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<epf_plugin_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_plugin_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_processor_account>()
                .Property(e => e.epf_processor_account_guid)
                .IsUnicode(false);

            modelBuilder.Entity<epf_processor_account>()
                .Property(e => e.account_name)
                .IsUnicode(false);

            modelBuilder.Entity<epf_processor_account>()
                .Property(e => e.account_description)
                .IsUnicode(false);

            modelBuilder.Entity<epf_processor_account>()
                .Property(e => e.processor_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<epf_processor_account>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_processor_account>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_processor_account>()
                .HasMany(e => e.epf_merchant_account)
                .WithRequired(e => e.epf_processor_account)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.authorization_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.authorization_no)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.paid_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.original_amount_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.capture_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.signature)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.card_issuer)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.card_status)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.void_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.paypal_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.paypal_capture_id)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.paypal_capture_request_id)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.paypal_capture_token)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.emv_receipt_text)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.card_type)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.pin_verified_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.entry_mode)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.display_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.signature_filetype)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.avs_response_code)
                .IsUnicode(false);

            modelBuilder.Entity<epf_transaction_detail>()
                .Property(e => e.avs_response_message)
                .IsUnicode(false);

            modelBuilder.Entity<epic_cart>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<epic_cart>()
                .Property(e => e.part_no)
                .IsUnicode(false);

            modelBuilder.Entity<epic_cart>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<epic_cart>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<epic_cart>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<epic_cart>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<epic_cart>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<equip_engine_type>()
                .Property(e => e.engine_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<equip_engine_type>()
                .Property(e => e.engine_type_name)
                .IsUnicode(false);

            modelBuilder.Entity<equip_engine_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<equip_engine_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<equip_engine_type>()
                .HasMany(e => e.inv_mast_equip)
                .WithRequired(e => e.equip_engine_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<equip_manufacturer>()
                .Property(e => e.manufacturer_id)
                .IsUnicode(false);

            modelBuilder.Entity<equip_manufacturer>()
                .Property(e => e.manufacturer_name)
                .IsUnicode(false);

            modelBuilder.Entity<equip_manufacturer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<equip_manufacturer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<equip_manufacturer>()
                .HasMany(e => e.inv_mast_equip)
                .WithRequired(e => e.equip_manufacturer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<equip_model>()
                .Property(e => e.model_id)
                .IsUnicode(false);

            modelBuilder.Entity<equip_model>()
                .Property(e => e.model_name)
                .IsUnicode(false);

            modelBuilder.Entity<equip_model>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<equip_model>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<equip_model>()
                .HasMany(e => e.inv_mast_equip)
                .WithRequired(e => e.equip_model)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<error_log_autocreate_invreturn>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<error_log_autocreate_invreturn>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<error_log_autocreate_invreturn>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<error_log_autocreate_invreturn>()
                .Property(e => e.error_reason)
                .IsUnicode(false);

            modelBuilder.Entity<error_log_autocreate_invreturn>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<error_log_autocreate_invreturn>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<esc_base_view_alias>()
                .Property(e => e.esc_base_view_name)
                .IsUnicode(false);

            modelBuilder.Entity<esc_base_view_alias>()
                .Property(e => e.base_table)
                .IsUnicode(false);

            modelBuilder.Entity<esc_base_view_alias>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<esc_base_view_alias>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.skill_name)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.dynachange)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.disable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.skill_desc)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.version)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.dynachange_desc)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.tab)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.tab_page)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security>()
                .Property(e => e.class_name)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<eva_skill_security_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<event_order>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<event_order>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<event_order>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<event_order>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<event_order>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<event_order>()
                .Property(e => e.qty_available)
                .HasPrecision(19, 9);

            modelBuilder.Entity<event_order>()
                .Property(e => e.event_order_forecast_usage_pct)
                .HasPrecision(19, 4);

            modelBuilder.Entity<event_order>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<ewing_coupon>()
                .Property(e => e.coupon_name)
                .IsUnicode(false);

            modelBuilder.Entity<ewing_coupon>()
                .Property(e => e.max_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ewing_coupon>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ewing_coupon>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ewing_job_line>()
                .Property(e => e.job_name)
                .IsUnicode(false);

            modelBuilder.Entity<ewing_job_line>()
                .Property(e => e.tax_exempt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ewing_job_line>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ewing_job_line>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ewing_job_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ewing_job_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<exchange_rate_current>()
                .Property(e => e.from_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<exchange_rate_current>()
                .Property(e => e.to_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<exchange_rate_current>()
                .Property(e => e.exchange_rate)
                .HasPrecision(28, 17);

            modelBuilder.Entity<export_counter>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<export_counter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<export_matrix>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<export_matrix>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<export_matrix>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<export_matrix>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<export_matrix>()
                .Property(e => e.qualifier)
                .IsUnicode(false);

            modelBuilder.Entity<export_matrix>()
                .Property(e => e.content)
                .IsUnicode(false);

            modelBuilder.Entity<export_matrix>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<export_matrix>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ext_crm_setting>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<ext_crm_setting>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<ext_crm_setting>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ext_crm_setting>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_dropdown_value>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_dropdown_value>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_dropdown_value>()
                .Property(e => e.display_value)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_dropdown_value>()
                .Property(e => e.data_value)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_dropdown_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_dropdown_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_object>()
                .Property(e => e.object_type)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_object>()
                .Property(e => e.object_base_class)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_object>()
                .Property(e => e.enable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_object>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_object>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_window>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_window>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_window>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<extensibility_window>()
                .Property(e => e.enable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<external_count_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<external_count_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_count_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_count_hdr>()
                .Property(e => e.customer_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<external_count_hdr>()
                .Property(e => e.cuo_sales_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<external_count_hdr>()
                .HasMany(e => e.external_count_line)
                .WithRequired(e => e.external_count_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<external_count_line>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<external_count_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<external_count_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_count_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_count_line>()
                .Property(e => e.create_cuo_flag)
                .IsUnicode(false);

            modelBuilder.Entity<external_count_line>()
                .Property(e => e.unit_qty_for_cuo)
                .HasPrecision(19, 9);

            modelBuilder.Entity<external_count_line>()
                .Property(e => e.sum_prev_qty_for_cuo)
                .HasPrecision(19, 9);

            modelBuilder.Entity<external_object>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<external_object>()
                .Property(e => e.location)
                .IsUnicode(false);

            modelBuilder.Entity<external_object>()
                .Property(e => e.type)
                .IsUnicode(false);

            modelBuilder.Entity<external_object>()
                .Property(e => e.metadata)
                .IsUnicode(false);

            modelBuilder.Entity<external_object>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_object>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_backup_trans>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_backup_trans>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_backup_trans>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_backup_trans>()
                .Property(e => e.reconciled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_backup_trans>()
                .Property(e => e.cleared_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.jurisdiction_desc)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.tax_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.tax_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.currency)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.jurisdiction_level)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.max_tax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.tax_location_code)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.tax_code)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_detail>()
                .Property(e => e.service_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_hdr>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_hdr>()
                .Property(e => e.tax_exempt_approval_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_hdr>()
                .Property(e => e.external_tax_behavior_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_hdr>()
                .Property(e => e.customer_tax_class)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_hdr>()
                .Property(e => e.exemption_no)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_hdr>()
                .Property(e => e.refund_retail_delivery_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_line>()
                .Property(e => e.item_sales_tax_class)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<external_tax_line>()
                .Property(e => e.external_tax_behavior_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<factor_type_mx>()
                .Property(e => e.factor_type)
                .IsUnicode(false);

            modelBuilder.Entity<factor_type_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<factor_type_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<factor_type_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<factor_type_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_data>()
                .Property(e => e.segment_1)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_data>()
                .Property(e => e.segment_2)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_data>()
                .Property(e => e.segment_3)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_data>()
                .Property(e => e.segment_4)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_log>()
                .Property(e => e.dll_error_msg)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_log>()
                .Property(e => e.alert_processed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_export_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_data>()
                .Property(e => e.trans)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_data>()
                .Property(e => e.batch)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_data>()
                .Property(e => e.text)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_data>()
                .Property(e => e.processed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_data>()
                .Property(e => e.update_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_data>()
                .Property(e => e.import_error_message)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_data>()
                .Property(e => e.resubmitted)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.message_type)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.pick_list_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.pick_list_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.qty_allocated_sku)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.qty_picked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_import_ship_temp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.class_id)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.cc_qty_on_hand)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.expected_cc_qoh)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.actual_qty)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.discrepancy_qty)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.qty_unprocessed)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fascor_invdiscrepancy>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_change>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_change>()
                .Property(e => e.new_value)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_change>()
                .Property(e => e.criteria_column)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_change>()
                .Property(e => e.criteria_operand)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_change>()
                .Property(e => e.criteria_value)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_change>()
                .Property(e => e.value_is_expression)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_change>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_change>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_change>()
                .HasMany(e => e.fast_edit_error)
                .WithRequired(e => e.fast_edit_change)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.bo_class)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.display_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.tab_page_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.datawindow_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.key1_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.key2_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.key3_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.key4_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.key1_datatype)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.key2_datatype)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.key3_datatype)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.key4_datatype)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_detail>()
                .HasMany(e => e.fast_edit_change)
                .WithRequired(e => e.fast_edit_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fast_edit_error>()
                .Property(e => e.key1_value)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_error>()
                .Property(e => e.key2_value)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_error>()
                .Property(e => e.key3_value)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_error>()
                .Property(e => e.key4_value)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_error>()
                .Property(e => e.error_text)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_error>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_error>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_hdr>()
                .Property(e => e.master_bo_class)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_hdr>()
                .Property(e => e.window_class)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_hdr>()
                .Property(e => e.window_title)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_hdr>()
                .Property(e => e.fast_edit_query_where)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_hdr>()
                .HasMany(e => e.fast_edit_detail)
                .WithRequired(e => e.fast_edit_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fast_edit_template>()
                .Property(e => e.template_id)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template>()
                .Property(e => e.template_description)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template>()
                .HasMany(e => e.fast_edit_template_detail)
                .WithRequired(e => e.fast_edit_template)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fast_edit_template_class>()
                .Property(e => e.class_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_class>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_class>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_class>()
                .Property(e => e.default_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_class>()
                .Property(e => e.operations_template)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_class>()
                .HasMany(e => e.fast_edit_template_column)
                .WithRequired(e => e.fast_edit_template_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fast_edit_template_class>()
                .HasMany(e => e.fast_edit_template_query)
                .WithRequired(e => e.fast_edit_template_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fast_edit_template_column>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_column>()
                .Property(e => e.text_label)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_column>()
                .Property(e => e.tab_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_detail>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_detail>()
                .Property(e => e.editable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_detail>()
                .Property(e => e.column_value)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_detail>()
                .Property(e => e.dw_name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.ignore_if_empty_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.is_alias_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.label_text)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.user_key_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.column_id)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.data_type)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.selected_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e._operator)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fast_edit_template_query>()
                .Property(e => e.tab_name)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results>()
                .HasMany(e => e.fastedit_results_dataelements)
                .WithRequired(e => e.fastedit_results)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fastedit_results_columns>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results_columns>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results_columns>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results_dataelements>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results_dataelements>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_results_dataelements>()
                .HasMany(e => e.fastedit_results_columns)
                .WithRequired(e => e.fastedit_results_dataelements)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fastedit_roles>()
                .Property(e => e.class_name)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_roles>()
                .Property(e => e.active_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fastedit_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_area_code>()
                .Property(e => e.fta_code)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_area_code>()
                .Property(e => e.fta_table_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_area_code>()
                .HasMany(e => e.fault_tolerance_audit_trail)
                .WithRequired(e => e.fault_tolerance_area_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fault_tolerance_audit_trail>()
                .Property(e => e.before_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_audit_trail>()
                .Property(e => e.after_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_audit_trail>()
                .Property(e => e.audit_user_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_audit_trail>()
                .Property(e => e.audit_login)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_audit_trail>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_audit_trail>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_audit_trail>()
                .Property(e => e.line_no)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_problem_code>()
                .Property(e => e.ftp_code)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_problem_code>()
                .HasMany(e => e.fault_tolerance_audit_trail)
                .WithRequired(e => e.fault_tolerance_problem_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fax_cover>()
                .Property(e => e.fax_cover_id)
                .IsUnicode(false);

            modelBuilder.Entity<fax_cover>()
                .Property(e => e.fax_cover_desc)
                .IsUnicode(false);

            modelBuilder.Entity<fax_cover>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fax_cover>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fax_cover>()
                .HasMany(e => e.companies)
                .WithOptional(e => e.fax_cover)
                .HasForeignKey(e => e.default_fax_cover_uid);

            modelBuilder.Entity<fax_cover>()
                .HasMany(e => e.locations)
                .WithOptional(e => e.fax_cover)
                .HasForeignKey(e => e.default_fax_cover_uid);

            modelBuilder.Entity<fc_dataobject>()
                .Property(e => e.dataobject)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject>()
                .Property(e => e.primary_dataobject)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject>()
                .HasMany(e => e.fc_dataobject_table)
                .WithRequired(e => e.fc_dataobject)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fc_dataobject_column>()
                .Property(e => e.user_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_column>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_column>()
                .Property(e => e.updateable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_column>()
                .Property(e => e.updatewhereclause_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_column>()
                .Property(e => e.data_type)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_column>()
                .Property(e => e.expression)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_column>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_table>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_table>()
                .Property(e => e.join_syntax)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_table>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_table>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fc_dataobject_table>()
                .HasMany(e => e.fc_dataobject_column)
                .WithRequired(e => e.fc_dataobject_table)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.pickup_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.pickup_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.destination_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.pickup_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.rma_number)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.rma_reason)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.customer_note)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.confirmation_number)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .Property(e => e.dispatch_location_id)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag>()
                .HasMany(e => e.fedex_return_tag_detail)
                .WithRequired(e => e.fedex_return_tag)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fedex_return_tag_detail>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fedex_return_tag_detail>()
                .Property(e => e.length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fedex_return_tag_detail>()
                .Property(e => e.width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fedex_return_tag_detail>()
                .Property(e => e.height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fedex_return_tag_detail>()
                .Property(e => e.value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fedex_return_tag_detail>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag_detail>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_return_tag_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_service_type>()
                .Property(e => e.fedex_service_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_service_type>()
                .Property(e => e.fedex_service_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_service_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_service_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_service_type>()
                .Property(e => e.fedex_express_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fedex_service_type>()
                .HasMany(e => e.customer_fedex)
                .WithOptional(e => e.fedex_service_type)
                .HasForeignKey(e => e.default_fedex_service_type_uid);

            modelBuilder.Entity<fedex_service_type>()
                .HasMany(e => e.oe_hdr_fedex_info)
                .WithRequired(e => e.fedex_service_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fedex_service_type>()
                .HasMany(e => e.ship_to_fedex)
                .WithOptional(e => e.fedex_service_type)
                .HasForeignKey(e => e.default_fedex_service_type_uid);

            modelBuilder.Entity<fedex_shipment_info>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fedex_shipment_info>()
                .Property(e => e.variable_handling_charge_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fedex_shipment_info>()
                .Property(e => e.fixed_handling_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fedex_shipment_info>()
                .Property(e => e.fedex_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fedex_shipment_info>()
                .Property(e => e.total_freight_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fedex_shipment_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_shipment_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_smartpost_hub>()
                .Property(e => e.fedex_smartpost_hub_desc)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_smartpost_hub>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fedex_smartpost_hub>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.case_no)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg1)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg2)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg3)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg4)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg5)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg6)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg7)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg8)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg9)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg10)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg11)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg12)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg13)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg14)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.retrieval_arg15)
                .IsUnicode(false);

            modelBuilder.Entity<feedback_data_audit_trail>()
                .Property(e => e.results_file)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.trans_type)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.import_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.manufacturer_code)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.part_number)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.fidelitone_part_desc)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.p21_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.requested_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.available_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.available_zip)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.unit_core_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.nla_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.po_trans_code)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.po_description)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.store_number)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.carrier_id)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.customer_po_number)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.p21_order_number)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.status_action)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.shipped_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.shipped_scac)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.invoiced_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.p21_invoice_number)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fidelitone_trans_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_area>()
                .Property(e => e.dataobject)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_area>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_area>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_area>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.display_name)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.editable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.field_info)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.extra_text)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.auto_populate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.value_source_table)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.value_source_column)
                .IsUnicode(false);

            modelBuilder.Entity<field_chooser_info>()
                .Property(e => e.value_source_expression)
                .IsUnicode(false);

            modelBuilder.Entity<fifo_layer_cost_history>()
                .Property(e => e.fifo_layer_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fifo_layer_cost_history>()
                .Property(e => e.old_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layer_cost_history>()
                .Property(e => e.new_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layer_cost_history>()
                .Property(e => e.layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layer_cost_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fifo_layer_cost_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fifo_layer_transaction>()
                .Property(e => e.fifo_transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fifo_layer_transaction>()
                .Property(e => e.fifo_layer_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fifo_layer_transaction>()
                .Property(e => e.transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fifo_layer_transaction>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<fifo_layer_transaction>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<fifo_layer_transaction>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layer_transaction>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layer_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.fifo_layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.trans_ref_no)
                .IsUnicode(false);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.journal)
                .IsUnicode(false);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.fifo_layer_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.period_created)
                .HasPrecision(3, 0);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.year_created)
                .HasPrecision(4, 0);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.period_completed)
                .HasPrecision(3, 0);

            modelBuilder.Entity<fifo_layers>()
                .Property(e => e.year_completed)
                .HasPrecision(4, 0);

            modelBuilder.Entity<fifo_layers>()
                .HasMany(e => e.fifo_layer_cost_history)
                .WithRequired(e => e.fifo_layers)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<file_folder_upload_log>()
                .Property(e => e.folder_path_uploaded)
                .IsUnicode(false);

            modelBuilder.Entity<file_folder_upload_log>()
                .Property(e => e.file_name)
                .IsUnicode(false);

            modelBuilder.Entity<file_folder_upload_log>()
                .Property(e => e.existing_file_folder_name)
                .IsUnicode(false);

            modelBuilder.Entity<file_folder_upload_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<file_folder_upload_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report>()
                .Property(e => e.fin_report_id)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report>()
                .Property(e => e.fin_report_desc)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report>()
                .Property(e => e.application)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report>()
                .Property(e => e.worksheet)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report>()
                .Property(e => e.path_and_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fin_report>()
                .HasMany(e => e.columns)
                .WithRequired(e => e.fin_report)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<fin_report_stats_setup>()
                .Property(e => e.account_code)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report_stats_setup>()
                .Property(e => e.stats_amount_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fin_report_stats_setup>()
                .Property(e => e.stats_spreadsheet_column)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report_stats_setup>()
                .Property(e => e.stats_row_description)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report_stats_setup>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fin_report_stats_setup>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fin_report_stats_setup>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<finance_charge_cycle>()
                .Property(e => e.fc_cycle_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<finance_charge_cycle>()
                .Property(e => e.fc_cycle_desc)
                .IsUnicode(false);

            modelBuilder.Entity<finance_charge_cycle>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<finance_charge_cycle>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_column>()
                .Property(e => e.spreadsheet_column)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_column>()
                .Property(e => e.amount_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_column>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_row>()
                .Property(e => e.row_description)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_row>()
                .Property(e => e.reverse_sign_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_row>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_row>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_row>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_row_x_acct>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_row_x_acct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_row_x_acct>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<financial_report_row_x_acct>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<floor_plan_10002>()
                .Property(e => e.floor_plan_id)
                .IsUnicode(false);

            modelBuilder.Entity<floor_plan_10002>()
                .Property(e => e.floor_plan_desc)
                .IsUnicode(false);

            modelBuilder.Entity<floor_plan_10002>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<floor_plan_10002>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<floor_plan_10002>()
                .HasMany(e => e.order_floor_plan_xref_10002)
                .WithRequired(e => e.floor_plan_10002)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<floor_plan_10002>()
                .HasMany(e => e.invoice_floor_plan_xref)
                .WithRequired(e => e.floor_plan_10002)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<for_alternate_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_alternate_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_item_category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_item_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_item_category_text>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_item_category_text>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_note>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_note>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<form>()
                .Property(e => e.form_desc)
                .IsUnicode(false);

            modelBuilder.Entity<form>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<form>()
                .HasMany(e => e.printer_x_form)
                .WithRequired(e => e.form)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<form_destination>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<form_destination>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<form_destination>()
                .HasMany(e => e.form_destination_hierarchy)
                .WithRequired(e => e.form_destination)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<form_destination_hierarchy>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<form_destination_hierarchy>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.form_type)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.transaction_number)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.output_method)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.printer_name)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.file_name)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.email_recipients)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<forms_output_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.parent_class_name)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.class_name)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.frame_name)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.tag)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.text_label)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.enabled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.toolbar_item_image)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.toolbar_item_text)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.menu_image)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.microhelp)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.stringparm)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.stringparm_addtl)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.use_clicked_service)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.use_company_required_message)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.user_defined)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.title_expression)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.service_name)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.fastedit_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.stringparm_url)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.service_key)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.scheduler_enabled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.jobselection_text_label)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.selected_by_default)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .Property(e => e.new_ui_enabled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu>()
                .HasMany(e => e.frame_menu_reporting)
                .WithRequired(e => e.frame_menu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<frame_menu>()
                .HasMany(e => e.reporting_export_log)
                .WithRequired(e => e.frame_menu)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<frame_menu_reporting>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu_reporting>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<frame_menu_reporting>()
                .Property(e => e.report_syntax)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.freight_charge_id)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.use_with_billable_freight_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.charge_cust_once_per_day_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.charge_once_per_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.apply_automatically_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.charge_at_pick_ticket_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.max_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.min_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.charge_ship_once_per_day_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.apply_only_for_routable_carrier)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.excludable_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.apply_electronic_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.delivery_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<freight_charge>()
                .HasMany(e => e.customer_freight_charge)
                .WithRequired(e => e.freight_charge)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_charge>()
                .HasMany(e => e.freight_charge_break)
                .WithRequired(e => e.freight_charge)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_charge>()
                .HasMany(e => e.freight_charge_carrier)
                .WithRequired(e => e.freight_charge)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_charge_break>()
                .Property(e => e.value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_charge_break>()
                .Property(e => e.limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_charge_break>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_break>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_by_mile_dtl>()
                .Property(e => e.start_mileage)
                .HasPrecision(19, 2);

            modelBuilder.Entity<freight_charge_by_mile_dtl>()
                .Property(e => e.end_mileage)
                .HasPrecision(19, 2);

            modelBuilder.Entity<freight_charge_by_mile_dtl>()
                .Property(e => e.freight_charge_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<freight_charge_by_mile_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_by_mile_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_by_mile_hdr>()
                .Property(e => e.freight_charge_by_mile_id)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_by_mile_hdr>()
                .Property(e => e.freight_charge_by_mile_desc)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_by_mile_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_by_mile_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_by_mile_hdr>()
                .HasMany(e => e.freight_charge_by_mile_dtl)
                .WithRequired(e => e.freight_charge_by_mile_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_charge_carrier>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<freight_charge_carrier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_carrier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_charge_carrier>()
                .Property(e => e.value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_charge_carrier>()
                .Property(e => e.limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_charge_carrier>()
                .Property(e => e.outgoing_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.freight_cd)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.freight_desc)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.incoming_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.outgoing_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.incoming_reduce_commission)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.outgoing_increase_commission)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.free_in_freight_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.free_out_freight_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.direct_ship_free_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.free_in_freight_min_web)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.free_out_freight_min_web)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.external_tax_product_code_in)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.external_tax_product_code_out)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.incoming_increase_commission)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.pay_special_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.skip_first_shipment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.exclude_from_sales_master_inquiry)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.deductible_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.free_cold_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.free_hazmat_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.free_express_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.free_bulk_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .Property(e => e.exclude_discounted_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code>()
                .HasMany(e => e.carrier_x_freight_code)
                .WithRequired(e => e.freight_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_code>()
                .HasMany(e => e.freight_code_2186)
                .WithRequired(e => e.freight_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_code>()
                .HasOptional(e => e.freight_code_220)
                .WithRequired(e => e.freight_code);

            modelBuilder.Entity<freight_code_2186>()
                .Property(e => e.rma_freight_code_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code_2186>()
                .Property(e => e.affect_on_credit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code_2186>()
                .Property(e => e.affect_on_commission_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code_2186>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code_2186>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_code_220>()
                .Property(e => e.prompt_payment_discount)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code_220>()
                .Property(e => e.discount_allowed_account_no)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_code_220>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_charge>()
                .Property(e => e.postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_charge>()
                .Property(e => e.freight_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_group_charge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_charge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_hdr>()
                .Property(e => e.freight_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_hdr>()
                .Property(e => e.freight_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_hdr>()
                .Property(e => e.job_site_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_group_hdr>()
                .HasMany(e => e.freight_group_charge)
                .WithRequired(e => e.freight_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_group_hdr>()
                .HasMany(e => e.freight_group_dtl)
                .WithRequired(e => e.freight_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_group_hdr>()
                .HasMany(e => e.ship_to_freight_group)
                .WithRequired(e => e.freight_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_handling_break>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<freight_handling_break>()
                .Property(e => e.freight_cost_break)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_handling_break>()
                .Property(e => e.handling_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_handling_break>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_handling_break>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_hdr>()
                .Property(e => e.freight_carrier_id)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_rate_hdr>()
                .Property(e => e.order_priority)
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_hdr>()
                .Property(e => e.carrier_type)
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_hdr>()
                .Property(e => e.country_cd)
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_hdr>()
                .Property(e => e.parcel_allowed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_hdr>()
                .HasMany(e => e.freight_rate_line)
                .WithRequired(e => e.freight_rate_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freight_rate_line>()
                .Property(e => e.from_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_rate_line>()
                .Property(e => e.to_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freight_rate_line>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<freight_rate_line>()
                .Property(e => e.use_ltl_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_line>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freight_rate_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_class>()
                .Property(e => e.freightquote_class_id)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freightquote_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.package_description)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.origin_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.origin_description)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.after_pickup_time)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.before_pickup_time)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.carrier_option_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.carrier_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.carrier_transit_days)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.carrier_scac)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.carrier_fuel_surcharge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.carrier_freightcost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_hdr>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_hdr>()
                .Property(e => e.dest_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<freightquote_package_hdr>()
                .Property(e => e.dest_description)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_hdr>()
                .Property(e => e.total_weight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<freightquote_package_hdr>()
                .Property(e => e.total_charges)
                .HasPrecision(19, 4);

            modelBuilder.Entity<freightquote_package_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_package_hdr>()
                .HasMany(e => e.freightquote_package_detail)
                .WithRequired(e => e.freightquote_package_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<freightquote_pkg_type>()
                .Property(e => e.freightquote_pkg_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_pkg_type>()
                .Property(e => e.freightquote_pkg_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_pkg_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_pkg_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<freightquote_pkg_type>()
                .HasMany(e => e.freightquote_package_detail)
                .WithRequired(e => e.freightquote_pkg_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<frl_seg_ctrl>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<frl_seg_ctrl>()
                .Property(e => e.seg_desc)
                .IsUnicode(false);

            modelBuilder.Entity<frl_seg_ctrl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<frl_seg_desc>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<frl_seg_desc>()
                .Property(e => e.seg_code)
                .IsUnicode(false);

            modelBuilder.Entity<frl_seg_desc>()
                .Property(e => e.seg_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<frl_seg_desc>()
                .Property(e => e.seg_short_desc)
                .IsUnicode(false);

            modelBuilder.Entity<frl_seg_desc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gas_formula_dtl>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<gas_formula_dtl>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gas_formula_dtl>()
                .Property(e => e.lost_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gas_formula_dtl>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gas_formula_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gas_formula_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gas_formula_hdr>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<gas_formula_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gas_formula_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gas_formula_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gas_formula_hdr>()
                .Property(e => e.fill_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.request_type)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.current_library_id)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.new_library_id)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.new_book_id)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.page_type)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.price_family_id)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.pricing_method)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.source_price)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.result_message)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gensco_pricing_request>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.trip_code)
                .IsUnicode(false);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.vehicle_code)
                .IsUnicode(false);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.qty_delivered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.bulk_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.driver_no)
                .IsUnicode(false);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.error_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<geocom_handheld>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<gl>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<gl>()
                .Property(e => e.journal_id)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gl>()
                .Property(e => e.source)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl>()
                .Property(e => e.foreign_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gl>()
                .Property(e => e.transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.sequence_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.encumbered_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gl>()
                .Property(e => e.foreign_encumbered_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gl>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl>()
                .Property(e => e.cleared_bank)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.trans_no_from_deletion)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.gl_dimension_id)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.gl_dimension_desc)
                .IsUnicode(false);

            modelBuilder.Entity<gl>()
                .Property(e => e.exchange_rate_manual_entry)
                .HasPrecision(19, 6);

            modelBuilder.Entity<gl>()
                .HasMany(e => e.gl_reporting_curr)
                .WithRequired(e => e.gl)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<gl>()
                .HasMany(e => e.sat_payment_transfer_mx)
                .WithRequired(e => e.gl)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<gl_alloc>()
                .Property(e => e.from_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<gl_alloc>()
                .Property(e => e.to_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<gl_alloc>()
                .Property(e => e.percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gl_alloc>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_alloc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_alloc>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<gl_alloc>()
                .Property(e => e.to_acct_company_no)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.transaction_number_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.transaction_number_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.sequence_number_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.sequence_number_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.approved_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.approved_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.account_number_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.account_number_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.period_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.period_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.year_for_period_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.year_for_period_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.journal_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.journal_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.source_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.source_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.description_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.description_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.gl_dimension_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.gl_dimension_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.gl_dimension_desc_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.gl_dimension_desc_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.transaction_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.transaction_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.sequence_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl_audit_trail>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code>()
                .Property(e => e.gl_code_id)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code>()
                .Property(e => e.gl_code_description)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code>()
                .HasMany(e => e.customer_gl_code)
                .WithRequired(e => e.gl_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<gl_code>()
                .HasMany(e => e.gl_code_list_detail)
                .WithRequired(e => e.gl_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<gl_code_list_detail>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code_list_detail>()
                .Property(e => e.gl_code_description)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code_list_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code_list_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code_list_detail>()
                .Property(e => e.class_id)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code_list_hdr>()
                .Property(e => e.gl_code_list_desc)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code_list_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code_list_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code_list_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_code_list_hdr>()
                .HasMany(e => e.gl_code_list_detail)
                .WithRequired(e => e.gl_code_list_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<gl_dimen_type>()
                .Property(e => e.gl_dimen_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<gl_dimen_type>()
                .Property(e => e.gl_dimen_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<gl_dimen_type>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_dimen_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_dimen_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_dimen_type>()
                .Property(e => e.use_values)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_dimen_type>()
                .HasMany(e => e.gl_trans_x_dimension)
                .WithRequired(e => e.gl_dimen_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<gl_dimen_type>()
                .HasMany(e => e.trans_x_gl_dimension)
                .WithRequired(e => e.gl_dimen_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<gl_dimen_type_x_value>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<gl_dimen_type_x_value>()
                .Property(e => e.value_description)
                .IsUnicode(false);

            modelBuilder.Entity<gl_dimen_type_x_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_dimen_type_x_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl_notepad>()
                .Property(e => e.transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<gl_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<gl_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<gl_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_reporting_curr>()
                .Property(e => e.amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gl_reporting_curr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_reporting_curr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.journal_entry_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.repetitive_je_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.import_je_approval)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.coa_mask_compliance)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.validate_job_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.display_job_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.track_encumbrances)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.encumbrances_budget_column)
                .HasPrecision(1, 0);

            modelBuilder.Entity<gl_system_parameters>()
                .Property(e => e.gl_system_parameter_uid)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl_trans_x_dimension>()
                .Property(e => e.transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gl_trans_x_dimension>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_trans_x_dimension>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_trans_x_dimension>()
                .Property(e => e.gl_dimension_id)
                .IsUnicode(false);

            modelBuilder.Entity<gl_trans_x_dimension>()
                .Property(e => e.gl_dimension_desc)
                .IsUnicode(false);

            modelBuilder.Entity<gl_trans_x_dimension_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gl_trans_x_dimension_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_trans_x_dimension_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<gl_trans_x_dimension_audit_trail>()
                .Property(e => e.gl_dimension_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<gl_trans_x_dimension_audit_trail>()
                .Property(e => e.gl_dimension_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_item_limiter>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_item_limiter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.purchase_class)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.purchase_discount_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.product_group_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.lead_time_source)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.safety_stock_days)
                .HasPrecision(18, 4);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_backordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.recommended_qty_to_order)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.eoq_upto_order_point)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.inv_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.inv_max)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.company_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.purchase_pricing_unit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.purchase_pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.default_carrier)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.recommended_qty_to_order_calc)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.daily_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.replenishment_method)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.period_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.upc_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.control_value)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.eoq_upto_order_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.each_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.periods_to_supply)
                .HasPrecision(10, 4);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.lead_time_safety_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.buy_ahead_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_reserved_due_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.item_weight)
                .HasPrecision(19, 6);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.item_net_weight)
                .HasPrecision(19, 6);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.item_cube)
                .HasPrecision(19, 6);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.item_purchasing_weight)
                .HasPrecision(19, 6);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.target_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.order_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.unit_of_measure)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.unapproved_po_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.stockable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.blanket_PO_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_in_transit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.pricing_unit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.net_stock)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.tbo_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.computed_sku_weight)
                .HasPrecision(19, 6);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_on_release_schedule)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.safety_stock_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.usage_in_units)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.carrying_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.cost_to_order)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.primary_location_stockable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_in_process)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.user_line_no)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.pendingBackorderqty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.future_order_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.default_transfer_unit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.transfer_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.customer_id)
                .HasPrecision(18, 0);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.order_line_no)
                .HasPrecision(18, 0);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.base_qty)
                .HasPrecision(18, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.delivery_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.lot_bill_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.lot_group_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.req_group_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.component_number)
                .HasPrecision(18, 0);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.transfer_candidate_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.available_to_transfer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.make_buy_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.freight_control_value)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.freight_target_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.supplier_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.location_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.location_list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_on_prod_order)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.requirement_location_stockable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.min_replenishment_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.purchase_group_total_forecast)
                .HasPrecision(9, 0);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.combine_stock_ns_special_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.std_deviation)
                .HasPrecision(19, 2);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.mean_absolute_percent_error)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.oe_line_service_part_disp)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.upto_calculation)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.pass_through_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.twelve_month_avg_period_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_quarantined)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.remnant_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.use_revisions_flag)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.revision_level)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_available_in_other_revisions)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.recommended_qty_to_order_sku)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.sales_order_production_order_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.high_velocity_level)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.mid_velocity_level)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.order_point_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.drp_op_forecast)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.drp_oq_forecast)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.drp_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.drp_periods_to_supply_min_forecast)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.drp_periods_to_supply_max_forecast)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.qty_on_future_orders_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.max_liability)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.max_transfer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.all_future_order_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.critical_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.deviation_mult_one_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.deviation_mult_two_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.deviation_mult_three_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.crit_item_deviation_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.crit_min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.crit_max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.median_forecast_deviation)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.effective_deviation_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run>()
                .Property(e => e.effective_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.Purchase_transfer_group_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.beg_ABC_class_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.end_abc_class_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.beg_product_group_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.end_product_group_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.replenishment_method)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.order_point_exception)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.default_to_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.rounding_factor)
                .HasPrecision(6, 4);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.requirement_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.include_unapproved_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.include_release_schedule)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.exclude_tbo_quantity)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.roai)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.number_of_periods)
                .HasPrecision(4, 0);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.discount_percentage)
                .HasPrecision(7, 4);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.carrying_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.gpor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.return_all_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.use_surplus_qty)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.include_non_stock)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.high_velocity_level)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.mid_velocity_level)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.usage_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.auto_generate_tbo)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.summary_detail_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.use_surplus_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.replenish_from_repl_loc_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.auto_calc_expedite_date)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.use_ns_as_source_for_transfer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.combine_sp_with_stock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.service_level_pct_goal)
                .HasPrecision(19, 2);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.supplier_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.product_group_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.deviation_mult_one_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.deviation_mult_two_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.deviation_mult_three_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.crit_item_deviation_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.crit_min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .Property(e => e.crit_max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_hdr>()
                .HasMany(e => e.gpor_run)
                .WithRequired(e => e.gpor_run_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<gpor_supplier_pending_log>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gpor_supplier_pending_log>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gpor_supplier_pending_log>()
                .Property(e => e.po_criteria_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gpor_supplier_pending_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_supplier_pending_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_supplier_pending_log>()
                .Property(e => e.recommended_purchase_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_supplier_pending_log>()
                .Property(e => e.target_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_FutureReleaseNonallocated)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_PendingBackorderAmount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_PendingBackorderAmountProd)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_BlanketPOReleaseQty)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_UnapprovedPOQuantity)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_ScheduleOrderReleases_nonallocated)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_TBOSum)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_ProdOrderQty)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_ComponentQty)
                .HasPrecision(19, 4);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_QtyAvailableInOtherRevisions)
                .HasPrecision(9, 0);

            modelBuilder.Entity<gpor_vss>()
                .Property(e => e.c_salesorderproductionorderqty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<group_pick_ticket_detail>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<group_pick_ticket_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<group_pick_ticket_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<group_pick_ticket_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<group_pick_ticket_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<group_pick_ticket_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<group_pick_ticket_hdr>()
                .Property(e => e.shipping_program_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<group_pick_ticket_hdr>()
                .Property(e => e.lane_bin)
                .IsUnicode(false);

            modelBuilder.Entity<group_pick_ticket_hdr>()
                .Property(e => e.load_ready_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<group_pick_ticket_hdr>()
                .HasMany(e => e.group_pick_ticket_detail)
                .WithRequired(e => e.group_pick_ticket_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<group_po_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<group_po_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<group_po_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<group_po_hdr>()
                .HasMany(e => e.group_po_line)
                .WithRequired(e => e.group_po_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<group_po_hdr>()
                .HasMany(e => e.group_po_receiving_items)
                .WithRequired(e => e.group_po_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<group_po_line>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<group_po_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<group_po_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<group_po_receiving_items>()
                .Property(e => e.qty_scanned)
                .HasPrecision(19, 9);

            modelBuilder.Entity<group_po_receiving_items>()
                .Property(e => e.deposit_bin)
                .IsUnicode(false);

            modelBuilder.Entity<group_po_receiving_items>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<group_po_receiving_items>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric>()
                .Property(e => e.grow_metric_name)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric>()
                .Property(e => e.grow_metric_desc)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric>()
                .Property(e => e.show_focus_values)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric>()
                .Property(e => e.show_title)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric>()
                .HasMany(e => e.grow_metric_criteria)
                .WithRequired(e => e.grow_metric)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<grow_metric>()
                .HasMany(e => e.grow_metric_x_roles)
                .WithRequired(e => e.grow_metric)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<grow_metric>()
                .HasMany(e => e.grow_metric_x_users)
                .WithRequired(e => e.grow_metric)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<grow_metric_criteria>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_criteria>()
                .Property(e => e.operator_cd)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_criteria>()
                .Property(e => e.criteria_value)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_criteria>()
                .Property(e => e.is_date)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<grow_metric_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gtor_run>()
                .Property(e => e.qty_on_obt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gtor_run>()
                .Property(e => e.total_qty_on_obt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gtor_run>()
                .Property(e => e.qty_on_tbo)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gtor_run>()
                .Property(e => e.total_qty_on_tbo)
                .HasPrecision(19, 9);

            modelBuilder.Entity<hazmat_class>()
                .Property(e => e.hazmat_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<hazmat_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<hazmat_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<hazmat_class>()
                .HasMany(e => e.hazmat_code)
                .WithRequired(e => e.hazmat_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<hazmat_code>()
                .Property(e => e.hazmat_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<hazmat_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<hazmat_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<hazmat_code>()
                .Property(e => e.hazardous_material_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<hazmat_code>()
                .Property(e => e.packing_group)
                .IsUnicode(false);

            modelBuilder.Entity<hazmat_code>()
                .Property(e => e.hazmat_id_no)
                .IsUnicode(false);

            modelBuilder.Entity<help_access>()
                .Property(e => e.help_level)
                .IsUnicode(false);

            modelBuilder.Entity<help_access>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<help_access>()
                .Property(e => e.object_name)
                .IsUnicode(false);

            modelBuilder.Entity<help_access>()
                .Property(e => e.keyword_source)
                .IsUnicode(false);

            modelBuilder.Entity<help_access>()
                .Property(e => e.keyword)
                .IsUnicode(false);

            modelBuilder.Entity<help_access>()
                .Property(e => e.help_topic_context)
                .IsUnicode(false);

            modelBuilder.Entity<help_access>()
                .Property(e => e.help_topic_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<help_access>()
                .Property(e => e.help_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<help_access>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<help_topic>()
                .Property(e => e.context)
                .IsUnicode(false);

            modelBuilder.Entity<help_topic>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<help_topic>()
                .Property(e => e.keyword)
                .IsUnicode(false);

            modelBuilder.Entity<help_topic>()
                .Property(e => e.access_counter)
                .HasPrecision(19, 0);

            modelBuilder.Entity<help_topic>()
                .Property(e => e.verified)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<help_topic>()
                .Property(e => e.topic_type)
                .IsUnicode(false);

            modelBuilder.Entity<help_topic>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<icm_customer_item_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<icm_customer_item_info>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<icm_customer_item_info>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<icm_customer_item_info>()
                .Property(e => e.dept)
                .IsUnicode(false);

            modelBuilder.Entity<icm_customer_item_info>()
                .Property(e => e.sub_dept)
                .IsUnicode(false);

            modelBuilder.Entity<icm_customer_item_info>()
                .Property(e => e._class)
                .IsUnicode(false);

            modelBuilder.Entity<icm_customer_item_info>()
                .Property(e => e.sub_class)
                .IsUnicode(false);

            modelBuilder.Entity<icm_customer_item_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<icm_customer_item_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ideal_locations_by_zip>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ideal_locations_by_zip>()
                .Property(e => e.start_zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<ideal_locations_by_zip>()
                .Property(e => e.end_zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<ideal_locations_by_zip>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ideal_locations_by_zip>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<impexp_source>()
                .Property(e => e.impexp_source_id)
                .IsUnicode(false);

            modelBuilder.Entity<impexp_source>()
                .Property(e => e.impexp_source_desc)
                .IsUnicode(false);

            modelBuilder.Entity<impexp_source>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<impexp_source>()
                .Property(e => e.impexp_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<impexp_source>()
                .HasMany(e => e.scheduled_import_def)
                .WithRequired(e => e.impexp_source)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<impexp_source>()
                .HasMany(e => e.scheduled_import_master)
                .WithRequired(e => e.impexp_source)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.impexp_source_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.transaction_set_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.import_filename)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.third_party_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.third_party_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.status)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.import_set_no)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.key_value)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.key_value_column)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.key_value_table)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.imported_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<import_audit_settings>()
                .Property(e => e.impexp_source_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_audit_settings>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.import_key_column)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.import_key_type)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.file_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.original_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.temp_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.import_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.import_master_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.requestor_type)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.file_request_type)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.test_counter_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.test_counter_code)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.record_count_display_names)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.generated_record_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.last_master_key_value)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.temp_table_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.temp_table_select)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.temp_table_db_sort)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.temp_table_ds_sort)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_file>()
                .Property(e => e.identity_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_hdr>()
                .Property(e => e.tolerance_error_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<import_restart_hdr>()
                .Property(e => e.actual_error_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<import_restart_hdr>()
                .Property(e => e.track_sets_info)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_hdr>()
                .Property(e => e.import_display_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_hdr>()
                .Property(e => e.available_memory_mb)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_hdr>()
                .HasMany(e => e.import_restart_file)
                .WithRequired(e => e.import_restart_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<import_restart_hdr>()
                .HasMany(e => e.import_restart_requestor)
                .WithRequired(e => e.import_restart_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<import_restart_requestor>()
                .Property(e => e.parm_cd)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_requestor>()
                .Property(e => e.parm_value)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_requestor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_restart_requestor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_fkerror>()
                .Property(e => e.fk_tablename)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_fkerror>()
                .Property(e => e.fk_error)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_fkerror>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.impexp_source_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.transaction_set_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.master_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.master_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.required_for_import)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.scheduled_import)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.impexp_source_desc)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.transaction_set_desc)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_hdr>()
                .Property(e => e.transaction_sus_path)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.import_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.import_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.bo_instancename)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.ds_dataobject)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.dw_dataobject)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.import_set_no)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.key_value)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.key_value_table)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.display_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.suspense_data)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.error_data)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_line>()
                .Property(e => e.source_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_settings>()
                .Property(e => e.impexp_source_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_settings>()
                .Property(e => e.transaction_set_id)
                .IsUnicode(false);

            modelBuilder.Entity<import_suspense_settings>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.temp_table_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.file_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.import_display_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.import_target_table)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.database_version)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.ds_dataobject)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.select_string)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.decimal_initial_value_string)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .Property(e => e.legacy_temp_table_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_temp_table_x_file>()
                .HasMany(e => e.import_val_status)
                .WithRequired(e => e.import_temp_table_x_file)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<import_val_status>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<import_val_status>()
                .Property(e => e.column_label)
                .IsUnicode(false);

            modelBuilder.Entity<import_val_status>()
                .Property(e => e.column_type)
                .IsUnicode(false);

            modelBuilder.Entity<import_val_status>()
                .Property(e => e.validation_sql)
                .IsUnicode(false);

            modelBuilder.Entity<import_val_status>()
                .Property(e => e.groupby_column_list)
                .IsUnicode(false);

            modelBuilder.Entity<import_val_status>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<import_val_status>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<incoming_freight_charge>()
                .Property(e => e.start_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<incoming_freight_charge>()
                .Property(e => e.end_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<incoming_freight_charge>()
                .Property(e => e.freight_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<incoming_freight_charge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<incoming_freight_charge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<installment_dates_10005>()
                .Property(e => e.installment_pct)
                .HasPrecision(19, 4);

            modelBuilder.Entity<installment_dates_10005>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<installment_frequency_10005>()
                .Property(e => e.installment_frequency_name)
                .IsUnicode(false);

            modelBuilder.Entity<installment_frequency_10005>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<installment_frequency_10005>()
                .Property(e => e.installment_frequency_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<installment_plan_discount_pct>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<installment_plan_discount_pct>()
                .Property(e => e.discount_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<installment_plan_discount_pct>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<installment_plan_discount_pct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.day_of_month)
                .HasPrecision(2, 0);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.discount_pct)
                .HasPrecision(19, 4);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.installment_frequency_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.calendar_measure_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.discount_installment_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.rounding_installment_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.automatically_scale_years)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<installment_plans_10005>()
                .Property(e => e.use_user_defined_dates_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<installment_plans_10005>()
                .HasMany(e => e.installment_dates_10005)
                .WithRequired(e => e.installment_plans_10005)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.integration_transaction_table)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.retrieve_procedure_name)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.audit_trigger_data)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.audit_response_data)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.trigger_audit_table)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.repsonse_audit_table)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.sb_update_message)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.sb_response_message)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.sb_contract)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.sb_update_queue)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.sb_response_queue)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.sb_update_service)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.sb_response_service)
                .IsUnicode(false);

            modelBuilder.Entity<integration_audit>()
                .Property(e => e.integration_area)
                .IsUnicode(false);

            modelBuilder.Entity<integration_default>()
                .Property(e => e.default_id)
                .IsUnicode(false);

            modelBuilder.Entity<integration_default>()
                .Property(e => e.p21_key_value)
                .IsUnicode(false);

            modelBuilder.Entity<integration_default>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<integration_default>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<integration_settings>()
                .Property(e => e.integration_setting_name)
                .IsUnicode(false);

            modelBuilder.Entity<integration_settings>()
                .Property(e => e.integration_setting_value)
                .IsUnicode(false);

            modelBuilder.Entity<integration_settings>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<integration_settings>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<intercompany_acct>()
                .Property(e => e.from_company_id)
                .IsUnicode(false);

            modelBuilder.Entity<intercompany_acct>()
                .Property(e => e.to_company_id)
                .IsUnicode(false);

            modelBuilder.Entity<intercompany_acct>()
                .Property(e => e.account)
                .IsUnicode(false);

            modelBuilder.Entity<intercompany_acct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<intercompany_acct>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_currency>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<intrastat_currency>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<intrastat_currency>()
                .Property(e => e.to_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<intrastat_currency>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_currency>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.transaction_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.statistical_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.commodity_cd)
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.consignment_country)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.origin_country)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.net_mass_in_kgs)
                .HasPrecision(19, 9);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.supplementary_uom)
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<intrastat_info>()
                .Property(e => e.eu_member_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_accessory>()
                .Property(e => e.auto_populate_quantity)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_accessory>()
                .Property(e => e.scale_to_parent_quantity)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_accessory>()
                .Property(e => e.child_unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_accessory>()
                .Property(e => e.parent_unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_accessory>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_accessory>()
                .Property(e => e.link_qty_to_parent_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_accessory>()
                .Property(e => e.ship_together_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_accessory>()
                .Property(e => e.mandatory_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.adjustment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.inv_adj_description)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.rf_count_in_process_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.paperless_count_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.sort_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.affect_actual_usage_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.override_dec_prec_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.show_all_items_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.show_expected_qty_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .Property(e => e.display_found_items_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .HasMany(e => e.inv_adj_line)
                .WithRequired(e => e.inv_adj_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_adj_hdr>()
                .HasMany(e => e.rf_found_item)
                .WithRequired(e => e.inv_adj_hdr)
                .HasForeignKey(e => e.count_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.adjustment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.qty_counted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.deallocate_qty_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.wwms_deallocate_fail_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.actual_physical_count_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.recount_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.comment)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.adjust_found_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.adjustment_reason)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .Property(e => e.employee_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line>()
                .HasMany(e => e.prod_ord_comp_x_inv_adj)
                .WithOptional(e => e.inv_adj_line)
                .HasForeignKey(e => new { e.adjustment_number, e.adjustment_line_number });

            modelBuilder.Entity<inv_adj_line_recount_history>()
                .Property(e => e.cc_qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_adj_line_recount_history>()
                .Property(e => e.qty_counted)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_adj_line_recount_history>()
                .Property(e => e.bin_counted)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_recount_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_recount_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_loc_attribute_group>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_adj_loc_attribute_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_loc_attribute_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_alloc_trans>()
                .Property(e => e.cancelled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_alloc_trans>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_alloc_trans>()
                .Property(e => e.allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_alloc_trans>()
                .Property(e => e.adjustment)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_alloc_trans>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<inv_alloc_trans>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<inv_alloc_trans>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_alloc_trans>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_alloc_trans>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_bin>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin>()
                .HasMany(e => e.inv_tran_bin_detail)
                .WithRequired(e => e.inv_bin)
                .HasForeignKey(e => new { e.company_id, e.location_id, e.bin, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_cost_edit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_cost_edit>()
                .Property(e => e.new_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_cost_edit>()
                .Property(e => e.variance_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<inv_cost_edit>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<inv_excise_tax>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_excise_tax>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_excise_tax>()
                .Property(e => e.use_excise_tax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_excise_tax>()
                .Property(e => e.excise_tax_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_excise_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_excise_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_hdr>()
                .Property(e => e.inv_group_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_hdr>()
                .HasMany(e => e.inv_group_region)
                .WithRequired(e => e.inv_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_group_hdr>()
                .HasMany(e => e.inv_group_loc_allocation)
                .WithRequired(e => e.inv_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_group_loc_allocation>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_group_loc_allocation>()
                .Property(e => e.authorized_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_loc_allocation>()
                .Property(e => e.aia_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_group_loc_allocation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_loc_allocation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_region>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_region>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_region>()
                .HasMany(e => e.inv_group_region_loc)
                .WithRequired(e => e.inv_group_region)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_group_region_loc>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_group_region_loc>()
                .Property(e => e.dest_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_group_region_loc>()
                .Property(e => e.create_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_region_loc>()
                .Property(e => e.ship_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_region_loc>()
                .Property(e => e.receive_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_region_loc>()
                .Property(e => e.adjust_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_region_loc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_group_region_loc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.equip_model_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.equip_serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.manufacture_date)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.job_site_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.job_site_phone)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.job_site_address1)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.job_site_address2)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.job_site_city)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.job_site_state)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.job_site_zip)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.submitted_by_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.submitted_by_email)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.respond_to_email)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.respond_to_fax)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.respond_to_phone)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.web_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.respond_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_dealer_warranty>()
                .Property(e => e.job_site_address3)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_salesrep_rules>()
                .Property(e => e.commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_hdr_salesrep_rules>()
                .Property(e => e.original_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_salesrep_rules>()
                .Property(e => e.split_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_hdr_salesrep_rules>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_salesrep_rules>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_salesrep_rules>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_salesrep_rules>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .Property(e => e.fc_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .Property(e => e.overdue_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .Property(e => e.open_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .Property(e => e.credit_amt_applied)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .Property(e => e.finance_chg_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .Property(e => e.fc_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .Property(e => e.fc_grace_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .Property(e => e.minimum_finance_charge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_hdr_x_fc_inv>()
                .HasMany(e => e.credinv_x_invhdr_x_fcinv)
                .WithRequired(e => e.inv_hdr_x_fc_inv)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_hdr_x_supplier_detail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_x_supplier_detail>()
                .Property(e => e.supplier_claim_detail_data)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_x_supplier_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_hdr_x_supplier_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_issues_belting_history>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_issues_belting_history>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_issues_belting_history>()
                .Property(e => e.inv_loc_qoh)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_issues_belting_history>()
                .Property(e => e.lot_qoh)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_issues_belting_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_issues_belting_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_dealer_warranty>()
                .Property(e => e.failure_code_detail)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_dealer_warranty>()
                .Property(e => e.replacement_serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_dealer_warranty>()
                .Property(e => e.failed_model_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_dealer_warranty>()
                .Property(e => e.failed_serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_dealer_warranty>()
                .Property(e => e.failed_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_dealer_warranty>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_dealer_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_dealer_warranty>()
                .Property(e => e.date_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_salesrep_rules>()
                .Property(e => e.commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_line_salesrep_rules>()
                .Property(e => e.original_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_salesrep_rules>()
                .Property(e => e.split_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_line_salesrep_rules>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_salesrep_rules>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_salesrep_rules>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_line_salesrep_rules>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_line_salesrep_rules>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.qty_in_process)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.last_rec_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.last_rec_po_with_disc)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.gl_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.purch_or_transfer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.next_due_in_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.cos_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.sellable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.protected_stock_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.inv_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.inv_max)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.safety_stock)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.stockable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.replenishment_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.months_in_season)
                .HasPrecision(2, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.average_monthly_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.purchase_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.cycle_counting_category)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.purchase_discount_group)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.sales_discount_group)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.no_charge)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.replenishment_method)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.order_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.qty_backordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.qty_in_transit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.track_bins)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.default_in_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.period_first_stocked)
                .HasPrecision(3, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.year_first_stocked)
                .HasPrecision(4, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.usage_lock)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.usage_lock_period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.usage_lock_year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.primary_bin)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.qty_reserved_due_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.requisition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.deadstock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.lot_bin_integration)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.add_to_cycle_count)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.primary_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.on_obt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.on_release_schedule_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.on_backorder_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.buy)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.make)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.putaway_rank)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.iva_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.splittable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.min_replenishment_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.discontinued)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.allow_ds_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.allow_sp_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.service_level_pct_goal)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.pattern_manually_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.pattern_like_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.behaves_like_lock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.landed_cost_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.default_selling_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.cardlock_product_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.main_bulk_location_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.dflt_source_loc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.cycle_count_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.promotional_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.rma_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.future_standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.restricted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.drp_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.vendor_rebate_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.transfer_usage_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.manufacturer_req_stock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.fc_bin)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.pumpoff_item)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.pumpoff_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.on_future_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.on_future_prod_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.max_liability)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.max_transfer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.alt_tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.returnable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.iqs_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.slab_track_bins_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.edi_832_discontinued_sent_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.ta_rental_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.cycle_count_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.cycle_count_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.ta_rental_tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.transfer_conversion_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.ecc_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.transfer_order_point)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.transfer_order_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.critical_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.deviation_mult_one_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.deviation_mult_two_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.deviation_mult_three_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.crit_item_deviation_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.crit_min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.crit_max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.osmi_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.local_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.add_to_cycle_count_reason)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.purchase_increment_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .Property(e => e.transfer_increment_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc>()
                .HasMany(e => e.fifo_layers)
                .WithRequired(e => e.inv_loc)
                .HasForeignKey(e => new { e.location_id, e.company_id, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_loc>()
                .HasMany(e => e.inv_bin)
                .WithRequired(e => e.inv_loc)
                .HasForeignKey(e => new { e.location_id, e.company_id, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_loc>()
                .HasMany(e => e.inv_loc_aqnet)
                .WithRequired(e => e.inv_loc)
                .HasForeignKey(e => new { e.location_id, e.company_id, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_loc>()
                .HasMany(e => e.inv_loc_expedite_time)
                .WithRequired(e => e.inv_loc)
                .HasForeignKey(e => new { e.location_id, e.company_id, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_loc>()
                .HasMany(e => e.inv_loc_price_protection)
                .WithRequired(e => e.inv_loc)
                .HasForeignKey(e => new { e.location_id, e.company_id, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_loc>()
                .HasMany(e => e.inv_loc_price_multiplier)
                .WithRequired(e => e.inv_loc)
                .HasForeignKey(e => new { e.location_id, e.company_id, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_loc>()
                .HasMany(e => e.lots)
                .WithRequired(e => e.inv_loc)
                .HasForeignKey(e => new { e.location_id, e.company_id, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price16)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price17)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price18)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price19)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.price20)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_additional_price>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_aqnet>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_aqnet>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_aqnet>()
                .Property(e => e.updated_by_aqnet_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_aqnet>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_aqnet>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_cust_reserve>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_cust_reserve>()
                .Property(e => e.reserve_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_cust_reserve>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_cust_reserve>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_expedite_time>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_expedite_time>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_expedite_time>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_expedite_time>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_msp>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_msp>()
                .Property(e => e.receipt_process_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_msp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_msp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_16)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_17)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_18)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_19)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_multiplier>()
                .Property(e => e.multiplier_20)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.price_protection_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.do_not_protect_unrcvd_rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.price_protection_dollars)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.price_protection_dollars_customer)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_mac)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_mac_reason)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .Property(e => e.future_list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_price_protection>()
                .HasMany(e => e.pending_price_protection)
                .WithRequired(e => e.inv_loc_price_protection)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_loc_salesrep>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_salesrep>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_salesrep>()
                .Property(e => e.enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_salesrep>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_to_transfer)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_for_production)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_for_process)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_on_release_schedule)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_in_production)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_non_pickable)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_quarantined)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_frozen)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_on_sales_order)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_on_sales_quote)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_on_special_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_on_ds_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_stock_status>()
                .Property(e => e.qty_on_special_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.weight)
                .HasPrecision(19, 12);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.net_weight)
                .HasPrecision(19, 12);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.inactive)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.cube)
                .HasPrecision(19, 12);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.catch_weight_indicator)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.purchasing_weight)
                .HasPrecision(19, 12);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.upc_or_ean)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.upc_or_ean_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.serialized)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.product_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.hose)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.fitting)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.d_length)
                .HasPrecision(6, 4);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.catalog_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.short_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.track_lots)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.requisition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.default_product_group)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.default_sales_discount_group)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.default_purchase_disc_group)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.sales_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.sales_pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.purchase_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.purchase_pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.other_charge_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.invoice_type)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.pick_ticket_type)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.default_selling_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.update_via_pricing_service)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.default_purchasing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.hi)
                .HasPrecision(6, 0);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.ti)
                .HasPrecision(6, 0);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.convert_quantities)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.haz_mat_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.class_code)
                .HasPrecision(6, 2);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.item_terms_discount_pct)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.default_transfer_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.keywords)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.fulltext_timestamp)
                .IsFixedLength();

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.vendor_consigned)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.use_tags_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.base_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.shippable_unit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.auto_allocation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.iva_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.restricted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.parker_product_cd)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.parker_division_cd)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.service_terms_discount_pct)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.service_commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.override_specific_costing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.sold_outside_us_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.configurable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.commodity_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.spa_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.unspsc_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.dci_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.epa_cert_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.aia_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.aia_remnant_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.avail_for_sch_delivery_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.manufacturer_program_type_pct)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.use_revisions_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.use_oc_tax_rules_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.tally_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.oc_print_on_pick_ticket_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.oc_print_on_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.single_use_or_reusable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.unitconv_override_oe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.unitconv_override_purc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.item_sales_tax_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.lifo_pool_item_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.country_of_origin_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.catch_lot_weight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.redemption_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.redemption_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.bo_fill_canadian_purchase_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.country_of_origin_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.apply_state_fuel_surcharge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.type_of_sale)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.commission_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.drum_pickup_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.item_notes)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.retail_accessories)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.hazmat_ormd_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.functional_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.suppress_from_web_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.round_prices)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.pumpoff_item)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.pumpoff_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.conoco_division_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.buy_get_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.label_group_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.cylinder_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.core_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.generic_item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.allow_custom_desc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.manufacturer_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.brand_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.part_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.do_not_auto_allocate_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.exclude_order_level_discount_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.sample_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.core_parent_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.partner_program_labor_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.iqs_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.import_as_direct_ship_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.do_not_field_destroy_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.rolled_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.exclude_from_edi832_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.order_hold_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.default_direct_ship_disp_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.packing_weight_tracking_option)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.tariff_surcharge_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.exclude_from_auto_short_buy_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.item_classification_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.bol_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.rental_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.dflt_dimension_scale)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.ecc_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.local_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.cfc_license_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.cpq_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.equipment_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.product_tier)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast>()
                .Property(e => e.default_transfer_increment_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.alarm_code_x_inv_mast)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.alternate_code)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasOptional(e => e.assembly_hdr)
                .WithRequired(e => e.inv_mast);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.assembly_hdr_location)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.assembly_hdr_make_days)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.assembly_line)
                .WithRequired(e => e.inv_mast)
                .HasForeignKey(e => e.component_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.average_inventory_value)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.bill_to_category_items)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.bin_replenishment)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.box_item_x_each_item)
                .WithRequired(e => e.inv_mast)
                .HasForeignKey(e => e.box_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.box_item_x_each_item1)
                .WithRequired(e => e.inv_mast1)
                .HasForeignKey(e => e.each_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.calendar_based_delivery)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.calendar_based_reading_hist)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.carrier_analytics_contract_pricing)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.carrier_analytics_item_pricing)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.carrier_contract_line)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.contact_filter_tracking)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.core_status_family_detail)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.cust_x_inv_mast_edi846)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.customers)
                .WithOptional(e => e.inv_mast)
                .HasForeignKey(e => e.delivery_charge_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.customer_retail_item)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.customer_strategic_item)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.degree_days_delivery)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.demand_line_point)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.dispatcher_pricing_hdr)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.external_count_line)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.freight_charge)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.geocom_handheld)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.group_po_receiving_items)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_adj_line)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_alloc_trans)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_cost_edit)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_excise_tax)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_loc)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_loc_msp)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_loc_salesrep)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_period_usage_temp)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_15)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasOptional(e => e.inv_mast_194)
                .WithRequired(e => e.inv_mast);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_2164)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasOptional(e => e.inv_mast_219)
                .WithRequired(e => e.inv_mast);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_additional_price)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_config_prompt)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_core)
                .WithOptional(e => e.inv_mast)
                .HasForeignKey(e => e.core_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_core1)
                .WithRequired(e => e.inv_mast1)
                .HasForeignKey(e => e.inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_damaged)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_dea)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_dealer_warranty_equip)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_dealer_warranty)
                .WithRequired(e => e.inv_mast)
                .HasForeignKey(e => e.inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_dealer_warranty1)
                .WithOptional(e => e.inv_mast1)
                .HasForeignKey(e => e.coil_labor_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_dealer_warranty2)
                .WithOptional(e => e.inv_mast2)
                .HasForeignKey(e => e.compressor_labor_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_default)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_document)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_eco_fee)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_freight_option)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_intrastat)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_labels)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_language)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_lifo_pool)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_links)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_lot)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.serial_number_extd_info)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_state_tax)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_strategic_pricing)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_trackabout)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_trade)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_web_desc)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_x_company)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_x_integration)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_x_product_service_mx)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_x_restricted_class)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_x_rewards_program)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_period_usage)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_sub)
                .WithRequired(e => e.inv_mast)
                .HasForeignKey(e => e.inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_sub1)
                .WithRequired(e => e.inv_mast1)
                .HasForeignKey(e => e.sub_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inventory_supplier)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_tran_lot_detail)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_xref)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inventory_cross_reference)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inventory_movement_error_log)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inventory_movement)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_default_x_company)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_equip)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_msds)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_mast_tire_proration)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_sub_history)
                .WithRequired(e => e.inv_mast)
                .HasForeignKey(e => e.inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.inv_sub_history1)
                .WithRequired(e => e.inv_mast1)
                .HasForeignKey(e => e.sub_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_attribute_value)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_conversion)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_count_detail)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_id_change_history)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_labor)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_list_dtl)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_notepad)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_package)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_package_type)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_revision)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_service_contract)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_service)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_service_part_list)
                .WithRequired(e => e.inv_mast)
                .HasForeignKey(e => e.inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_service_part_list1)
                .WithRequired(e => e.inv_mast1)
                .HasForeignKey(e => e.part_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_uom)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.item_category_x_inv_mast)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.job_price_batch_line)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.labor_type)
                .WithRequired(e => e.inv_mast)
                .HasForeignKey(e => e.labor_type_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.loan_surcharge)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.location_other_charge)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.medical_coupon_hdr_x_inv_mast)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.oe_line_alternate)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.oe_line_label_group)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.oe_line_loa_price_edit)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.oe_line_samples)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.oe_line_schedule)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.oe_line_trackabout_lease)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.order_import_exception)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.pallet_line)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.pda_oelist_item)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.pinpoint_item_qty_sync)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.problem_code_x_inv_mast)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.process_x_transaction_detail)
                .WithOptional(e => e.inv_mast)
                .HasForeignKey(e => e.wip_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.prod_group_dealer_warranty)
                .WithOptional(e => e.inv_mast)
                .HasForeignKey(e => e.coil_labor_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.prod_group_dealer_warranty1)
                .WithOptional(e => e.inv_mast1)
                .HasForeignKey(e => e.compressor_labor_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.prod_order_line_component)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.prod_order_line_comp_frght)
                .WithRequired(e => e.inv_mast)
                .HasForeignKey(e => e.component_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.prod_order_line)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.prod_pick_ticket_detail)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.rewards_program)
                .WithOptional(e => e.inv_mast)
                .HasForeignKey(e => e.maf_surcharge_oc_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.rf_found_item)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.serial_number)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.service_warranty_part)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.service_inv_mast)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.service_inv_mast_part_list)
                .WithRequired(e => e.inv_mast)
                .HasForeignKey(e => e.part_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.service_warranty_item)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.service_inv_warranty_part)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.ship_to_pumpoff)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.ship_to_x_inv_mast)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.shopping_cart_allocation)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.stages)
                .WithOptional(e => e.inv_mast)
                .HasForeignKey(e => e.wip_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.stage_x_process)
                .WithOptional(e => e.inv_mast)
                .HasForeignKey(e => e.wip_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.supplier_item_conversion)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.swisslog_transaction)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.tag_detail)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.tag_document_line)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.tag_picking_criteria)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.tax_exception_list_x_inv_mast)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.terms)
                .WithOptional(e => e.inv_mast)
                .HasForeignKey(e => e.discount_inv_mast_uid);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.tpcx_dead_stock)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.transaction_charge)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.transfer_backorders)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.unit_type_master_detail)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.valve_info)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.workbench_x_users_pick)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.work_order_item)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast>()
                .HasMany(e => e.work_order_type)
                .WithRequired(e => e.inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.next_review_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.language_item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.item_desc_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.class_id6)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.class_id7)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.class_id8)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.class_id9)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_15>()
                .Property(e => e.class_id10)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_194>()
                .Property(e => e.core_charge)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_194>()
                .Property(e => e.core_value)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_mast_2164>()
                .Property(e => e.import_baac_approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_2164>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_2164>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_219>()
                .Property(e => e.item_search_desc)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_219>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price16)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price17)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price18)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price19)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.price20)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_additional_price>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_assem_info>()
                .Property(e => e.hose_fitting_d_length)
                .HasPrecision(19, 8);

            modelBuilder.Entity<inv_mast_assem_info>()
                .Property(e => e.hose_fitting_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_assem_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_assem_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_config_prompt>()
                .Property(e => e.prompt)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_config_prompt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_config_prompt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_config_prompt>()
                .HasMany(e => e.oe_line_config_prompt)
                .WithRequired(e => e.inv_mast_config_prompt)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast_core>()
                .Property(e => e.associate_core_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_core>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_core>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_coredisc>()
                .Property(e => e.no_of_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_mast_coredisc>()
                .Property(e => e.discount_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_coredisc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_coredisc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.damage_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.short_description)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.condition_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.damaged_item_serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .HasMany(e => e.inv_mast_damaged_documents)
                .WithRequired(e => e.inv_mast_damaged)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast_damaged>()
                .HasMany(e => e.inv_mast_damaged_image)
                .WithRequired(e => e.inv_mast_damaged)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_mast_damaged_documents>()
                .Property(e => e.other_document_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged_documents>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged_documents>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged_image>()
                .Property(e => e.image_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged_image>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_damaged_image>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.dea_schedule)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.catalog_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.ndc_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.arcos_report)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.pedigree_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.pedigree_manufacturer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.dosage_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.dosage_strength)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.dosage_form)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.ndc_package_type)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.ndc_package_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_mast_dea>()
                .Property(e => e.ndc_package_size_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dealer_warranty>()
                .Property(e => e.return_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_mast_dealer_warranty>()
                .Property(e => e.return_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dealer_warranty>()
                .Property(e => e.require_date_code_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dealer_warranty>()
                .Property(e => e.require_failed_part_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dealer_warranty>()
                .Property(e => e.require_equipment_dtl_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dealer_warranty>()
                .Property(e => e.coil_labor_charge_credit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_dealer_warranty>()
                .Property(e => e.compressor_labor_charge_credit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_dealer_warranty>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dealer_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dealer_warranty_equip>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_dealer_warranty_equip>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default>()
                .Property(e => e.standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default>()
                .Property(e => e.requisition_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default>()
                .Property(e => e.sellable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.supplier_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.supplier_list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_default_x_company>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_document>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_document>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_eco_fee>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_eco_fee>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_eco_fee>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_eco_fee>()
                .Property(e => e.fee_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_equip>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_equip>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_equip>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_freight_option>()
                .Property(e => e.no_freight_allowed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_freight_option>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_freight_option>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_freight_option>()
                .Property(e => e.override_profit_limits_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_freight_option>()
                .Property(e => e.minimum_order_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_freight_option>()
                .Property(e => e.maximum_order_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_freight_option>()
                .Property(e => e.freight_always_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_intrastat>()
                .Property(e => e.commodity_cd)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_intrastat>()
                .Property(e => e.net_mass_in_kgs)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_intrastat>()
                .Property(e => e.supplementary_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_intrastat>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_intrastat>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_labels>()
                .Property(e => e.labels)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_labels>()
                .Property(e => e.label_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_labels>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language>()
                .Property(e => e.language_item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language>()
                .Property(e => e.item_desc_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language>()
                .Property(e => e.language_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lifo_pool>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_lifo_pool>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_lifo_pool>()
                .Property(e => e.pool_index)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_lifo_pool>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lifo_pool>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lifo_pool>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_mast_links>()
                .Property(e => e.link_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links>()
                .Property(e => e.link_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links>()
                .Property(e => e.last_modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.auto_assign_lots)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.lot_assignment_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.use_lot_cost_as_inventory_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.use_system_setting_lot_assign)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.thirty_day_month_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.track_lot_shelf_life_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.shelf_life_guar_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.use_last_customer_lot_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.item_lot_exp_warning_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.belt_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.belt_remnant_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.belt_remnant_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.minimum_belt_width_increment)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.purchasing_belt_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.purchasing_belt_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.use_lot_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_lot>()
                .Property(e => e.scrap_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.msds_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.dept_of_transportaion_message)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.msds_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.always_print_msds_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.bol_id_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.bol_hazardous_notes)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.bol_hazard_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.bol_packing_group)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_msds>()
                .Property(e => e.bol_class_or_rate)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_state_tax>()
                .Property(e => e.state_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_state_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_state_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_strategic_pricing>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_strategic_pricing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_strategic_pricing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_strategic_pricing>()
                .Property(e => e.item_coreness_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_taxinfo>()
                .Property(e => e.wee_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_taxinfo>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_taxinfo>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_tire_proration>()
                .Property(e => e.prorated_credit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_tire_proration>()
                .Property(e => e.total_tread_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_mast_tire_proration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_tire_proration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trackabout>()
                .Property(e => e.empty_cylinder_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trackabout>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trackabout>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trackabout>()
                .Property(e => e.lease_agreement_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trackabout>()
                .Property(e => e.auto_renew_lease_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trackabout>()
                .Property(e => e.fill_on_demand_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.broker_description)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.import_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.import_tariff_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.export_tariff_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.added_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.nafta_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.import_tariff_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.export_tariff_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.scrap_tariff_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.lacey_intended_use)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.schedule_b_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.hts_classification)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.tax_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.harmonized_tax)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.preference_criterion)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.producer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.net_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.eccn)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.joint_production_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_trade>()
                .Property(e => e.regional_value_calc_method)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_ud>()
                .Property(e => e.product_manager)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_ud>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_ud>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_ud>()
                .Property(e => e.split_brand_list)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_web_desc>()
                .Property(e => e.web_desc1)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_web_desc>()
                .Property(e => e.web_desc2)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_web_desc>()
                .Property(e => e.web_desc3)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_web_desc>()
                .Property(e => e.web_desc4)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_web_desc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_web_desc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_company>()
                .Property(e => e.moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_company>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_company>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_integration>()
                .Property(e => e.sync_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_product_service_mx>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_product_service_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_product_service_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_product_service_mx>()
                .Property(e => e.product_service_cd)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_product_service_mx>()
                .Property(e => e.product_service_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_product_service_mx>()
                .Property(e => e.cartaporte_hazmat_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_product_service_mx>()
                .Property(e => e.cartaporte_packaging_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_product_service_mx>()
                .Property(e => e.cartaporte_packaging_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_restricted_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_restricted_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_restricted_class>()
                .Property(e => e.exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_restricted_class>()
                .Property(e => e.qty_restr_per_time_period_sku_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_restricted_class>()
                .Property(e => e.qty_restr_time_period)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_restricted_class>()
                .Property(e => e.qty_restr_per_order_limit_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_restricted_class>()
                .Property(e => e.qty_restr_per_order_fixed_sku_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_restricted_class>()
                .Property(e => e.qty_restr_per_order_average_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.coop_dollar_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.incentive_points_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.rebate_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.rebate_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.max_program_dollar)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.max_order_dollar)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.max_program_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.max_order_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_rewards_program>()
                .Property(e => e.min_order_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.inv_period_usage1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.scheduled_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.forecast_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.forecast_deviation_percentage)
                .HasPrecision(19, 8);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.mad_percentage)
                .HasPrecision(19, 8);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.filtered_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.number_of_orders)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.number_of_hits)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.usage_copied)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.mean_absolute_percent_error)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.exceptional_sales_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.exceptional_deviation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.reviewed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.usage_notes)
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.forecast_adjustment_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.saved_filtered_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.inv_period_usage_this_location)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage>()
                .Property(e => e.imported)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage>()
                .HasMany(e => e.demand_review_adjustment)
                .WithRequired(e => e.inv_period_usage)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_period_usage_temp>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_period_usage_temp>()
                .Property(e => e.inv_period_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage_temp>()
                .Property(e => e.scheduled_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_period_usage_temp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_period_usage_temp>()
                .Property(e => e.imported_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.inv_ranking_criteria_cd)
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.inv_ranking_criteria_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.from_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.to_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.from_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.to_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.rank_value)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.cost_basis)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.filter_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.from_rank)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.to_rank)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.beg_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.end_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.rdc_ranking)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_ranking_criteria>()
                .Property(e => e.purchase_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_rcpts_x_vendor_invoice>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_rcpts_x_vendor_invoice>()
                .Property(e => e.vendor_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_rcpts_x_vendor_invoice>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_rcpts_x_vendor_invoice>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.sales_value)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.cost_value)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.units_sold)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.profit)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.item_rank_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.cumulative_rank_value)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.cumulative_rank_percent)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.rank_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_reclassification_detail>()
                .Property(e => e.new_purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_reclassification_work>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_reclassification_work>()
                .Property(e => e.total_value)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inv_reclassification_work>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_reclassification_work>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub>()
                .Property(e => e.sub_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub>()
                .Property(e => e.interchangeable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub_history>()
                .Property(e => e.receipt_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_sub_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_supp_auto_update_price>()
                .Property(e => e.auto_update_prices_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_supp_auto_update_price>()
                .Property(e => e.auto_update_prices_source_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_supp_auto_update_price>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_supp_auto_update_price>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_supp_auto_update_price>()
                .Property(e => e.auto_update_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_supplier_x_loc_pricing>()
                .Property(e => e.standard_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_supplier_x_loc_pricing>()
                .Property(e => e.special_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_supplier_x_loc_pricing>()
                .Property(e => e.supplier_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_supplier_x_loc_pricing>()
                .Property(e => e.update_supplier_value_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_supplier_x_loc_pricing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_supplier_x_loc_pricing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.use_bin_capability)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.inv_scan_1)
                .HasPrecision(1, 0);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.inv_scan_2)
                .HasPrecision(1, 0);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.inv_scan_3)
                .HasPrecision(1, 0);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.inv_scan_4)
                .HasPrecision(1, 0);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.inv_scan_5)
                .HasPrecision(1, 0);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.inv_scan_6)
                .HasPrecision(1, 0);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.inventory_costing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.high_avg_monthly_usage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.mid_avg_monthly_usage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.low_avg_monthly_usage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.high_velocity_level)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.mid_velocity_level)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.number_of_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.min_exceptional_sale)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.exceptional_sales_percent)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.order_hit_percent)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.default_uom)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.maintain_moving_average_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.exclude_due_in_from_netstock)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.rounding_factor)
                .HasPrecision(5, 4);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.allow_uncosted_adjustments)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.default_adjustment_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.use_lot_capability)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.use_serial_capability)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.track_serial_dimensions_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_system_parameters>()
                .Property(e => e.dimension_scale_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.trans_type)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.unit_cost_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.freight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.reserved_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.on_hand_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.allocated_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.backordered_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.on_po_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.in_transit_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.sub_document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.qty_on_bo)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.qty_on_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.qty_in_transit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.qty_reserved_due_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.in_process_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.qty_in_process)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran>()
                .Property(e => e.used_specific_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran>()
                .HasMany(e => e.fifo_layer_transaction)
                .WithRequired(e => e.inv_tran)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_tran>()
                .HasMany(e => e.special_inv_layer)
                .WithRequired(e => e.inv_tran)
                .HasForeignKey(e => e.inv_tran_transaction_number)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_tran>()
                .HasMany(e => e.special_inv_layer_tran)
                .WithRequired(e => e.inv_tran)
                .HasForeignKey(e => e.inv_tran_transaction_number)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_tran_bin_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran_bin_detail>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_tran_bin_detail>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran_bin_detail>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran_bin_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran_bin_detail>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran_lot_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran_lot_detail>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_tran_lot_detail>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran_lot_detail>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran_lot_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran_lot_detail>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran_lot_detail>()
                .Property(e => e.sku_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_tran_serial_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran_serial_detail>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_tran_serial_detail>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_tran_serial_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.their_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.default_source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.customer_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.baseline_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.requestor)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.department)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.category)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.miscellaneous1)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.miscellaneous2)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.miscellaneous3)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.their_bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.vmi_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.last_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.on_hand_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.min_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.max_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.min_update_on_852_import_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.max_update_on_852_import_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.direct_ship_disposition_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.last_price_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.extended_description)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.avg_unit_sell_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.item_label_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.item_label_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.item_label_action_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.item_label_text)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.item_label_calc_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref>()
                .Property(e => e.item_label_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_xref>()
                .HasMany(e => e.cust_part_no_notepad)
                .WithRequired(e => e.inv_xref)
                .HasForeignKey(e => new { e.company_id, e.customer_id, e.their_item_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_xref>()
                .HasMany(e => e.inv_xref_supplier_info)
                .WithRequired(e => e.inv_xref)
                .HasForeignKey(e => new { e.company_id, e.customer_id, e.their_item_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inv_xref>()
                .HasMany(e => e.price_page)
                .WithOptional(e => e.inv_xref)
                .HasForeignKey(e => new { e.company_id, e.customer_id, e.customer_part_no });

            modelBuilder.Entity<inv_xref_230>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_230>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_230>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.department)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.tax_cd)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.order_point)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.order_qty)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.change)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.bin_location)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.category)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.special_status)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.max_qty)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_741>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_supplier_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_supplier_info>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_xref_supplier_info>()
                .Property(e => e.their_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_supplier_info>()
                .Property(e => e.customer_part_number_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_supplier_info>()
                .Property(e => e.preferred_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_xref_supplier_info>()
                .Property(e => e.supplier_contract_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_xref_supplier_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_supplier_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_1)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_2)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_3)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_4)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_5)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_6)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_7)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_8)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_9)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.user_def_10)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_xref_udf>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_card>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_card>()
                .Property(e => e.inventory_card_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_card>()
                .Property(e => e.qty_counted)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_card>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_card>()
                .Property(e => e.added_to_physical_count)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_card>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_cross_reference>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_cross_reference>()
                .Property(e => e.manufacturer)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_cross_reference>()
                .Property(e => e.model_number)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_cross_reference>()
                .Property(e => e.major_category)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_cross_reference>()
                .Property(e => e.minor_category)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_cross_reference>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_cross_reference>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.asset_account)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.revenue_account)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.cos_account)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.protected_stock_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.inv_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.inv_max)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.safety_stock)
                .HasPrecision(4, 0);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.emq)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.stockable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.replenishment_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.replenishment_method)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.serialized)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.sales_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.sales_pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.lead_time_days)
                .HasPrecision(4, 0);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.avg_lead_time)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.purchase_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.purchase_pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.track_lots)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.track_bins)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.default_sales_discount_group)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.default_purchase_disc_group)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.default_bin)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.buy)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.make)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.receipt_process_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.default_base_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.base_unit_is_item_uom)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.service_level_pct_goal)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.service_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.service_division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.service_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.manufacturing_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.standard_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.special_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.supplier_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.override_profit_limits_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.minimum_order_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.maximum_order_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.avail_for_sch_delivery_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.rma_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.vendor_rebate_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.drp_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.purchase_class)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.deviation_mult_one_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.deviation_mult_two_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.deviation_mult_three_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.crit_item_deviation_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.crit_min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults>()
                .Property(e => e.crit_max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_defaults_335>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults_335>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_defaults_335>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults_335>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults_335>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_defaults_335>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_issues_audit>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_issues_audit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_links>()
                .Property(e => e.link_name)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_links>()
                .Property(e => e.link_path)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_links>()
                .Property(e => e.last_modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.qty_to_move)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.qty_moved)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_movement>()
                .Property(e => e.qty_cancelled)
                .HasPrecision(19, 6);

            modelBuilder.Entity<inventory_movement>()
                .HasMany(e => e.inventory_movement_deposit)
                .WithRequired(e => e.inventory_movement)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_movement>()
                .HasMany(e => e.inventory_movement_pick_bin)
                .WithRequired(e => e.inventory_movement)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_movement_deposit>()
                .Property(e => e.sku_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_deposit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_deposit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_deposit_log>()
                .Property(e => e.current_process)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_deposit_log>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_deposit_log>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_deposit_log>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_deposit_log>()
                .Property(e => e.from_bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_deposit_log>()
                .Property(e => e.to_bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_deposit_log>()
                .Property(e => e.lot_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_deposit_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_deposit_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.qty_to_move)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.pickable_inv_bin_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.inv_bin_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.pickable_lot_bin_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.lot_bin_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.pickable_lot_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.lot_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.im_bin_qty_to_pick)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.im_lot_bin_qty_to_pick)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.im_lot_qty_to_pick_not_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.allocated_lot_qty_available_for_im)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.frozen_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.consolidated_bin_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.non_pickable_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.pick_locked_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.rf_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.nopick_zone_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.list_of_bins)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_error_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_pick_bin>()
                .Property(e => e.qty_to_pick)
                .HasPrecision(19, 6);

            modelBuilder.Entity<inventory_movement_pick_bin>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_pick_bin>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_movement_pick_bin>()
                .Property(e => e.qty_picked)
                .HasPrecision(19, 6);

            modelBuilder.Entity<inventory_movement_pick_bin>()
                .Property(e => e.qty_cancelled)
                .HasPrecision(19, 6);

            modelBuilder.Entity<inventory_receipt_attribute_value>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipt_attribute_value>()
                .Property(e => e.attribute_value)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipt_attribute_value>()
                .Property(e => e.transaction_line_no)
                .HasPrecision(9, 0);

            modelBuilder.Entity<inventory_receipt_location>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipt_location>()
                .Property(e => e.receipt_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipt_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipt_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipt_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.po_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.vouch_complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.freight_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.receipt_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.packing_slip_number)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.receiver_number)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.external_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.inv_receipts_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .HasMany(e => e.apinv_hdr_x_inventory_receipts)
                .WithRequired(e => e.inventory_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .HasMany(e => e.inv_rcpts_x_vendor_invoice)
                .WithRequired(e => e.inventory_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .HasMany(e => e.inventory_receipt_location)
                .WithRequired(e => e.inventory_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .HasMany(e => e.inventory_receipts_line)
                .WithRequired(e => e.inventory_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .HasMany(e => e.inventory_receipts_hdr_1348)
                .WithRequired(e => e.inventory_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_receipts_hdr>()
                .HasMany(e => e.lc_driver_x_receipts_hdr)
                .WithRequired(e => e.inventory_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_receipts_hdr_1348>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipts_hdr_1348>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_hdr_1348>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.vouch_complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.qty_vouched)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.extended_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.amount_vouched)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.freight_amount_vouched)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.unit_cost_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.extended_cost_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.freight_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.qty_disassembled)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.qty_lost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.msp_landed_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.substitute_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.transfer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.vessel_landed_cost_posted_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.wrong_part_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.pallet_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.receipt_removed_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.direct_ship_freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.exclude_from_landed_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .Property(e => e.employee_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .HasMany(e => e.apinv_line_x_inv_receipts_line)
                .WithRequired(e => e.inventory_receipts_line)
                .HasForeignKey(e => new { e.receipt_number, e.receipt_line })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .HasMany(e => e.oe_line_po_x_inv_receipts_line)
                .WithRequired(e => e.inventory_receipts_line)
                .HasForeignKey(e => new { e.receipt_number, e.receipt_line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_receipts_line>()
                .HasMany(e => e.po_schedule_receipts)
                .WithRequired(e => e.inventory_receipts_line)
                .HasForeignKey(e => new { e.receipt_number, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_receipts_line_issue>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_receipts_line_issue>()
                .Property(e => e.quality_issue_reason_code)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line_issue>()
                .Property(e => e.quantity_issue_reason_code)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line_issue>()
                .Property(e => e.issue_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line_issue>()
                .Property(e => e.issue_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_receipts_line_issue>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line_issue>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line_issue>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_receipts_line_issue>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.freight_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.restocking_fee_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.restocking_fee_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.rma_number)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.po_reference_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.ship2_name)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.ship2_address1)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.ship2_address2)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.ship2_city)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.ship2_state)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.ship2_zip)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.ship2_country)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.ship2_phone)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.carrier_tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.charge_freight_to_vendor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.inv_receipts_clearing_acct)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.ship2_address3)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.blind_ship_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.fob)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.tracking_no_list)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.expedite_notes)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .Property(e => e.warranty_inventory_return_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .HasMany(e => e.inventory_return_line)
                .WithRequired(e => e.inventory_return_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_return_hdr>()
                .HasMany(e => e.inventory_return_hdr_x_jc_job)
                .WithRequired(e => e.inventory_return_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_return_hdr_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_return_hdr_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr_x_jc_job>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr_x_jc_job>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_hdr_x_jc_job>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.extended_description)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.quantity_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.quantity_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.qty_to_return)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.qty_picked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.qty_returned)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.qty_vouched)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.unit_price_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.price_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.price_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.price_edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.supplier_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line>()
                .Property(e => e.core_item_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_return_line>()
                .HasMany(e => e.inventory_return_line_notepad)
                .WithRequired(e => e.inventory_return_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_return_line_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_return_line_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_return_line_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.lead_time_days)
                .HasPrecision(4, 0);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.upc_code)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.check_digit)
                .HasPrecision(1, 0);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.catalog_name)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.catalog_page)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.msds)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.supplier_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.supplier_sort_code)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.manufacturing_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.backhaul_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.backhaul_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.supplier_purchase_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.freight_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.future_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.future_list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.minimum_units_for_purchase)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.uom_for_minimum_units)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.minimum_purchase_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.incremental_purchase_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.dflt_purchase_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.dflt_purchase_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.dflt_purchase_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.dflt_purchase_pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.primary_supplier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.record_usage_actual_loc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.ean_code)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.buyback_supplier_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .Property(e => e.buyback_uom)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier>()
                .HasMany(e => e.cust_x_invsupplier_freight)
                .WithRequired(e => e.inventory_supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_supplier>()
                .HasMany(e => e.inv_supp_auto_update_price)
                .WithRequired(e => e.inventory_supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_supplier>()
                .HasMany(e => e.inventory_supplier_x_loc)
                .WithRequired(e => e.inventory_supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_supplier>()
                .HasMany(e => e.inventory_supplier_ext)
                .WithRequired(e => e.inventory_supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_supplier>()
                .HasMany(e => e.inventory_supplier_trade)
                .WithRequired(e => e.inventory_supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_supplier>()
                .HasMany(e => e.inventory_supplier_pricing)
                .WithRequired(e => e.inventory_supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_supplier>()
                .HasMany(e => e.inventory_supplier_x_uom)
                .WithRequired(e => e.inventory_supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_supplier_1348>()
                .Property(e => e.apply_disc_from_supplier_list)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_1348>()
                .Property(e => e.discount1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_1348>()
                .Property(e => e.discount2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_1348>()
                .Property(e => e.discount3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_1348>()
                .Property(e => e.discount4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_1348>()
                .Property(e => e.discount5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_1348>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_1348>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_31>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_31>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_supplier_31>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_supplier_31>()
                .Property(e => e.supplier_freight)
                .HasPrecision(19, 2);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.bulk_buy_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.bulk_buy_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.bulk_buy_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.bulk_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.box_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.broken_box_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.cha_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.cha_bulk_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_ext>()
                .Property(e => e.broken_box_not_allowed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.increment_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.box_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.box_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.box_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.box_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.box_height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.box_volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.case_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.case_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.case_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.case_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.case_height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.case_volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.master_carton_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.master_carton_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.master_carton_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.master_carton_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.master_carton_height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.master_carton_volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.tier_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.tier_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.tier_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.tier_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.tier_height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.tier_volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.pallet_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.pallet_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.pallet_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.pallet_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.pallet_height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.pallet_volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.truckload_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.truckload_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.truckload_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.truckload_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.truckload_height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.truckload_volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_package_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_pricing>()
                .Property(e => e.supplier_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_pricing>()
                .Property(e => e.update_supplier_value_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_pricing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_pricing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_trade>()
                .Property(e => e.certificate_of_origin_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_trade>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_trade>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_trade>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.primary_supplier)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.loc_list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.loc_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.loc_contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.override_vmi_status_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.key_vmi_indicator_changed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.future_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.future_list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .Property(e => e.purchase_increment_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_x_loc>()
                .HasMany(e => e.inv_supplier_x_loc_pricing)
                .WithRequired(e => e.inventory_supplier_x_loc)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<inventory_supplier_x_uom>()
                .Property(e => e.supplier_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_uom>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_uom>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_x_uom>()
                .Property(e => e.gtin_code)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable>()
                .Property(e => e.account_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable>()
                .Property(e => e.account_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable>()
                .Property(e => e.account_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable>()
                .Property(e => e.gl_inventory_value_type)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_all>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_all>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_all>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_all>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_all>()
                .Property(e => e.gl_inventory_value_type)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_differences>()
                .Property(e => e.gl_sum)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_value_analysis_accounttable_differences>()
                .Property(e => e.iv_sum)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_value_analysis_accounttable_differences>()
                .Property(e => e.diff)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_value_analysis_accounttable_differences>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_differences>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_differences>()
                .Property(e => e.gl_sql)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_differences>()
                .Property(e => e.iv_sql)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_summary>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_summary>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_summary>()
                .Property(e => e.account_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_summary>()
                .Property(e => e.gl_inventory_value_type)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_summary>()
                .Property(e => e.account_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_summary>()
                .Property(e => e.account_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_analysis_accounttable_summary>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.inventory_costing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.delta_qty_on_hand)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.layer_qty_on_hand)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.delta_cost)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.old_cost)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.new_cost)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.delta_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.trans_type)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.record_action)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.layer_old_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items_history>()
                .Property(e => e.layer_new_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventoryissuesrebuild>()
                .Property(e => e.rebuild_sp)
                .IsUnicode(false);

            modelBuilder.Entity<inventoryissuesrebuild>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventoryissuesrebuild>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesRun>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesRun>()
                .Property(e => e.run_by_user)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesRun>()
                .Property(e => e.server)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesRun>()
                .Property(e => e.db_name)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesRun>()
                .Property(e => e.db_version)
                .IsUnicode(false);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.linked_invno)
                .IsUnicode(false);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.linked_lineno)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.total_comm_amt_per_line)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.linked_qtyshipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.sku_comm_amt)
                .HasPrecision(19, 6);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.rmaline_qtyshipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.rmaline_total_comm)
                .HasPrecision(19, 6);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.new_comm_amt_per_rep)
                .HasPrecision(19, 6);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invlinesalesrep_rma_linked>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_batch>()
                .Property(e => e.invoice_batch_desc)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_batch>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_batch>()
                .Property(e => e.consolidate_by_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_batch>()
                .Property(e => e.consolidate_completed_orders_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_batch>()
                .HasMany(e => e.customers)
                .WithRequired(e => e.invoice_batch)
                .HasForeignKey(e => e.invoice_batch_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_batch>()
                .HasMany(e => e.customers1)
                .WithRequired(e => e.invoice_batch1)
                .HasForeignKey(e => e.statement_batch_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_batch>()
                .HasMany(e => e.invoice_hdr)
                .WithRequired(e => e.invoice_batch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_batch>()
                .HasMany(e => e.oe_hdr)
                .WithRequired(e => e.invoice_batch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_batch>()
                .HasMany(e => e.oe_pick_ticket)
                .WithRequired(e => e.invoice_batch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_batch>()
                .HasMany(e => e.rma_receipt_hdr)
                .WithRequired(e => e.invoice_batch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.file_path)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.digital_seal)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.cfd_certificate_sn)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.cfd_certificate)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.cfd_original_string)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.tfd_version)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.tfd_uuid)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.tfd_certified_timestamp)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.sat_seal)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.sat_certificate_sn)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.tfd_original_string)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.barcode_file)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.inv_no_display)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.rfc_emisor_cancelation)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.date_cancellation_string)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.cancellation_uuid)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.cancellation_uuid_status)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.xml_certified)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.is_payment_cfdi)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.cancellation_codigo_estatus)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.cancellation_es_cancelable)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi>()
                .Property(e => e.cancellation_estatus)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.file_path)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.digital_seal)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.cfd_certificate_sn)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.cfd_certificate)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.cfd_original_string)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.tfd_version)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.tfd_uuid)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.tfd_certified_timestamp)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.sat_seal)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.sat_certificate_sn)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.tfd_original_string)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.barcode_file)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.inv_no_display)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.rfc_emisor_cancelation)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.date_cancellation_string)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.cancellation_uuid)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.cancellation_uuid_status)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.xml_certified)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.is_payment_cfdi)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.cancellation_codigo_estatus)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.cancellation_es_cancelable)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.cancellation_estatus)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_regenerated>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.vendor_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.invoice_cfdi)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.file_path)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.digital_seal)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.cfid_certificate_sn)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.cfid_certificate)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.cfdi_original_string)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.sat_seal)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.sat_certificate_sn)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.sub_total)
                .HasPrecision(19, 5);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.total)
                .HasPrecision(19, 5);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.payment_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.voucher_type)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.emisor_rfc)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_cfdi_x_voucher>()
                .Property(e => e.receiver_rfc)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_class>()
                .Property(e => e.invoice_class1)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_class>()
                .Property(e => e.invoice_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_class>()
                .HasMany(e => e.invoice_hdr_edit)
                .WithOptional(e => e.invoice_class1)
                .HasForeignKey(e => e.invoice_class);

            modelBuilder.Entity<invoice_class>()
                .HasMany(e => e.invoice_hdr)
                .WithOptional(e => e.invoice_class1)
                .HasForeignKey(e => e.invoice_class);

            modelBuilder.Entity<invoice_comprobante_rel>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_comprobante_rel>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_comprobante_rel>()
                .Property(e => e.uuid_rel)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_comprobante_rel>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_comprobante_rel>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_floor_plan_xref>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_floor_plan_xref>()
                .Property(e => e.bill_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_floor_plan_xref>()
                .Property(e => e.floor_plan_approval_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_floor_plan_xref>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_floor_plan_xref>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill2_name)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill2_contact)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill2_address1)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill2_address2)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill2_city)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill2_state)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill2_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_name)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_contact)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_address1)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_address2)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_city)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_state)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.fob)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.terms_desc)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.salesrep_name)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.brokerage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.freight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ar_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.gl_freight_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.gl_brokerage_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.brokerage_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.store_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.invoice_type)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.total_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.terms_taken)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.allowed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.paid_in_full_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.paid_by_check_no)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.customer_id_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.printed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.corp_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.shipping_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill2_country)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_country)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.invoice_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.invoice_adjustment_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.invoice_desc)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.memo_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bad_debt_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.invoice_class)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.period_fully_paid)
                .HasPrecision(3, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.year_fully_paid)
                .HasPrecision(4, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.cumulative_fc)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.disputed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.statement_period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.statement_year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.other_charge_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.tax_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.original_document_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.consolidated)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.sold_to_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship_to_phone)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.terms_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.sales_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.tax_terms_taken)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.carrier_insurance_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.inv_no_display)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.iva_exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.iva_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.credit_memo_for_terms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.strategic_freight_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.strategic_freight_out)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.affiliated_training_center)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.external_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.total_freightcharge_weight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.receiver_name)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.cardlock_cons_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.record_type_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.remove_from_open_def_rev_window)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.edi_order_printed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.downpayment_applied)
                .HasPrecision(19, 2);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.reverse_redemption_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.tax_terms_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.tax_amount_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.external_claim_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill2_address3)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_address3)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.courtesy_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.iva_withheld_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.free_out_freight_min_met_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.reg_num_of_packages)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.allowed_amt_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.total_service_amount_redeemed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.customer_claim_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.claim_type)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.claim_coop_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_latitude)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.ship2_longitude)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.bill_to_supplier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.cust_price_prot_var_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.consolidated_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.merchandise_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.actual_freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.eco_fee_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.frght_disc_taken)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr>()
                .Property(e => e.rental_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.apinv_hdr)
                .WithOptional(e => e.invoice_hdr)
                .HasForeignKey(e => e.voucher_ref_inv_no);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.ar_receipts_detail)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.bill_of_lading_detail)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.boeing_order_xref_10000)
                .WithOptional(e => e.invoice_hdr)
                .HasForeignKey(e => e.boeing_invoice_no);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.consolidated_invoices_xref)
                .WithRequired(e => e.invoice_hdr)
                .HasForeignKey(e => e.component_invoice_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.consolidated_invoices_xref1)
                .WithRequired(e => e.invoice_hdr1)
                .HasForeignKey(e => e.consolidated_invoice_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.credinv_x_invhdr_x_fcinv)
                .WithRequired(e => e.invoice_hdr)
                .HasForeignKey(e => e.credit_invoice_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.customer_call_inv_detail)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.dealer_commission)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.downpayment_refund_details)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.inv_hdr_dealer_warranty)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.inv_hdr_x_fc_inv)
                .WithRequired(e => e.invoice_hdr)
                .HasForeignKey(e => e.fc_invoice_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.inv_hdr_x_fc_inv1)
                .WithRequired(e => e.invoice_hdr1)
                .HasForeignKey(e => e.overdue_invoice_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.inv_hdr_x_supplier_detail)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_floor_plan_xref)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_salesrep)
                .WithRequired(e => e.invoice_hdr)
                .HasForeignKey(e => e.invoice_number)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_x_tax_juris_manual)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_line_salesrep)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr1)
                .WithRequired(e => e.invoice_hdr2)
                .HasForeignKey(e => e.invoice_reference_no);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_installment)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_signature)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_2164)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasOptional(e => e.invoice_hdr_220)
                .WithRequired(e => e.invoice_hdr);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_cash_app)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_customer_po)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_edit)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_freight_allowed)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr11)
                .WithOptional(e => e.invoice_hdr3)
                .HasForeignKey(e => e.record_type_reference_no);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_notepad)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_prelim_tracking)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_hdr_high_radius)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_iva_tax)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_line)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_line_rewards_buy_get)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.invoice_x_work_order)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.pegmost_export_history)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.progress_billing_x_invoice_hdr)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.rebate_receipts_detail)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.remittances_detail)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.reverse_payment_line)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.roadnet_pod)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr>()
                .HasMany(e => e.vendor_rebate)
                .WithRequired(e => e.invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.unapproved_reason)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_address1)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_address2)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_city)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_state)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_zip)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_contact)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_email)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_phone)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_tax_exempt_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.agency_price_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.web_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.trk_advertising_allowance_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.rejected_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.model_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.failure_code)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.failure_description)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.owner_name)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.owner_address1)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.owner_address2)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.owner_city)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.owner_state)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.owner_zip)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_2164>()
                .Property(e => e.warranty_type)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_220>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_220>()
                .Property(e => e.prompt_payment_discount)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_220>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_asn>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_asn>()
                .Property(e => e.packaging_code)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_asn>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_asn>()
                .Property(e => e.carrier_pro_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.vehicle_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.total_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.batch_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.tax_adjustment_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.last_odometer_reading)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.price_without_tax)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_cardlock>()
                .Property(e => e.total_price_without_tax)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_cash_app>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cash_app>()
                .Property(e => e.cash_app_1)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cash_app>()
                .Property(e => e.cash_app_2)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cash_app>()
                .Property(e => e.cash_app_3)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cash_app>()
                .Property(e => e.cash_app_4)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cash_app>()
                .Property(e => e.cash_app_5)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cash_app>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_cash_app>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_customer_po>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_customer_po>()
                .Property(e => e.customer_po)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_customer_po>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_customer_po>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .Property(e => e.rebilled_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .Property(e => e.invoice_class)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .Property(e => e.freight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_edit>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .HasMany(e => e.invoice_hdr_notepad_edit)
                .WithRequired(e => e.invoice_hdr_edit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .HasMany(e => e.invoice_hdr_salesrep_edit)
                .WithRequired(e => e.invoice_hdr_edit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .HasMany(e => e.invoice_hdr_tax_juris_edit)
                .WithRequired(e => e.invoice_hdr_edit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr_edit>()
                .HasMany(e => e.invoice_line_edit)
                .WithRequired(e => e.invoice_hdr_edit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_hdr_freight_allowed>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_freight_allowed>()
                .Property(e => e.freight_allowed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_freight_allowed>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_freight_allowed>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_high_radius>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_high_radius>()
                .Property(e => e.export_data_changed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_high_radius>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_high_radius>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_installment>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_installment>()
                .Property(e => e.install_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_installment>()
                .Property(e => e.terms_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_installment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_installment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_hdr_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad_edit>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad_edit>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad_edit>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad_edit>()
                .Property(e => e.mandatory_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad_edit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_notepad_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_prelim_tracking>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_prelim_tracking>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_prelim_tracking>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.invoice_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.commission_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.primary_salesrep)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.edited_commission_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.prior_commission_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.split_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.calculation_from_split_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.forfeited_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.exclude_split_validation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.partial_invoice_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.line_percentage_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.commission_override_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_salesrep>()
                .Property(e => e.extended_price_no_cnd_adjust)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_salesrep_edit>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit>()
                .Property(e => e.exclude_split_validation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit>()
                .Property(e => e.primary_salesrep)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_signature>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_signature>()
                .Property(e => e.signature)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_signature>()
                .Property(e => e.recipient_name)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_signature>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_signature>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit>()
                .Property(e => e.taxable_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual>()
                .Property(e => e.tax_percentage)
                .HasPrecision(19, 8);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_iva_tax>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_iva_tax>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_iva_tax>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_iva_tax>()
                .Property(e => e.account_digits)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_iva_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_iva_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_iva_tax>()
                .Property(e => e.leyenda_fiscal_1)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_iva_tax>()
                .Property(e => e.tax_registration_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.qty_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.qty_shipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.gl_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.gl_salse_tax_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.gl_cogs)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.gl_inventory)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.cogs_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.customer_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.tax_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.pricing_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.net_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.sales_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.oe_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.other_charge_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.exceptional_sales)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.sales_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.cost_center)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.budget_cd)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.gl_applied_labor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.labor_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.one_time_price_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.mac_for_special_items)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.special_purchase_qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.suggested_retail_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.hours_worked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.core_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.environmental_fee)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.admin_fee)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.covered_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.buyer)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.recipient)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.verified_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.verified_code)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.sku_exceptional_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.cogs_markup_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.sales_discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.unit_pick_fee)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.target_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.tax_amount_paid_on_dp_applied)
                .HasPrecision(19, 2);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.net_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.haz_num_of_packages)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.print_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.discount_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.distributor_funding)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.supplier_funding)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.prior_authorization_cd)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.gl_distributor_funding_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.gl_supplier_funding_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.exclude_from_edi_844_867_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.other_charge_credit_rebill_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.sub_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.gl_dimension_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .Property(e => e.gl_dimension_desc)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line>()
                .HasMany(e => e.invoice_line_taxes)
                .WithRequired(e => e.invoice_line)
                .HasForeignKey(e => new { e.invoice_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_line>()
                .HasMany(e => e.invoice_line_notepad)
                .WithRequired(e => e.invoice_line)
                .HasForeignKey(e => new { e.invoice_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_line>()
                .HasMany(e => e.invoice_line_taxes_perunit)
                .WithRequired(e => e.invoice_line)
                .HasForeignKey(e => new { e.invoice_no, e.invoice_line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_line>()
                .HasMany(e => e.strategic_pricing_invoice)
                .WithRequired(e => e.invoice_line)
                .HasForeignKey(e => new { e.invoice_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<invoice_line_2164>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_2164>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_2164>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_2164>()
                .Property(e => e.list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_235>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_235>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.eco_fee_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.eco_fee_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.eco_fee_jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.gl_account)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.exempt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.eco_fees_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.tax_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.home_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_eco_fee>()
                .Property(e => e.eco_fee_reversal_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_edit>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_edit>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.key_value)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_notepad>()
                .Property(e => e.key_value_created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_price_protection>()
                .Property(e => e.new_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_price_protection>()
                .Property(e => e.old_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_price_protection>()
                .Property(e => e.new_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_price_protection>()
                .Property(e => e.old_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_price_protection>()
                .Property(e => e.total_supplier_protection)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_price_protection>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_price_protection>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_proration>()
                .Property(e => e.tread_remaining)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_proration>()
                .Property(e => e.unit_selling_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_proration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_proration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.rewarded_coop_dollars)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.rewarded_incentive_points)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.adjustment_reason)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.threshold_deferred_coop_dollars)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.threshold_deferred_incentive_points)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.coop_dollars_basis_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.incentive_points_basis_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.rebate_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.rebate_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.retroactive_rebate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.rebate_amt_fc)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.amf_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards>()
                .Property(e => e.amf_claimed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards_buy_get>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards_buy_get>()
                .Property(e => e.print_reward_count)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_rewards_buy_get>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards_buy_get>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_rewards_buy_get>()
                .Property(e => e.earned_reward_count)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.edited_commission_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.forfeited_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.commission_override_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.extended_price_no_cnd_adjust)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_salesrep>()
                .Property(e => e.rma_linked_commissions)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_servicebench_claim>()
                .Property(e => e.reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_servicebench_claim>()
                .Property(e => e.internal_claim_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_servicebench_claim>()
                .Property(e => e.external_claim_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_servicebench_claim>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_servicebench_claim>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_servicebench_claim>()
                .Property(e => e.replacement_serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_servicebench_claim>()
                .Property(e => e.reversed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.tax_percentage)
                .HasPrecision(19, 8);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.tax_charged)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.total_sales_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_taxes>()
                .Property(e => e.taxable_sales_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_taxes_cardlock>()
                .Property(e => e.tax_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_taxes_cardlock>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_cardlock>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_perunit>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_perunit>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_perunit>()
                .Property(e => e.invoice_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line_taxes_perunit>()
                .Property(e => e.tax_amt_per_unit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_line_taxes_perunit>()
                .Property(e => e.tax_jurisdiction_uom)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_perunit>()
                .Property(e => e.tax_jurisdiction_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_line_taxes_perunit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_perunit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_link_type_mx>()
                .Property(e => e.invoice_link_type_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_link_type_mx>()
                .Property(e => e.invoice_link_desc)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_link_type_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_link_type_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_link_type_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<invoice_link_type_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_types>()
                .Property(e => e.invoice_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_types>()
                .Property(e => e.invoice_type_description)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_types>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_types>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_types>()
                .Property(e => e._object)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_x_work_order>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_x_work_order>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_x_work_order>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoiced_cfdi_certification>()
                .Property(e => e.transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoiced_cfdi_certification>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoiced_cfdi_certification>()
                .Property(e => e.document_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoiced_cfdi_certification>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoiced_cfdi_certification>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_lot_info>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_lot_info>()
                .Property(e => e.lot_status)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_lot_info>()
                .Property(e => e.data_collection_id)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_lot_info>()
                .Property(e => e.data_collection_result)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_lot_info>()
                .Property(e => e.nonconformance_id)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_lot_info>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_lot_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_lot_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_receipt_info>()
                .Property(e => e.inspection_status)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_receipt_info>()
                .Property(e => e.sample_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<iqs_integration_receipt_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<iqs_integration_receipt_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<IRS_1099_type>()
                .Property(e => e.display_value)
                .IsUnicode(false);

            modelBuilder.Entity<IRS_1099_type>()
                .Property(e => e.threshold)
                .HasPrecision(19, 2);

            modelBuilder.Entity<IRS_1099_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<IRS_1099_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<IRS_1099_type>()
                .Property(e => e.allow_incorporated_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<iso_currency_code>()
                .Property(e => e.iso_currency_code1)
                .IsUnicode(false);

            modelBuilder.Entity<iso_currency_code>()
                .Property(e => e.iso_currency_desc)
                .IsUnicode(false);

            modelBuilder.Entity<iso_currency_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<iso_currency_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<issues_reason>()
                .Property(e => e.reason_code)
                .IsUnicode(false);

            modelBuilder.Entity<issues_reason>()
                .Property(e => e.reason_desc)
                .IsUnicode(false);

            modelBuilder.Entity<issues_reason>()
                .Property(e => e.applies_to_quantity_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<issues_reason>()
                .Property(e => e.applies_to_quality_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<issues_reason>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<issues_reason>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_attribute_value>()
                .Property(e => e.attribute_value)
                .IsUnicode(false);

            modelBuilder.Entity<item_attribute_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_attribute_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_F)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_G)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_H)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_I)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_J)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_K)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_L)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_M)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_N)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_O)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_P)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_Q)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_R)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_S)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_T)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_U)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_V)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_W)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_X)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_Y)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_Z)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AD)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AI)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AP)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AQ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AR)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AS)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AT)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AU)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AV)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AW)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AX)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AY)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_AZ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BD)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BI)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BP)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BQ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BR)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BS)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BT)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BU)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BV)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BW)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BX)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BY)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_BZ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CD)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CI)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CP)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CQ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CR)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CS)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CT)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CU)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CV)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CW)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CX)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CY)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_CZ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DD)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DI)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DP)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DQ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DR)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DS)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DT)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DU)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DV)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DW)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DX)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DY)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_DZ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_ED)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EI)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EP)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EQ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_ER)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_ES)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_ET)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EU)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EV)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EW)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EX)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EY)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_EZ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FD)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FI)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FP)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FQ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FR)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FS)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FT)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FU)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FV)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FW)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FX)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FY)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_FZ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GD)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GI)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GP)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GQ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GR)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GS)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GT)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GU)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GV)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GW)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GX)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GY)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_GZ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HD)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HI)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HP)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HQ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HR)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HS)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HT)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HU)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HV)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HW)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HX)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HY)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_HZ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_ID)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_II)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IP)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IQ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IR)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IS)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IT)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IU)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IV)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IW)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IX)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IY)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_IZ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JA)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JB)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JC)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JD)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JE)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JF)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JG)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JH)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JI)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JJ)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JK)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JL)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JM)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JN)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog>()
                .Property(e => e.column_JO)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def>()
                .Property(e => e.column_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def>()
                .Property(e => e.item_search_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def>()
                .Property(e => e.display_column_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def>()
                .HasMany(e => e.item_catalog_def_detail)
                .WithRequired(e => e.item_catalog_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_catalog_def>()
                .HasMany(e => e.pricing_service_catalog)
                .WithRequired(e => e.item_catalog_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_catalog_def_detail>()
                .Property(e => e.item_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def_detail>()
                .Property(e => e.import_new_values_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_catalog_def_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.item_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.master_category_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.parent_category_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.display_on_web_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.display_master_product_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.catalog_page)
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .Property(e => e.sub_category_image_file)
                .IsUnicode(false);

            modelBuilder.Entity<item_category>()
                .HasMany(e => e.item_category_image)
                .WithRequired(e => e.item_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_category>()
                .HasMany(e => e.item_category_link)
                .WithRequired(e => e.item_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_category>()
                .HasMany(e => e.item_category_text)
                .WithRequired(e => e.item_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_category>()
                .HasMany(e => e.item_category_hierarchy)
                .WithRequired(e => e.item_category)
                .HasForeignKey(e => e.child_item_category_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_category>()
                .HasMany(e => e.item_category_hierarchy1)
                .WithRequired(e => e.item_category1)
                .HasForeignKey(e => e.parent_item_category_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_category>()
                .HasMany(e => e.item_category_x_class)
                .WithRequired(e => e.item_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_category>()
                .HasMany(e => e.item_category_x_inv_mast)
                .WithRequired(e => e.item_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_category>()
                .HasMany(e => e.job_price_line)
                .WithOptional(e => e.item_category)
                .HasForeignKey(e => e.item_category_uid);

            modelBuilder.Entity<item_category>()
                .HasMany(e => e.job_price_line1)
                .WithOptional(e => e.item_category1)
                .HasForeignKey(e => e.sub_category_uid);

            modelBuilder.Entity<item_category_hierarchy>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_hierarchy>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_image>()
                .Property(e => e.image_filename)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_image>()
                .Property(e => e.thumbnail_filename)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_image>()
                .Property(e => e.display_on_web_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category_image>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_image>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_link>()
                .Property(e => e.link_name)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_link>()
                .Property(e => e.link_path)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_link>()
                .Property(e => e.display_on_web_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category_link>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_link>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_text>()
                .Property(e => e.text_value)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_text>()
                .Property(e => e.display_on_web_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category_text>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_text>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_class>()
                .Property(e => e.class_type)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_class>()
                .Property(e => e.class_number)
                .HasPrecision(3, 0);

            modelBuilder.Entity<item_category_x_class>()
                .Property(e => e.class_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_inv_mast>()
                .Property(e => e.display_on_web_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_inv_mast>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_inv_mast>()
                .Property(e => e.display_desc)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_x_inv_mast>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<item_classification>()
                .Property(e => e.item_classification_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_classification>()
                .Property(e => e.item_classification_desc)
                .IsUnicode(false);

            modelBuilder.Entity<item_classification>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_classification>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_commission_class>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_commission_class>()
                .Property(e => e.commission_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<item_commission_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_commission_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_commission_class>()
                .Property(e => e.update_usage_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_commission_class>()
                .HasMany(e => e.commission_rule)
                .WithOptional(e => e.item_commission_class1)
                .HasForeignKey(e => e.item_commission_class);

            modelBuilder.Entity<item_commission_class>()
                .HasMany(e => e.customer_item_comm_class)
                .WithRequired(e => e.item_commission_class)
                .HasForeignKey(e => e.item_commission_class_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_commission_class>()
                .HasMany(e => e.invoice_line_235)
                .WithRequired(e => e.item_commission_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_commission_class>()
                .HasMany(e => e.oe_line_235)
                .WithRequired(e => e.item_commission_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_commission_class>()
                .HasMany(e => e.oe_line)
                .WithOptional(e => e.item_commission_class)
                .HasForeignKey(e => e.item_commission_class_id);

            modelBuilder.Entity<item_commitment_detail>()
                .Property(e => e.init_qty_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_commitment_detail>()
                .Property(e => e.qty_committed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_commitment_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_detail>()
                .Property(e => e.total_commitment_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_commitment_detail>()
                .HasMany(e => e.item_commitment_location)
                .WithRequired(e => e.item_commitment_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_commitment_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_commitment_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_hdr>()
                .Property(e => e.commitment_desc)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_hdr>()
                .Property(e => e.corporate_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_commitment_hdr>()
                .Property(e => e.contact_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_hdr>()
                .HasMany(e => e.item_commitment_detail)
                .WithRequired(e => e.item_commitment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_commitment_hdr>()
                .HasMany(e => e.item_commitment_ship_to)
                .WithRequired(e => e.item_commitment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_commitment_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_commitment_location>()
                .Property(e => e.init_qty_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_commitment_location>()
                .Property(e => e.qty_committed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_commitment_location>()
                .Property(e => e.total_commitment_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_commitment_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_ship_to>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_commitment_ship_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_commitment_ship_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.from_uom)
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.to_uom)
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.round)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.accumulate)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.print_on_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.print_on_order_ack)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.print_on_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.print_on_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.convert_at_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.convert_at_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.sort_order)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.print_on_prod_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.convert_at_transfer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.min_order_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_conversion>()
                .Property(e => e.convert_at_prod_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.serialized_at_count)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.track_bins_at_count)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.track_lots_at_count)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.lot_bin_integrated_at_count)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.quantity_counted)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.on_hand_quantity_at_count)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.unit_cost_at_count)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.product_type_at_count)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.special_layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_count_detail>()
                .Property(e => e.special_layer_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_count_detail>()
                .HasMany(e => e.item_count_detail_sbl)
                .WithRequired(e => e.item_count_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_count_detail_sbl>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail_sbl>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail_sbl>()
                .Property(e => e.new_lot_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail_sbl>()
                .Property(e => e.conversion_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<item_count_detail_sbl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail_sbl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_detail_sbl>()
                .Property(e => e.in_stock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_count_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_hdr>()
                .Property(e => e.count_year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<item_count_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_count_hdr>()
                .HasMany(e => e.item_count_detail)
                .WithRequired(e => e.item_count_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_id_change_history>()
                .Property(e => e.old_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_id_change_history>()
                .Property(e => e.new_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_id_change_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_integration_item_status>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_integration_item_status>()
                .Property(e => e.item_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<item_integration_item_status>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_integration_item_status>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_lead_time>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_lead_time>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_lead_time>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_lead_time>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_lead_time>()
                .Property(e => e.exclude_from_lead_time)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_lead_time>()
                .Property(e => e.item_or_supplier)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_lead_time>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_lead_time>()
                .Property(e => e.edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_list_dtl>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_list_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_list_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_list_hdr>()
                .Property(e => e.item_list_hdr_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_list_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_list_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_list_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_list_hdr>()
                .HasMany(e => e.item_list_dtl)
                .WithRequired(e => e.item_list_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_merge_audit>()
                .Property(e => e.source_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_merge_audit>()
                .Property(e => e.target_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_merge_audit>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_merge_audit>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<item_merge_audit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_merge_verification>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<item_merge_verification>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_merge_verification>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<item_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<item_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<item_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_package>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_package>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<item_package>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<item_package>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_package>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_package>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_package>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_package>()
                .Property(e => e.haz_exemption_cd)
                .IsUnicode(false);

            modelBuilder.Entity<item_package>()
                .Property(e => e.haz_type)
                .IsUnicode(false);

            modelBuilder.Entity<item_package_type>()
                .Property(e => e.upc_code)
                .IsUnicode(false);

            modelBuilder.Entity<item_package_type>()
                .Property(e => e.item_package_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_package_type>()
                .Property(e => e.item_package_uom)
                .IsUnicode(false);

            modelBuilder.Entity<item_package_type>()
                .Property(e => e.item_net_volume)
                .HasPrecision(19, 4);

            modelBuilder.Entity<item_package_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_package_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_package_type>()
                .Property(e => e.item_pkg_tare_weight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<item_prefix_194>()
                .Property(e => e.prefix)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_prefix_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.customer_code)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.location_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.item_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.max_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.max_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.last_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.last_invoice_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.last_invoice_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.last_invoice_uom)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.last_sales_pricing_uom)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.last_sales_uom)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.last_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.last_unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_dts>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_dts_criteria>()
                .Property(e => e.customer_code)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts_criteria>()
                .Property(e => e.location_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_dts_criteria>()
                .Property(e => e.transfer_type)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.multiplier_price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_price_level_update_hdr>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_price_level_update_hdr>()
                .Property(e => e.manufacturing_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_hdr>()
                .Property(e => e.price_family_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_price_level_update_hdr>()
                .HasMany(e => e.item_price_level_update_dtl)
                .WithRequired(e => e.item_price_level_update_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_putaway_attribute>()
                .Property(e => e.item_putaway_attribute_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_putaway_attribute>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<item_putaway_attribute>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_putaway_attribute>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_quantity_x_integration>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_quantity_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_quantity_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_quantity_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_reservation>()
                .Property(e => e.item_reservation_desc)
                .IsUnicode(false);

            modelBuilder.Entity<item_reservation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_reservation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_reservation>()
                .HasMany(e => e.customer_item_reserve)
                .WithRequired(e => e.item_reservation)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_revision>()
                .Property(e => e.revision_level)
                .IsUnicode(false);

            modelBuilder.Entity<item_revision>()
                .Property(e => e.blue_print_number)
                .IsUnicode(false);

            modelBuilder.Entity<item_revision>()
                .Property(e => e.engineering_change_number)
                .IsUnicode(false);

            modelBuilder.Entity<item_revision>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_revision>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_revision>()
                .HasMany(e => e.processes)
                .WithOptional(e => e.item_revision)
                .HasForeignKey(e => e.finished_item_revision_uid);

            modelBuilder.Entity<item_revision>()
                .HasMany(e => e.processes1)
                .WithOptional(e => e.item_revision1)
                .HasForeignKey(e => e.raw_item_revision_uid);

            modelBuilder.Entity<item_revision>()
                .HasMany(e => e.revision_transaction)
                .WithRequired(e => e.item_revision)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_service>()
                .Property(e => e.track_meters)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_service>()
                .Property(e => e.make)
                .IsUnicode(false);

            modelBuilder.Entity<item_service>()
                .Property(e => e.model)
                .IsUnicode(false);

            modelBuilder.Entity<item_service>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_service>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_service_contract>()
                .Property(e => e.create_billing_schedule)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_service_contract>()
                .Property(e => e.service_cycle_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_service_contract>()
                .Property(e => e.all_parts)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_service_contract>()
                .Property(e => e.parts_covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_service_contract>()
                .Property(e => e.all_labor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_service_contract>()
                .Property(e => e.labor_covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_service_contract>()
                .Property(e => e.include_pm)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_service_contract>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_service_contract>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_service_part_list>()
                .Property(e => e.oe_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_service_part_list>()
                .Property(e => e.oe_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<item_service_part_list>()
                .Property(e => e.pm_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_service_part_list>()
                .Property(e => e.pm_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<item_service_part_list>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_service_part_list>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.selling_unit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.purchasing_unit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.b2b_unit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.tally_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.wwms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_uom>()
                .Property(e => e.minimum_order_qty)
                .HasPrecision(19, 4);

            modelBuilder.Entity<item_uom>()
                .HasMany(e => e.bin_replenishment)
                .WithRequired(e => e.item_uom)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_uom>()
                .HasMany(e => e.inventory_supplier_x_uom)
                .WithRequired(e => e.item_uom)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_warranty>()
                .HasMany(e => e.item_warranty_x_warranty)
                .WithRequired(e => e.item_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_warranty>()
                .HasMany(e => e.item_warranty_x_warranty_reason)
                .WithRequired(e => e.item_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<item_warranty_x_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_warranty_x_warranty_reason>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.job_description)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.job_extended_description)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.sub_jobs_used)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.phases_used)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.tasks_used)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.job_class1_ld)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.job_class2_id)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.job_class3_id)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.job_class4_id)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.job_class5_id)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.active)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.job_manager)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.budgeting_level)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.original_budgeted_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.revised_budgeted_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.original_budgeted_revenue)
                .HasPrecision(19, 4);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.revised_budgeted_revenue)
                .HasPrecision(19, 4);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.total_cost_incurred)
                .HasPrecision(19, 4);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.total_committed_costs)
                .HasPrecision(19, 4);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.total_revenue_billed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.total_hours_incurred)
                .HasPrecision(19, 4);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.billing_company_id)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.billing_method)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 4);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.revenue_budgeting_level)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.schedule_level)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .Property(e => e.status_id)
                .IsUnicode(false);

            modelBuilder.Entity<jc_job>()
                .HasMany(e => e.inventory_return_hdr_x_jc_job)
                .WithRequired(e => e.jc_job)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<jc_job>()
                .HasMany(e => e.po_hdr_x_jc_job)
                .WithRequired(e => e.jc_job)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.report_type)
                .IsUnicode(false);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.pm_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.job_control_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.salesrep_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.pm_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.dept_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.chain_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.dept_head_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.commission_paid_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.commission_note)
                .IsUnicode(false);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.isr_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.inside_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_based_commission>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.job_control_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.job_site_desc)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.job_site_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.job_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.job_lot_number)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.job_site)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.contract_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.est_cost)
                .HasPrecision(19, 2);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.est_comm_cost)
                .HasPrecision(19, 2);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.denunciation_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_control_hdr>()
                .Property(e => e.allowed_shipment_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_control_hdr>()
                .HasMany(e => e.job_control_line)
                .WithRequired(e => e.job_control_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_control_hdr>()
                .HasMany(e => e.job_control_hdr_notepad)
                .WithRequired(e => e.job_control_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_control_hdr_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_control_hdr_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_hdr_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_line>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_control_line>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_control_line>()
                .Property(e => e.builder_allowance_flag)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_line>()
                .Property(e => e.builder_allowance)
                .HasPrecision(19, 2);

            modelBuilder.Entity<job_control_line>()
                .Property(e => e.homeowner_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_control_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_batch_hdr>()
                .Property(e => e.customer_po)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_hdr>()
                .HasMany(e => e.job_price_batch_line)
                .WithRequired(e => e.job_price_batch_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_batch_line>()
                .Property(e => e.actual_bin_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_batch_line>()
                .Property(e => e.touched_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_line>()
                .Property(e => e.reorder_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_batch_line>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_line>()
                .Property(e => e.ordered_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_batch_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_line>()
                .HasMany(e => e.job_price_batch_line_x_employee)
                .WithRequired(e => e.job_price_batch_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_batch_line_x_employee>()
                .Property(e => e.batch_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_line_x_employee>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_line_x_employee>()
                .Property(e => e.badge_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_line_x_employee>()
                .Property(e => e.bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_line_x_employee>()
                .Property(e => e.qty)
                .HasPrecision(9, 0);

            modelBuilder.Entity<job_price_batch_line_x_employee>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_batch_line_x_employee>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.customer_id)
                .HasPrecision(9, 0);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.ship_to_id)
                .HasPrecision(9, 0);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.contract_bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.capacity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.min_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.max_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.reorder_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.cust_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.contract_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.line)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.line_feed)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.line_station)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_bin>()
                .HasMany(e => e.consignment_bin_count)
                .WithRequired(e => e.job_price_bin)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_bin>()
                .HasMany(e => e.job_price_batch_line)
                .WithRequired(e => e.job_price_bin)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_bin>()
                .HasMany(e => e.job_price_bin_wurth)
                .WithRequired(e => e.job_price_bin)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_bin>()
                .HasMany(e => e.job_price_ship_control_no)
                .WithRequired(e => e.job_price_bin)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_bin_wurth>()
                .Property(e => e.wurth_custom1)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin_wurth>()
                .Property(e => e.wurth_custom2)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin_wurth>()
                .Property(e => e.wurth_custom3)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin_wurth>()
                .Property(e => e.wurth_custom4)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin_wurth>()
                .Property(e => e.wurth_custom5)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin_wurth>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_bin_wurth>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_aggr>()
                .Property(e => e.dollar_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_cust_shipto_aggr>()
                .Property(e => e.dollar_limit_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_cust_shipto_aggr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_aggr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_budget>()
                .Property(e => e.budget_cd)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_budget>()
                .Property(e => e.dollar_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_cust_shipto_budget>()
                .Property(e => e.dollar_limit_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_cust_shipto_budget>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_budget>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.cro_default_approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.cuo_default_approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.combine_cros_on_xfer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.price_transfers_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.auto_receive_transfers_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.cost_code_1_desc)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.cost_code_2_desc)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.cost_code_3_desc)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.cost_code_1_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.cost_code_2_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.cost_code_3_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_csn>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_ordlim>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_cust_shipto_ordlim>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.consolidated_invoicing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.acceptable_wait_time)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.default_carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.contract_dollar_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.ship_to_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.contract_dollar_limit_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.cust_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.auto_assigned_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.exclude_from_freight_factor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_customer_shipto>()
                .HasMany(e => e.job_price_batch_hdr)
                .WithRequired(e => e.job_price_customer_shipto)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .HasMany(e => e.job_price_cust_shipto_aggr)
                .WithRequired(e => e.job_price_customer_shipto)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .HasMany(e => e.job_price_cust_shipto_budget)
                .WithRequired(e => e.job_price_customer_shipto)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .HasMany(e => e.job_price_cust_shipto_csn)
                .WithRequired(e => e.job_price_customer_shipto)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .HasMany(e => e.job_price_cust_shipto_ordlim)
                .WithRequired(e => e.job_price_customer_shipto)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_customer_shipto>()
                .HasMany(e => e.job_price_line_budget_code)
                .WithRequired(e => e.job_price_customer_shipto)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.job_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.job_description)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.sales_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.contract_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.cancelled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.taker)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.corp_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.currency_conversion)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.consignment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.cad_cha_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.cad_cha_quote_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.cad_cha_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.use_totes_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.hand_held_add_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.national_acct_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.use_vmi_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .Property(e => e.auto_add_new_shiptos_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr>()
                .HasMany(e => e.contract_x_contract_class)
                .WithRequired(e => e.job_price_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr>()
                .HasMany(e => e.job_price_batch_hdr)
                .WithRequired(e => e.job_price_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr>()
                .HasMany(e => e.job_price_customer_shipto)
                .WithRequired(e => e.job_price_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr>()
                .HasMany(e => e.job_price_hdr_budget_prd)
                .WithRequired(e => e.job_price_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr>()
                .HasMany(e => e.job_price_hdr_notepad)
                .WithRequired(e => e.job_price_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr>()
                .HasMany(e => e.job_price_line)
                .WithRequired(e => e.job_price_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr>()
                .HasMany(e => e.job_price_vendor)
                .WithRequired(e => e.job_price_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr>()
                .HasMany(e => e.job_price_hdr_148)
                .WithRequired(e => e.job_price_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr_148>()
                .Property(e => e.all_customers)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_148>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_148>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_budget_prd>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<job_price_hdr_budget_prd>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<job_price_hdr_budget_prd>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_budget_prd>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_budget_prd>()
                .HasMany(e => e.job_price_cust_shipto_aggr)
                .WithRequired(e => e.job_price_hdr_budget_prd)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr_budget_prd>()
                .HasMany(e => e.job_price_cust_shipto_budget)
                .WithRequired(e => e.job_price_hdr_budget_prd)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr_budget_prd>()
                .HasMany(e => e.job_price_cust_shipto_ordlim)
                .WithRequired(e => e.job_price_hdr_budget_prd)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_hdr_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_hdr_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_hdr_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.qty_maximum)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.other_cost_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.other_cost_calc_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.commission_cost_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.commission_cost_calc_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.customer_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.vendor_auth_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.cust_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.terminal_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.budget_cd)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.pick_fee)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.initial_commitment_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.commitment_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.total_commitment_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.cad_purchase_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.starting_virtual_inventory_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.snapshot_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.minimum_mcc_code)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.commission_override_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.all_discount_groups_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.pocosting_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.pocosting_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.pocosting_po_contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line>()
                .HasMany(e => e.contract_review)
                .WithRequired(e => e.job_price_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_line>()
                .HasMany(e => e.job_price_bin)
                .WithRequired(e => e.job_price_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_line>()
                .HasMany(e => e.job_price_line_budget_code)
                .WithRequired(e => e.job_price_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_line>()
                .HasMany(e => e.job_price_line_consign)
                .WithRequired(e => e.job_price_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_line>()
                .HasMany(e => e.job_price_line_148)
                .WithRequired(e => e.job_price_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_line>()
                .HasMany(e => e.job_price_line_quote_info)
                .WithRequired(e => e.job_price_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_line>()
                .HasMany(e => e.job_price_value)
                .WithRequired(e => e.job_price_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_price_line>()
                .HasMany(e => e.vendor_rebate)
                .WithOptional(e => e.job_price_line)
                .HasForeignKey(e => e.contract_line_uid);

            modelBuilder.Entity<job_price_line_148>()
                .Property(e => e.expected_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line_148>()
                .Property(e => e.frequency)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_148>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line_148>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_148>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_148>()
                .Property(e => e.approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_budget_code>()
                .Property(e => e.budget_cd)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_budget_code>()
                .Property(e => e.budget_dollar_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line_budget_code>()
                .Property(e => e.budget_dollar_limit_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line_budget_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_budget_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_consign>()
                .Property(e => e.min_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line_consign>()
                .Property(e => e.max_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line_consign>()
                .Property(e => e.reorder_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line_consign>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_consign>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_consign>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_line_consign>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_consign>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_quote_info>()
                .Property(e => e.market_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_line_quote_info>()
                .Property(e => e.approval_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_quote_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_quote_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_quote_info>()
                .Property(e => e.rebate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_line_quote_info>()
                .Property(e => e.price_edit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_price_ship_control_no>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_ship_control_no>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_ship_control_no>()
                .Property(e => e.ship_control_no)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_ship_control_no>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_ship_control_no>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_ship_control_no>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.customer_id)
                .HasPrecision(9, 0);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.ship_to_id)
                .HasPrecision(9, 0);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.calculation_value15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.break14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.other_cost15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_vendor>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_vendor>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_vendor>()
                .Property(e => e.hierarchy)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_vendor>()
                .Property(e => e.gpo_gov)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_price_vendor>()
                .Property(e => e.replaces)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_vendor>()
                .Property(e => e.replaced_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_vendor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_price_vendor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_quote_line>()
                .Property(e => e.rebate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_quote_line>()
                .Property(e => e.rebate_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_quote_line>()
                .Property(e => e.rebate_calc_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_quote_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_quote_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_quote_line>()
                .Property(e => e.qty_maximum)
                .HasPrecision(19, 9);

            modelBuilder.Entity<job_site>()
                .Property(e => e.job_site_id)
                .HasPrecision(10, 0);

            modelBuilder.Entity<job_site>()
                .Property(e => e.job_site_desc)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_site>()
                .Property(e => e.county)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.job_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.inspection_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.site_directions)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.job_site_partner_id)
                .HasPrecision(9, 0);

            modelBuilder.Entity<job_site>()
                .Property(e => e.location_desc)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.location_type)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.phase)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .Property(e => e.homeowner_selection_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_site>()
                .HasMany(e => e.job_site_notepad)
                .WithRequired(e => e.job_site)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_site>()
                .HasMany(e => e.units)
                .WithRequired(e => e.job_site)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_site>()
                .HasMany(e => e.work_order)
                .WithRequired(e => e.job_site)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<job_site_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<job_site_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<job_site_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<job_site_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<job_site_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_site_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<job_site_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<job_site_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.oe_line)
                .HasPrecision(19, 0);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.credit_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.est_first_year_reqts)
                .HasPrecision(19, 0);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.max_est_first_year_reqts)
                .HasPrecision(19, 0);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.competitive_engine_displaced)
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.oem_machine_type)
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.eqpmnt_desc)
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.government_agency_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.ce_number)
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.engine_sales_credit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.service_completion_credit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.engine_completion_credit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<john_deere_order_info_10008>()
                .Property(e => e.powertech_sales)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<journal>()
                .Property(e => e.journal_id)
                .IsUnicode(false);

            modelBuilder.Entity<journal>()
                .Property(e => e.journal_description)
                .IsUnicode(false);

            modelBuilder.Entity<journal>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<journal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<journal>()
                .HasMany(e => e.gls)
                .WithRequired(e => e.journal)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<journal>()
                .HasMany(e => e.period_journals)
                .WithRequired(e => e.journal)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<journal_type_mx>()
                .Property(e => e.journal_type_mx_id)
                .IsUnicode(false);

            modelBuilder.Entity<journal_type_mx>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<journal_type_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<journal_type_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<jurisdiction_acct>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<jurisdiction_acct>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<jurisdiction_acct>()
                .Property(e => e.gl_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<jurisdiction_acct>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jurisdiction_acct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<jurisdiction_tax_is_taxable>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<jurisdiction_tax_is_taxable>()
                .Property(e => e.taxing_jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<jurisdiction_tax_is_taxable>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<jurisdiction_tax_is_taxable>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition>()
                .Property(e => e.label_definition_id)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition>()
                .Property(e => e.label_definition_desc)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition>()
                .HasMany(e => e.label_definition_x_customer)
                .WithRequired(e => e.label_definition)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<label_definition>()
                .HasMany(e => e.label_definition_x_loc)
                .WithRequired(e => e.label_definition)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<label_definition>()
                .HasMany(e => e.label_definition_x_ship_to)
                .WithRequired(e => e.label_definition)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<label_definition_x_customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_customer>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<label_definition_x_customer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_customer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_loc>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_loc>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<label_definition_x_loc>()
                .Property(e => e.label_template_filename)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_loc>()
                .Property(e => e.default_printer)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_loc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_loc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_loc>()
                .Property(e => e.default_for_proc_x_label_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_ship_to>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<label_definition_x_ship_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<label_definition_x_ship_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<labor>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<labor>()
                .Property(e => e.labor_name)
                .IsUnicode(false);

            modelBuilder.Entity<labor>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<labor>()
                .Property(e => e.time_zone)
                .IsUnicode(false);

            modelBuilder.Entity<labor>()
                .Property(e => e.labor_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<labor>()
                .Property(e => e.labor_cogs_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<labor>()
                .Property(e => e.labor_billback_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<labor>()
                .HasMany(e => e.labor_x_crew)
                .WithRequired(e => e.labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<labor>()
                .HasMany(e => e.labor_x_region)
                .WithRequired(e => e.labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<labor>()
                .HasMany(e => e.labor_x_skillset)
                .WithRequired(e => e.labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<labor_type>()
                .Property(e => e.labor_type_name)
                .IsUnicode(false);

            modelBuilder.Entity<labor_type>()
                .Property(e => e.labor_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<labor_type>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<labor_type>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<labor_type>()
                .Property(e => e.rate)
                .HasPrecision(19, 2);

            modelBuilder.Entity<labor_type>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<labor_type>()
                .Property(e => e.default_time_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<labor_type>()
                .Property(e => e.default_time_measure)
                .IsUnicode(false);

            modelBuilder.Entity<labor_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<labor_type>()
                .HasMany(e => e.labor_type_x_location)
                .WithRequired(e => e.labor_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<labor_type>()
                .HasMany(e => e.work_order_labor)
                .WithRequired(e => e.labor_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<labor_type>()
                .HasMany(e => e.work_order_x_labor_type)
                .WithRequired(e => e.labor_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<labor_type_x_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<labor_type_x_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<labor_x_crew>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<labor_x_region>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<labor_x_skillset>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_category>()
                .Property(e => e.landed_cost_category_cd)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_category>()
                .Property(e => e.landed_cost_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_category>()
                .HasMany(e => e.landed_cost_category_x_company)
                .WithRequired(e => e.landed_cost_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<landed_cost_category>()
                .HasMany(e => e.landed_cost_driver)
                .WithRequired(e => e.landed_cost_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<landed_cost_category_x_company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_category_x_company>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.landed_cost_driver_cd)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.landed_cost_driver_desc)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.dollar_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.manufacturing_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.to_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.commodity_code)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.allow_edit_driver_atrcptloc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.purchase_transfer_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.use_srcloc_revacct_forxfers_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.loading_port)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .Property(e => e.discharge_port)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver>()
                .HasMany(e => e.landed_cost_driver_tax)
                .WithRequired(e => e.landed_cost_driver)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<landed_cost_driver>()
                .HasMany(e => e.lc_driver_x_receipts_hdr)
                .WithRequired(e => e.landed_cost_driver)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<landed_cost_driver>()
                .HasMany(e => e.lc_driver_x_tran)
                .WithRequired(e => e.landed_cost_driver)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<landed_cost_driver>()
                .HasMany(e => e.landed_cost_driver_x_po_hdr)
                .WithRequired(e => e.landed_cost_driver)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<landed_cost_driver_tax>()
                .Property(e => e.tax_driver_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver_tax>()
                .Property(e => e.tax_expense_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver_tax>()
                .Property(e => e.tax_clearing_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver_tax>()
                .Property(e => e.tax_id_no)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver_x_po_hdr>()
                .Property(e => e.po_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<landed_cost_driver_x_po_hdr>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<landed_cost_driver_x_po_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<landed_cost_driver_x_po_hdr>()
                .Property(e => e.dollar_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<language>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<language>()
                .Property(e => e.language_description)
                .IsUnicode(false);

            modelBuilder.Entity<language>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<language>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<language>()
                .Property(e => e.crystal_reports_folder)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<language>()
                .Property(e => e.iso_code)
                .IsUnicode(false);

            modelBuilder.Entity<language>()
                .HasMany(e => e.customer_language)
                .WithRequired(e => e.language)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<language>()
                .HasMany(e => e.location_language)
                .WithRequired(e => e.language)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<language>()
                .HasMany(e => e.term_x_language)
                .WithRequired(e => e.language)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lc_driver_x_receipts_hdr>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<lc_driver_x_receipts_hdr>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lc_driver_x_receipts_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lc_driver_x_receipts_hdr>()
                .Property(e => e.dollar_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<lc_driver_x_receipts_hdr>()
                .Property(e => e.receipt_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lc_driver_x_receipts_hdr>()
                .Property(e => e.landed_cost_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lc_driver_x_receipts_hdr>()
                .Property(e => e.lc_amt_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lc_driver_x_tran>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lc_driver_x_tran>()
                .Property(e => e.dollar_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<lc_driver_x_tran>()
                .Property(e => e.landed_cost_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lc_driver_x_tran>()
                .Property(e => e.edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lc_driver_x_tran>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lc_driver_x_tran>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lc_driver_x_tran>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lc_driver_x_tran_detail>()
                .Property(e => e.landed_cost_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lc_driver_x_tran_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lc_driver_x_tran_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lc_driver_x_tran_detail>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lc_driver_x_tran_detail>()
                .Property(e => e.exclude_from_landed_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lead_source>()
                .Property(e => e.source_id)
                .IsUnicode(false);

            modelBuilder.Entity<lead_source>()
                .Property(e => e.source_description)
                .IsUnicode(false);

            modelBuilder.Entity<lead_source>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lead_source>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lead_source>()
                .HasMany(e => e.contact_lead_source)
                .WithRequired(e => e.lead_source)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lead_source>()
                .HasMany(e => e.customers)
                .WithOptional(e => e.lead_source)
                .HasForeignKey(e => e.lead_source_id);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.shipment_no)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.b3_no)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.currency_cd)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.u_cd)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.tar_cd)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.harmonized_cd)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.transaction_desc)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.item_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.total_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.qty_remaining)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.cost_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.cost_remaining)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.duty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.uduty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.balance)
                .HasPrecision(19, 9);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.coo)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.coo_name)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<legacy_b3_customs_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<link_quantity>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<link_quantity>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<link_quantity>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<list_temp>()
                .Property(e => e.entity_id_1)
                .IsUnicode(false);

            modelBuilder.Entity<list_temp>()
                .Property(e => e.entity_id_2)
                .IsUnicode(false);

            modelBuilder.Entity<list_temp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<list_temp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<loan>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<loan>()
                .Property(e => e.ucc_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<loan>()
                .Property(e => e.funding_source)
                .HasPrecision(19, 0);

            modelBuilder.Entity<loan>()
                .Property(e => e.loan_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<loan>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<loan>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan>()
                .HasMany(e => e.loan_customer)
                .WithRequired(e => e.loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<loan>()
                .HasMany(e => e.loan_item)
                .WithRequired(e => e.loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<loan>()
                .HasMany(e => e.loan_security_item)
                .WithRequired(e => e.loan)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<loan_customer>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<loan_customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<loan_customer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan_customer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan_customer>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<loan_item>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<loan_item>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<loan_item>()
                .Property(e => e.qty_committed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<loan_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan_item>()
                .Property(e => e.shortfall_override_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<loan_item>()
                .Property(e => e.shortfall_paid_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<loan_item>()
                .Property(e => e.initial_amt_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<loan_item>()
                .Property(e => e.loan_item_child_created_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<loan_item>()
                .HasMany(e => e.loan_item_extra)
                .WithRequired(e => e.loan_item)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<loan_item>()
                .HasMany(e => e.loan_surcharge)
                .WithRequired(e => e.loan_item)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<loan_item_extra>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<loan_item_extra>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<loan_item_extra>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan_item_extra>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan_security_item>()
                .Property(e => e.equipment_id)
                .IsUnicode(false);

            modelBuilder.Entity<loan_security_item>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<loan_security_item>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<loan_security_item>()
                .Property(e => e.serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<loan_security_item>()
                .Property(e => e.value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<loan_security_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan_security_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan_surcharge>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<loan_surcharge>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<loan_surcharge>()
                .Property(e => e.surcharge_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<loan_surcharge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<loan_surcharge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location>()
                .Property(e => e.default_branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.shipping_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.location_name)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.lot_bin_integration)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.use_tags_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.tag_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.rf_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.fedex_loc_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.fedex_meter_no)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.dea_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.dea_number)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.wwms_show_bin_alloc_warning)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.parker_distributor_no)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.rf_frontcounterpicking_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.default_oe_source_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location>()
                .Property(e => e.consigned_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location>()
                .Property(e => e.autoconfirm_prod_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.print_prod_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.ups_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.general_manager_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.associated_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location>()
                .Property(e => e.ups_olt_access_key)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.ups_olt_password)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.ups_olt_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.strategic_retail_location_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.roadnet_do_not_route_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.aia_prompt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.cardlock_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.pedigree_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.wwms_default_primary_bin_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.wwms_default_primary_bin_trans)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.manufacturer_rebate_loc)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.track_customer_package_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.weight_per_box)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location>()
                .Property(e => e.distribution_center)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.sales_tax_payable_gl_account)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.external_tax_backup_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location>()
                .Property(e => e.region_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.use_bins_for_trans_schedule_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.use_pallets_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.use_pallet_types_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.voucher_class)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.allow_multiple_assemblies_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.undershipment_allocation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.centeron_default_taker)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.high_velocity_level)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location>()
                .Property(e => e.mid_velocity_level)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location>()
                .Property(e => e.tax_by_source_loc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.shipping_location_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.gst_registration_no)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.wwms_default_deposit_bin)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.quotebuilder_default_taker)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.exclude_otf_items_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.ext_tax_company_code)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.fca_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.prevent_auto_assign_lots_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.prevent_auto_ts_creation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.consignment_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location>()
                .Property(e => e.print_packinglist_in_wwms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.print_transfer_packinglist_in_wwms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.rollup_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location>()
                .Property(e => e.rf_transfer_pack_list_printer)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.print_ucc128_with_pt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.auto_allocate_in_po_import_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.default_field_destroy_reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.use_dq_routing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.use_catch_weight_processing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.rma_receipts_use_primary_bin)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.fedex_default_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.skip_parker_export_in_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.adjust_found_items_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.damaged_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.cardlock_nexus_location)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.ext_tax_freight_bkup_tax_exempt)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.rfnavigator_user_name)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.rfnavigator_password)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.rfnavigator_drop_location)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.priority_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location>()
                .Property(e => e.update_velocity_settings)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.calc_tax_for_mros_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .Property(e => e.eori_no)
                .IsUnicode(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.aiag_label)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.crib_cc_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.aiag_label1)
                .WithOptional(e => e.location1)
                .HasForeignKey(e => e.location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.asb_call_criteria)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.assembly_hdr_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.average_inventory_value)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.bins)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.bin_zone)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.bin_zone_group)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.boxes)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.buy_get_locs)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.carrier_pick_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.carrier_ship_via)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.cc_payment_type_x_processor)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.commission_rule)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.sales_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.companies)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.invoice_only_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.companies1)
                .WithOptional(e => e.location1)
                .HasForeignKey(e => e.default_sales_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.company_x_oe_loc)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.consolidated_picking_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.contacts)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.cust_defaults)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.preferred_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.customer_salesrep_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.cycle_count_loc_criteria)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.degree_days)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.delivery_x_delivery_group)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.demand_line_point)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.dispatcher_pricing_dtl)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.source_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.dispatcher_pricing_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.document_printer_x_loc)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.external_count_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.freightquote_package_detail)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.origin_location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.gpor_supplier_pending_log)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.group_pick_ticket_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.group_po_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_adj_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_adj_loc_attribute_group)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_alloc_trans)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_cost_edit)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_excise_tax)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_group_loc_allocation)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_group_region_loc)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.dest_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_group_region_loc1)
                .WithRequired(e => e.location1)
                .HasForeignKey(e => e.source_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_loc)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_loc_msp)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_loc_salesrep)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_mast_damaged)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_period_usage_temp)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_reclassification_work)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inv_sub_history)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.receipt_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inventory_defaults)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.replenishment_location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inventory_movement)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inventory_movement_error_log)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.inventory_return_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.item_commitment_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.item_count_detail)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.job_price_hdr)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.sales_loc_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.job_price_line_consign)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.source_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.label_definition_x_loc)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.landed_cost_driver)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.to_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.landed_cost_driver1)
                .WithOptional(e => e.location1)
                .HasForeignKey(e => e.location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_jurisdiction)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.purchase_transfer_locations)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasOptional(e => e.location_workorder_info)
                .WithRequired(e => e.location);

            modelBuilder.Entity<location>()
                .HasOptional(e => e.location_allocation_info)
                .WithRequired(e => e.location);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_allocation_path)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_attribute_group)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_form_template)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_iva_tax)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_language)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_other_charge)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_packing_options)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_pod_options)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_rental)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.rfnavigator_sync_dump_batch)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_supplier)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_terms)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_trade)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_x_integration)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.location_x_po_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.multi_po_asn_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.oe_line_bss)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.originating_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.oe_line_service_labor)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.order_import_exception)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.source_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.process_x_transaction)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.pallet_bol_hdr)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.dest_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.pda_oelist_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.po_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.pool_liner_process_defaults)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.price_book_x_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.price_page_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.pricing_service_layout_loc)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.pricing_template_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.prod_order_line_component)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.source_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.prod_order_hdr)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.source_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.prod_pick_ticket_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.prod_order_line_comp_labor)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.research_tracking_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.rf_terminal)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.service_labor_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.service_inv_mast)
                .WithOptional(e => e.location)
                .HasForeignKey(e => e.default_location_id);

            modelBuilder.Entity<location>()
                .HasMany(e => e.ship_to_location_priority)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.ship_to_salesrep_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.shipments)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.ship_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.shipping_group_line)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.shopping_cart_allocation)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.source_loc_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.state_alt_loc)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.alt_loc_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.trackabout_truck)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.transfer_backorders)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.destination_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.transfer_backorders1)
                .WithRequired(e => e.location1)
                .HasForeignKey(e => e.source_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.transfer_days)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.from_location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.transfer_days1)
                .WithRequired(e => e.location1)
                .HasForeignKey(e => e.to_location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.users_x_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.vendor_vmi_x_location)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.vessel_receipts_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.wip_worksheet_x_assembly)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.wip_worksheet_x_component)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.wireless_trans_audit_hdr)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.work_order_item)
                .WithRequired(e => e.location)
                .HasForeignKey(e => e.ship_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.work_order_item1)
                .WithRequired(e => e.location1)
                .HasForeignKey(e => e.source_location_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.wwms_label_defaults)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location>()
                .HasMany(e => e.wwms_receipt_defaults)
                .WithRequired(e => e.location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location_allocation_info>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_allocation_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_allocation_path>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_allocation_path>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_allocation_path>()
                .Property(e => e.allocation_path)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_allocation_path>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_allocation_path>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_attribute_group>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_attribute_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_attribute_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_form_template>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_form_template>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_form_template>()
                .Property(e => e.transfer_filename)
                .IsUnicode(false);

            modelBuilder.Entity<location_form_template>()
                .Property(e => e.transfer_pl_filename)
                .IsUnicode(false);

            modelBuilder.Entity<location_form_template>()
                .Property(e => e.pick_ticket_filename)
                .IsUnicode(false);

            modelBuilder.Entity<location_form_template>()
                .Property(e => e.prod_order_filename)
                .IsUnicode(false);

            modelBuilder.Entity<location_form_template>()
                .Property(e => e.prod_pick_ticket_filename)
                .IsUnicode(false);

            modelBuilder.Entity<location_form_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_form_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.calculator_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.mark_up_source_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.taxable_flag)
                .IsUnicode(false);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.ap_tax_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<location_intercompany>()
                .Property(e => e.ap_tax_description)
                .IsUnicode(false);

            modelBuilder.Entity<location_iva_tax>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_iva_tax>()
                .Property(e => e.use_parent_timezone_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_iva_tax>()
                .Property(e => e.cfdi_timezone_offset)
                .IsUnicode(false);

            modelBuilder.Entity<location_iva_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_iva_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_jurisdiction>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_jurisdiction>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_jurisdiction>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_jurisdiction>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_jurisdiction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_jurisdiction>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_language>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_language>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_language>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_language>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_loa_role>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_loa_role>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_loa_role>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<location_loa_role>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_loa_role>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_mx>()
                .Property(e => e.location_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_mx>()
                .Property(e => e.location_name)
                .IsUnicode(false);

            modelBuilder.Entity<location_mx>()
                .Property(e => e.state_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<location_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<location_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_other_charge>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_other_charge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_other_charge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_packing_options>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_packing_options>()
                .Property(e => e.req_pack_at_shipping_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_packing_options>()
                .Property(e => e.dflt_scan_and_pack_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_packing_options>()
                .Property(e => e.dflt_incremental_scan_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_packing_options>()
                .Property(e => e.wwms_create_scan_pack_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_packing_options>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_packing_options>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_packing_options>()
                .Property(e => e.prnt_carton_label_after_final_pkg_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_packing_options>()
                .Property(e => e.prnt_shipping_lbl_after_final_pkg_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_palletlock>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_palletlock>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_palletlock>()
                .Property(e => e.lock_pallet_from_picking_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_palletlock>()
                .Property(e => e.no_of_hours)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location_palletlock>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_palletlock>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_pod_options>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_pod_options>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_pod_options>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_related_orgs>()
                .Property(e => e.location_id)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location_related_orgs>()
                .Property(e => e.org_value)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_related_orgs>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_related_orgs>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_related_orgs>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_rental>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_rental>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_rental>()
                .Property(e => e.rental_user)
                .IsUnicode(false);

            modelBuilder.Entity<location_rental>()
                .Property(e => e.rental_password)
                .IsUnicode(false);

            modelBuilder.Entity<location_rental>()
                .Property(e => e.rental_api_key)
                .IsUnicode(false);

            modelBuilder.Entity<location_rental>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_rental>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_source_transfer>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_source_transfer>()
                .Property(e => e.calculation_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_source_transfer>()
                .Property(e => e.calculation_source)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_source_transfer>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location_source_transfer>()
                .Property(e => e.source_loc_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<location_source_transfer>()
                .Property(e => e.sell_loc_expense_acct)
                .IsUnicode(false);

            modelBuilder.Entity<location_source_transfer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_source_transfer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.control_value)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.target_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.review_cycle)
                .HasPrecision(3, 0);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.default_carrier)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.default_ship_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.average_lead_time)
                .HasPrecision(3, 0);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.lead_time_source)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.lead_time_safety_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.freight_control_value)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.freight_target_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.plant_code)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.shipping_point)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.distributor_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.distributor_sold_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.distributor_ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.storage_location)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.carrier_customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.carrier_location_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.c10_sold_to)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.c10_ship_to)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.spa_ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.pegmost_payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.pegmost_variance_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.pegmost_variance_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.pegmost_bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_supplier>()
                .Property(e => e.supplier_zone_cost_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier>()
                .HasOptional(e => e.location_supplier_194)
                .WithRequired(e => e.location_supplier);

            modelBuilder.Entity<location_supplier>()
                .HasMany(e => e.location_supplier_aqnet)
                .WithRequired(e => e.location_supplier)
                .HasForeignKey(e => new { e.company_id, e.location_id, e.supplier_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<location_supplier_194>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier_194>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_supplier_194>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_supplier_194>()
                .Property(e => e.exclude_from_lead_time)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier_aqnet>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier_aqnet>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_supplier_aqnet>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_supplier_aqnet>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier_aqnet>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.swisslog_integration_enabled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.swisslog_webservice_url)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.swisslog_bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.swisslog_bin_type)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.swisslog_error_bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.swisslog_missing_bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.swisslog_owner)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_swisslog>()
                .Property(e => e.confirm_shipment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_terms>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_terms>()
                .Property(e => e.tax_terms_taken_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_terms>()
                .Property(e => e.other_charge_terms_taken_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_terms>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_terms>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_trackabout>()
                .Property(e => e.trackabout_send_deliveries)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_trackabout>()
                .Property(e => e.trackabout_auto_send_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_trackabout>()
                .Property(e => e.trackabout_send_truck_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_trackabout>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_trackabout>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_trackabout>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_trackabout>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_trackabout>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_trade>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_trade>()
                .Property(e => e.customs_broker_no)
                .IsUnicode(false);

            modelBuilder.Entity<location_trade>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_trade>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_trade>()
                .Property(e => e.track_pedimento_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_ud>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_ud>()
                .Property(e => e.sales_region)
                .IsUnicode(false);

            modelBuilder.Entity<location_ud>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_ud>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_workorder_info>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_workorder_info>()
                .Property(e => e.labor_billback_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<location_workorder_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_x_integration>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_x_integration>()
                .Property(e => e.sync_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<location_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<location_x_po_hdr>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_x_po_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<location_x_po_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_incoming>()
                .Property(e => e.transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_incoming>()
                .Property(e => e.result)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_incoming>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_incoming>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_incoming>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_incoming>()
                .Property(e => e.trn_command)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_incoming>()
                .Property(e => e.sp_error_msg)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.trn_command)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.result)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.trn_key1_name)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.trn_key1_value)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.trn_key2_name)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.trn_key2_value)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.trn_key3_name)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.trn_key3_value)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<log_pinpoint_trn_info>()
                .Property(e => e.pinpoint_id)
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales>()
                .Property(e => e.lost_sales_id)
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales>()
                .Property(e => e.lost_sales_desc)
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales>()
                .Property(e => e.affect_usage)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales>()
                .HasMany(e => e.lost_sales_transaction)
                .WithRequired(e => e.lost_sales)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lost_sales_transaction>()
                .Property(e => e.affect_usage)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales_transaction>()
                .Property(e => e.sku_qty_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lost_sales_transaction>()
                .Property(e => e.usage_processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lost_sales_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<lot>()
                .Property(e => e.lot1)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot>()
                .Property(e => e.comment)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.sku_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot>()
                .Property(e => e.user_defined1)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.user_defined2)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<lot>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.belt_remnant_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.sku_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot>()
                .Property(e => e.belt_purchasing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.belt_purchasing_length_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.belt_purchasing_width_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.full_roll_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot>()
                .Property(e => e.full_roll_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<lot>()
                .Property(e => e.full_roll_uom)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.swisslog_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.pricing_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot>()
                .Property(e => e.atomic_lot_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot>()
                .Property(e => e.atomic_lot_height)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot>()
                .Property(e => e.atomic_lot_dimension_scale)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.atomic_lot_usable_area)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.atomic_lot_base_id)
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .Property(e => e.step_cut_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot>()
                .HasMany(e => e.serial_x_lot)
                .WithRequired(e => e.lot)
                .HasForeignKey(e => new { e.company_id, e.location_id, e.lot_cd, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lot_adjust_alert>()
                .Property(e => e.adjusted_lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<lot_adjust_alert>()
                .Property(e => e.original_lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<lot_adjust_alert>()
                .Property(e => e.adjusted_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_adjust_alert>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_adjust_alert>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attr_x_lot_attr_grp>()
                .Property(e => e.default_traceable_factor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attr_x_lot_attr_grp>()
                .Property(e => e.part_of_lot_key)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attr_x_lot_attr_grp>()
                .Property(e => e.required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attr_x_lot_attr_grp>()
                .Property(e => e.purchase_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attr_x_lot_attr_grp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attr_x_lot_attr_grp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attr_x_lot_attr_grp>()
                .Property(e => e.dflt_lot_attribute_value)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute>()
                .Property(e => e.lot_attribute_cd)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute>()
                .Property(e => e.lot_attribute_desc)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute>()
                .Property(e => e.validation_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute>()
                .Property(e => e.country_of_origin_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute>()
                .Property(e => e.warranty_serial_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute>()
                .HasMany(e => e.lot_attr_x_lot_attr_grp)
                .WithRequired(e => e.lot_attribute)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lot_attribute>()
                .HasMany(e => e.lot_attribute_value)
                .WithRequired(e => e.lot_attribute)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lot_attribute>()
                .HasMany(e => e.lot_x_lot_attribute_value)
                .WithRequired(e => e.lot_attribute)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lot_attribute>()
                .HasMany(e => e.po_line_x_lot_attribute_value)
                .WithRequired(e => e.lot_attribute)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lot_attribute_group>()
                .Property(e => e.lot_attribute_group_cd)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_group>()
                .Property(e => e.group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_group>()
                .Property(e => e.use_lot_attrib_criteria_allocation)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_group>()
                .HasMany(e => e.lot_attr_x_lot_attr_grp)
                .WithRequired(e => e.lot_attribute_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lot_attribute_group>()
                .HasMany(e => e.lot_attribute_group_tran)
                .WithRequired(e => e.lot_attribute_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<lot_attribute_group_tran>()
                .Property(e => e.max_traceable_allowed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_group_tran>()
                .Property(e => e.check_lot_certification)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_group_tran>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_group_tran>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_group_tran>()
                .Property(e => e.primary_attribute)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_value>()
                .Property(e => e.lot_attribute_value1)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_attribute_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.qty_allocated_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.qty_allocated_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.qty_allocated_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.qty_on_hand_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.qty_on_hand_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.qty_on_hand_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.sku_cost_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.sku_cost_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.sku_cost_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.use_lot_cost_as_inventory_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.inventory_value_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.inventory_value_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.inventory_value_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.sql_current_user)
                .IsUnicode(false);

            modelBuilder.Entity<lot_audit>()
                .Property(e => e.action_type)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bill_audit>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bill_audit>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bill_audit>()
                .Property(e => e.edit_reason)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bill_audit>()
                .Property(e => e.lot_bill_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_bill_audit>()
                .Property(e => e.lot_bill_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_bill_audit>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<lot_bill_audit>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bill_audit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bill_audit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_dealloc_report>()
                .Property(e => e.lot_or_bin)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_dealloc_report>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_dealloc_report>()
                .Property(e => e.lot_bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_dealloc_report>()
                .Property(e => e.unit_qty)
                .HasPrecision(19, 4);

            modelBuilder.Entity<lot_bin_dealloc_report>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_dealloc_report>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_dealloc_report>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_xref>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_xref>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<lot_bin_xref>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_xref>()
                .Property(e => e.bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_xref>()
                .Property(e => e.qty_linked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_bin_xref>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_xref>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.auto_assign_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.edit_type)
                .IsUnicode(false);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.oe_line_order_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.lot_qty_available)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.lot_qty_assigned)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.shelf_life_pct_remaining)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.cust_shelf_life_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.cust_same_lot_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.shelf_life_guarantee_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_shelf_life_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_uom>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<lot_uom>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<lot_uom>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_uom>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_x_lot_attribute_value>()
                .Property(e => e.lot_attribute_value)
                .IsUnicode(false);

            modelBuilder.Entity<lot_x_lot_attribute_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_x_lot_attribute_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_x_lot_attribute_value>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.total_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.bill_of_lading_no)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.origin_name)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.origin_address)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.destination_name)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.destination_address)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.shipment_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.accessorial_fee_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ltl_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<machine>()
                .Property(e => e.machine_id)
                .IsUnicode(false);

            modelBuilder.Entity<machine>()
                .Property(e => e.machine_desc)
                .IsUnicode(false);

            modelBuilder.Entity<machine>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<machine>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mail_list>()
                .Property(e => e.list_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<mail_list>()
                .Property(e => e.list_desc)
                .IsUnicode(false);

            modelBuilder.Entity<mail_list>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mail_list>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<mail_list>()
                .HasMany(e => e.contactlists)
                .WithRequired(e => e.mail_list)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<mail_list>()
                .HasMany(e => e.marketing_campaign_detail)
                .WithRequired(e => e.mail_list)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<manual_pick_sequence>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<manual_pick_sequence>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<manufacturer_program_type>()
                .Property(e => e.manufacturer_program_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<manufacturer_program_type>()
                .Property(e => e.manufacturer_program_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<manufacturer_program_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<manufacturer_program_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<manufacturing_class>()
                .Property(e => e.manufacturing_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<manufacturing_class>()
                .Property(e => e.manufacturing_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<manufacturing_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<manufacturing_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<manufacturing_class>()
                .HasMany(e => e.price_page)
                .WithOptional(e => e.manufacturing_class)
                .HasForeignKey(e => e.mfg_class_id);

            modelBuilder.Entity<marketing_campaign_detail>()
                .Property(e => e.list_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<marketing_campaign_detail>()
                .Property(e => e.bought_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<marketing_campaign_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<marketing_campaign_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mass_update_definition>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<mass_update_definition>()
                .Property(e => e.include_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<mass_update_definition>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<mass_update_definition>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mass_update_definition>()
                .HasMany(e => e.mass_update_definition_detail)
                .WithRequired(e => e.mass_update_definition)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<mass_update_definition_detail>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<mass_update_definition_detail>()
                .Property(e => e.include_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<mass_update_definition_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<mass_update_definition_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change>()
                .Property(e => e.is_key)
                .IsFixedLength();

            modelBuilder.Entity<massupdate_change>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key1_cd)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key1_value)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key2_cd)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key2_value)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key3_cd)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key3_value)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key4_cd)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key4_value)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key5_cd)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key5_value)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key6_cd)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_change_x_keys>()
                .Property(e => e.key6_value)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_details_result>()
                .Property(e => e.dataelement_name)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_details_result>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_details_result>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_details_result>()
                .Property(e => e.is_key)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_details_result>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_details_result>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_result>()
                .Property(e => e.completed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_result>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_result>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_result>()
                .Property(e => e.request_id)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_result>()
                .HasMany(e => e.massupdate_job_transaction_result)
                .WithRequired(e => e.massupdate_job_result)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<massupdate_job_transaction_result>()
                .Property(e => e.status)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_transaction_result>()
                .Property(e => e.result_message)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_transaction_result>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_transaction_result>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<massupdate_job_transaction_result>()
                .HasMany(e => e.massupdate_job_details_result)
                .WithRequired(e => e.massupdate_job_transaction_result)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<master_bin_audit_trail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<master_bin_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<master_inquiry_tab_default>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<master_inquiry_tab_default>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<master_inquiry_tab_default>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mcc_code_hierarchy_hdr>()
                .Property(e => e.mcc_code)
                .IsUnicode(false);

            modelBuilder.Entity<mcc_code_hierarchy_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<mcc_code_hierarchy_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mcc_code_hierarchy_hdr>()
                .HasMany(e => e.mcc_code_hierarchy_line)
                .WithRequired(e => e.mcc_code_hierarchy_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<mcc_code_hierarchy_line>()
                .Property(e => e.substitutable_code)
                .IsUnicode(false);

            modelBuilder.Entity<mcc_code_hierarchy_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<mcc_code_hierarchy_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<med_coup_cust_dtl_x_oe_hdr>()
                .Property(e => e.redeemed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<med_coup_cust_dtl_x_oe_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<med_coup_cust_dtl_x_oe_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.coupon_no)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.pin_no)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.comment)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.note_1)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.note_2)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.note_3)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.redeemed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.coupon_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.redeemed_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_customer_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<medical_coupon_hdr>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_hdr>()
                .Property(e => e.meeting_cd)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_hdr>()
                .Property(e => e.combinable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_hdr>()
                .Property(e => e.coupon_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<medical_coupon_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_hdr>()
                .Property(e => e.amt_billed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<medical_coupon_hdr>()
                .HasMany(e => e.medical_coupon_customer_dtl)
                .WithRequired(e => e.medical_coupon_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<medical_coupon_hdr>()
                .HasMany(e => e.medical_coupon_hdr_x_inv_mast)
                .WithRequired(e => e.medical_coupon_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<medical_coupon_hdr_x_inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_hdr_x_inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<medical_coupon_hdr_x_inv_mast>()
                .Property(e => e.item_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<medical_coupon_hdr_x_inv_mast>()
                .Property(e => e.item_uom)
                .IsUnicode(false);

            modelBuilder.Entity<message_foreign>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<message_foreign>()
                .Property(e => e.foreign_text)
                .IsUnicode(false);

            modelBuilder.Entity<message_foreign>()
                .Property(e => e.foreign_title)
                .IsUnicode(false);

            modelBuilder.Entity<message_foreign>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<message_foreign>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<message_log>()
                .Property(e => e.application_name)
                .IsUnicode(false);

            modelBuilder.Entity<message_log>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<message_log>()
                .Property(e => e.user_text)
                .IsUnicode(false);

            modelBuilder.Entity<message_log>()
                .Property(e => e.technical_text)
                .IsUnicode(false);

            modelBuilder.Entity<message_log>()
                .Property(e => e.stack)
                .IsUnicode(false);

            modelBuilder.Entity<message_log>()
                .Property(e => e.user_text_extended)
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.message_title)
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.user_text)
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.technical_text)
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.icon)
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.button)
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.default_button)
                .HasPrecision(2, 0);

            modelBuilder.Entity<message>()
                .Property(e => e.print_indicator)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.user_input)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.window_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.use_long_message)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .Property(e => e.copy_indicator)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<message>()
                .HasMany(e => e.message_foreign)
                .WithRequired(e => e.message)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<message>()
                .HasMany(e => e.message_log)
                .WithRequired(e => e.message)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metric>()
                .HasMany(e => e.cpa_net_profit_configuration)
                .WithOptional(e => e.metric)
                .HasForeignKey(e => e.remaining_allocator_metric_uid);

            modelBuilder.Entity<metric>()
                .HasMany(e => e.metrics_filter_result)
                .WithRequired(e => e.metric)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metric>()
                .HasMany(e => e.metrics_filter_sql)
                .WithRequired(e => e.metric)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metric>()
                .HasMany(e => e.metrics_hierarchy_execution_level)
                .WithRequired(e => e.metric)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.ar_balance)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.cash_receipts_applied_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.cash_receipt_extended_applied_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.converted_quote_line_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.cost_of_goods_sold)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.earned_discount_taken_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.finance_charge_allowed_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.freight_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.gross_profit_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.handling_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.invoice_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.price_override_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.procured_lines_via_po_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.procured_lines_via_transfer_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.returned_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.special_procured_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.price_override_difference)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.sales_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.tax_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.total_allowed_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.total_cancelled_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.consignment_replenishment_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.total_credit_card_remittance_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.total_credit_rebill_discrepancy_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.consignment_usage_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.quote_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.returned_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.sample_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer>()
                .Property(e => e.unearned_terms_taken_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.ar_balance)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.cash_receipts_applied_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.cash_receipt_extended_applied_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.converted_quote_line_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.cost_of_goods_sold)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.earned_discount_taken_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.finance_charge_allowed_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.freight_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.gross_profit_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.handling_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.invoice_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.price_override_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.procured_lines_via_po_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.procured_lines_via_transfer_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.returned_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.special_procured_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.price_override_difference)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.sales_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.tax_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.total_allowed_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.total_cancelled_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.consignment_replenishment_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.total_credit_card_remittance_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.total_credit_rebill_discrepancy_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.consignment_usage_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.quote_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.returned_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.sample_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_daily_customer_working>()
                .Property(e => e.unearned_terms_taken_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_hierarchy_level>()
                .HasMany(e => e.cpa_grade_notes)
                .WithRequired(e => e.metrics_hierarchy_level)
                .HasForeignKey(e => e.hierarchy_level_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metrics_hierarchy_level>()
                .HasMany(e => e.cpa_scorecard_configuration)
                .WithOptional(e => e.metrics_hierarchy_level)
                .HasForeignKey(e => e.hierarchy_level_uid);

            modelBuilder.Entity<metrics_hierarchy_level>()
                .HasMany(e => e.metrics_filter_sql)
                .WithRequired(e => e.metrics_hierarchy_level)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metrics_hierarchy_level>()
                .HasMany(e => e.metrics_hierarchy_execution_level)
                .WithRequired(e => e.metrics_hierarchy_level)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metrics_hierarchy_level>()
                .HasMany(e => e.metrics_hierarchy_level1)
                .WithOptional(e => e.metrics_hierarchy_level2)
                .HasForeignKey(e => e.parent_hierarchy_level_uid);

            modelBuilder.Entity<metrics_hierarchy_level>()
                .HasMany(e => e.metrics_period_customer)
                .WithOptional(e => e.metrics_hierarchy_level)
                .HasForeignKey(e => e.hierarchy_level_uid);

            modelBuilder.Entity<metrics_hierarchy_level>()
                .HasMany(e => e.metrics_period_hierarchy)
                .WithRequired(e => e.metrics_hierarchy_level)
                .HasForeignKey(e => e.hierarchy_level_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.ar_balance)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.average_cancelled_line_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.average_days_past_due)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.average_days_to_pay)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.average_invoice_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.average_lines_per_order)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.average_order_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.average_shipments_per_order)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.cash_receipts_applied_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.cash_receipt_extended_applied_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.converted_quote_line_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.cost_of_goods_sold)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.score)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.score_trend)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.days_sales_outstanding)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.earned_discount_taken_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.finance_charge_allowed_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.freight_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.gross_profit_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.gross_profit_percent)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.handling_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.invoice_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.net_profit)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.net_profit_percent)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.price_override_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.procured_lines_via_po_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.procured_lines_via_transfer_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.returned_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.special_procured_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_lines_with_price_override)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_overall_cancelled_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_overall_quote_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_overall_return_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.overall_sales_percent)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_overall_samples_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_bin_managed_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_drop_shipped_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_edi_order_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_front_counter_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_ordered_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_nonstock_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_special_procured_lines_via_po)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_special_procured_lines_via_transfer)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_returned_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_sample_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_special_procurement_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_shipped_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.percent_of_total_web_order_lines)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.price_override_difference)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.order_line_sample_line_percent)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.quote_conversion_rate)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.sales_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.sales_x_average_days_to_pay)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.sales_x_dso)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.tax_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.total_allowed_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.total_cancelled_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.consignment_replenishment_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.total_credit_card_remittance_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.total_credit_rebill_discrepancy_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.consignment_usage_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.quote_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.returned_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.sample_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_customer>()
                .Property(e => e.unearned_terms_taken_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_date_dimension>()
                .HasMany(e => e.metrics_period_customer)
                .WithOptional(e => e.metrics_period_date_dimension)
                .HasForeignKey(e => e.period_date_dimension_uid);

            modelBuilder.Entity<metrics_period_date_dimension>()
                .HasMany(e => e.metrics_period_hierarchy)
                .WithRequired(e => e.metrics_period_date_dimension)
                .HasForeignKey(e => e.period_date_dimension_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metrics_period_definition>()
                .Property(e => e.period_definition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<metrics_period_definition>()
                .HasMany(e => e.metrics_period_customer)
                .WithOptional(e => e.metrics_period_definition)
                .HasForeignKey(e => e.period_definition_uid);

            modelBuilder.Entity<metrics_period_definition>()
                .HasMany(e => e.metrics_period_hierarchy)
                .WithRequired(e => e.metrics_period_definition)
                .HasForeignKey(e => e.period_definition_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.ar_balance)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.cash_receipts_applied_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.cash_receipt_extended_applied_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.net_profit)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.converted_quote_line_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.cost_of_goods_sold)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.earned_discount_taken_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.finance_charge_allowed_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.freight_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.gross_profit_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.handling_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.invoice_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.price_override_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.procured_lines_via_po_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.procured_lines_via_transfer_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.returned_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.special_procured_lines_count)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.price_override_difference)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.sales_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.tax_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.total_allowed_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.total_cancelled_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.consignment_replenishment_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.total_credit_card_remittance_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.total_credit_rebill_discrepancy_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.consignment_usage_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.quote_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.returned_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.sample_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<metrics_period_hierarchy>()
                .Property(e => e.unearned_terms_taken_amount)
                .HasPrecision(38, 2);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.response_code)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.terminal_id)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.last4cc)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.transaction_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.credit_card_name)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.authorization_no)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.void_transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.original_transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.customer_transaction_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<mexico_creditcard_info>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<mft_x_import_transaction>()
                .Property(e => e.mft_filename)
                .IsUnicode(false);

            modelBuilder.Entity<mft_x_import_transaction>()
                .Property(e => e.transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<mft_x_import_transaction>()
                .Property(e => e.file_id)
                .IsUnicode(false);

            modelBuilder.Entity<mft_x_import_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<mft_x_import_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.minmax_selection_criteria_id)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.from_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.to_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.from_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.to_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.from_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.to_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.from_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.to_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.from_purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.to_purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_level_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_trend_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_seasonal_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_seasonal_trend_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_slow_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_erratic_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_minmax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_upto_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_opoq_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_eoq_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<minmax_selection_criteria>()
                .Property(e => e.consider_sporadic_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<modification>()
                .Property(e => e.property_value)
                .IsUnicode(false);

            modelBuilder.Entity<modification>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<modification>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<module>()
                .Property(e => e.module_id)
                .IsUnicode(false);

            modelBuilder.Entity<module>()
                .Property(e => e.module_description)
                .IsUnicode(false);

            modelBuilder.Entity<module>()
                .Property(e => e.frame_name)
                .IsUnicode(false);

            modelBuilder.Entity<module>()
                .Property(e => e.class_name)
                .IsUnicode(false);

            modelBuilder.Entity<module>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<module>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<module_x_portal>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<module_x_portal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.move_cost_criteria_desc)
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.beg_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.end_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.beg_sales_group)
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.end_sales_group)
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.beg_purchase_group)
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.end_purchase_group)
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.copy_to_supplier_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.copy_to_supplier_list_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<move_cost_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<moving_avg_cost_history>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<moving_avg_cost_history>()
                .Property(e => e.inv_tran_transaction_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<moving_avg_cost_history>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<moving_avg_cost_history>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<moving_avg_cost_history>()
                .Property(e => e.moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<moving_avg_cost_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<moving_avg_cost_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mro_line_schedule>()
                .Property(e => e.release_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<mro_line_schedule>()
                .Property(e => e.dealer_commission_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<mro_line_schedule>()
                .Property(e => e.qty_shipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<mro_line_schedule>()
                .Property(e => e.qty_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<mro_line_schedule>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<mro_line_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mru_window>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<mru_window>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<mru_window>()
                .Property(e => e.frame_name)
                .IsUnicode(false);

            modelBuilder.Entity<mru_window>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<mru_window>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mru_window>()
                .Property(e => e.openedby_menuitem)
                .IsUnicode(false);

            modelBuilder.Entity<mru_window>()
                .Property(e => e.menuname)
                .IsUnicode(false);

            modelBuilder.Entity<multi_po_asn_hdr>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<multi_po_asn_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<multi_po_asn_hdr>()
                .Property(e => e.supplier_shipment_no)
                .IsUnicode(false);

            modelBuilder.Entity<multi_po_asn_hdr>()
                .Property(e => e.manual_asn_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<multi_po_asn_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<multi_po_asn_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<multi_po_asn_hdr>()
                .HasMany(e => e.multi_po_asn_line)
                .WithRequired(e => e.multi_po_asn_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<multi_po_asn_line>()
                .Property(e => e.qty_shipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<multi_po_asn_line>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<multi_po_asn_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<multi_po_asn_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<multi_po_asn_line>()
                .HasMany(e => e.multi_po_asn_line_serial)
                .WithRequired(e => e.multi_po_asn_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<multi_po_asn_line_serial>()
                .Property(e => e.serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<multi_po_asn_line_serial>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<multi_po_asn_line_serial>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<multiple_uom_receipt>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<multiple_uom_receipt>()
                .Property(e => e.qty_received)
                .HasPrecision(9, 0);

            modelBuilder.Entity<multiple_uom_receipt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<multiple_uom_receipt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<municipality_mx>()
                .Property(e => e.municipality_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<municipality_mx>()
                .Property(e => e.municipality_name)
                .IsUnicode(false);

            modelBuilder.Entity<municipality_mx>()
                .Property(e => e.state_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<municipality_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<municipality_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<municipality_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<municipality_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mymenu>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<mymenu>()
                .Property(e => e.menu_item_name)
                .IsUnicode(false);

            modelBuilder.Entity<mymenu>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<mymenu>()
                .Property(e => e.window_title)
                .IsUnicode(false);

            modelBuilder.Entity<mymenu>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<mymenu>()
                .Property(e => e.openedby_menuitem)
                .IsUnicode(false);

            modelBuilder.Entity<mymenu>()
                .Property(e => e.menuname)
                .IsUnicode(false);

            modelBuilder.Entity<mymenu>()
                .Property(e => e.WindowRole)
                .IsUnicode(false);

            modelBuilder.Entity<mymenu>()
                .Property(e => e.icon)
                .IsUnicode(false);

            modelBuilder.Entity<navigation_index>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<navigation_index>()
                .Property(e => e.menu_name)
                .IsUnicode(false);

            modelBuilder.Entity<navigation_index>()
                .Property(e => e.menu_text)
                .IsUnicode(false);

            modelBuilder.Entity<navigation_index>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<navigation_index>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<navigation_index>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<needs_list_194>()
                .Property(e => e.control_no)
                .HasPrecision(14, 0);

            modelBuilder.Entity<needs_list_194>()
                .Property(e => e.manf_code)
                .IsUnicode(false);

            modelBuilder.Entity<needs_list_194>()
                .Property(e => e.manf_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<needs_list_194>()
                .Property(e => e.qty_avail)
                .HasPrecision(5, 0);

            modelBuilder.Entity<needs_list_194>()
                .Property(e => e.price)
                .HasPrecision(10, 2);

            modelBuilder.Entity<needs_list_194>()
                .Property(e => e.sub_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<needs_list_194>()
                .Property(e => e.filename)
                .IsUnicode(false);

            modelBuilder.Entity<needs_list_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<needs_list_194>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<neighborhood_mx>()
                .Property(e => e.neighborhood_cd)
                .IsUnicode(false);

            modelBuilder.Entity<neighborhood_mx>()
                .Property(e => e.zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<neighborhood_mx>()
                .Property(e => e.neighborhood_name)
                .IsUnicode(false);

            modelBuilder.Entity<neighborhood_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<neighborhood_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<nmfc_hdr>()
                .Property(e => e.nmfc_hdr_description)
                .IsUnicode(false);

            modelBuilder.Entity<nmfc_hdr>()
                .Property(e => e.nmfc_value_description)
                .IsUnicode(false);

            modelBuilder.Entity<nmfc_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<nmfc_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<nmfc_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<note>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<note>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<note>()
                .Property(e => e.note1)
                .IsUnicode(false);

            modelBuilder.Entity<note>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<note>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<note>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<note>()
                .Property(e => e.create_order_line_note_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<note>()
                .HasMany(e => e.note_x_company)
                .WithRequired(e => e.note)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<note_area>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<note_area>()
                .Property(e => e.area)
                .IsUnicode(false);

            modelBuilder.Entity<note_area>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<note_area>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<note_display_area>()
                .Property(e => e.display_area)
                .IsUnicode(false);

            modelBuilder.Entity<note_display_area>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<note_display_area>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<note_template_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<note_template_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<note_template_hdr>()
                .Property(e => e.note_template_id)
                .IsUnicode(false);

            modelBuilder.Entity<note_template_hdr>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<note_template_hdr>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<note_template_hdr>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<note_template_hdr>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<note_template_hdr>()
                .Property(e => e.auto_add_note)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<note_template_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<note_template_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<note_template_hdr>()
                .HasMany(e => e.note_template_detail)
                .WithRequired(e => e.note_template_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<note_x_company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<note_x_company>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<note_x_company>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<notepad_class>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<notepad_class>()
                .Property(e => e.notepad_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<notepad_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<notepad_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<notepad_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<notepad_class>()
                .HasMany(e => e.gl_notepad)
                .WithOptional(e => e.notepad_class1)
                .HasForeignKey(e => e.notepad_class);

            modelBuilder.Entity<notepad_class>()
                .HasMany(e => e.po_hdr_notepad)
                .WithOptional(e => e.notepad_class1)
                .HasForeignKey(e => e.notepad_class);

            modelBuilder.Entity<notepad_class>()
                .HasMany(e => e.po_line_notepad)
                .WithOptional(e => e.notepad_class1)
                .HasForeignKey(e => e.notepad_class);

            modelBuilder.Entity<notepad_class>()
                .HasMany(e => e.transfer_line_notepad)
                .WithOptional(e => e.notepad_class1)
                .HasForeignKey(e => e.notepad_class);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.bby_po_object_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.bby_vendor_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.bby_action_flag)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.po_line_seq_no)
                .HasPrecision(3, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.po_create_date)
                .HasPrecision(8, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.bby_service_center)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.po_line_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.schematic_location)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.order_qty)
                .HasPrecision(5, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.bby_manf_cd)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.model_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.vendor_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.wrnty_non_wrnty_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.manf_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.manf_part_desc)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.unit_price)
                .HasPrecision(10, 2);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.exchange_indicator)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.vendor_action_flag)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.vendor_activity_dt)
                .HasPrecision(8, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.vendor_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.np_po_no)
                .HasPrecision(7, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.np_po_line_no)
                .HasPrecision(5, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.sub_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.method_of_shipment)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.qty_shipped)
                .HasPrecision(5, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.original_bb_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.original_np_po_no)
                .HasPrecision(7, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.original_np_po_line_no)
                .HasPrecision(5, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.vendor_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.invoiced_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.bb_rgm_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.reason_cd)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.np_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.cc_proc_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.document)
                .HasPrecision(10, 0);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.invoice_sent_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.invoice_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.ordstat_sent_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_auxiliary_194>()
                .Property(e => e.orstat_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_buy_get_rewards>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_buy_get_rewards>()
                .Property(e => e.total_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_buy_get_rewards>()
                .Property(e => e.apply_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_buy_get_rewards>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_buy_get_rewards>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_buy_get_rewards>()
                .Property(e => e.redemption_notes)
                .IsUnicode(false);

            modelBuilder.Entity<oe_buy_get_rewards>()
                .Property(e => e.buy_same_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.statement_contact)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.credit_card_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.credit_card_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.credit_card_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer>()
                .Property(e => e.pedigree_contact)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_add1)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_add2)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_city)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_state)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_zip)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_country)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.terms)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship_to_phone)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.completed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.cod_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.gross_margin)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.projected_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.po_no_append)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.corp_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.handling_charge_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.payment_method)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.fob_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.taker)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.job_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.third_party_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.delivery_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.pick_ticket_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.requested_downpayment)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.downpayment_invoiced)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.cancel_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.will_call)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.front_counter)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.validation_status)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.source_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.freight_out)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.exclude_rebates)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.capture_usage_default)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.front_counter_rma)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.profit_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.bill_to_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.skip_profit_exception_check)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.cons_backorder_processing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.restock_fee_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.validated_via_open_orders_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.job_control_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.apply_builder_allowance_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.merchandise_credit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.req_pymt_upon_release_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.downpayment_percentage)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.prepaid_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.exported_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.web_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ups_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.environmental_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.admin_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.promise_date_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.order_disc_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.order_ack_printed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.b2b_ups_freight_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.blind_addressing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.replace_company_name_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.freight_mileage_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.supplier_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.supplier_release_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.send_partial_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.supplier_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.use_vendor_item_terms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.first_packing_list_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship_confirmed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.price_confirmed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.quoted_freight_out)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.apply_fuel_surcharge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.override_freight_code_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.exclude_from_credit_limit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.packing_list_filename)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.override_min_order_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.placed_by_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.approved_for_ar_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.subject)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.url)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.original_packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.freight_out_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.override_contact_email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.override_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.print_prices_on_packinglist)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.import_source)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.quote_locked_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.web_shopper_email)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.recalc_scheduled_ds_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.order_type_cust)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.engineer_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.order_ack_print_prices_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.freight_out_estimate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.freight_charge_estimate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.limit_max_shipments_per_order)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.net_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.net_billing_edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.sched_order_disc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.will_call_disc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.single_order_disc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.volume_disc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.service_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_add3)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.bill_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.electronic_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.cod_without_remittance_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.inquiry_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.so_total_parts_price_on_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.so_total_labor_price_on_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.hold_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.do_not_export_to_pts_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.generic_desc_on_packinglist_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.generic_desc_on_invoice_ack_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.will_call_notification_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.blind_ship_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.architect_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.builder_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.contractor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.designer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.homeowner_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.pts_label_print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.discount_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.customer_disc_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.consolidate_per_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.invoice_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.bypass_handling_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_latitude)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_longitude)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.lump_sum_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.field_destroy_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.warranty_return_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.allow_auto_apply_orig_inv_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.edi_manual_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.revisioning_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.quote_submitted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.warranty_rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.generate_pro_forma_invoices_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.delivery_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.advanced_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.advanced_billing_print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.rental_transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.rental_quote_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.rental_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.ship2_url)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.maf_surcharge_override)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.maf_surcharge_reason_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.oracle_carrier_id)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.inside_sales)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.gl_dimension_project_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.pickup_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.unit_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .Property(e => e.unit_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.boeing_order_xref_10000)
                .WithOptional(e => e.oe_hdr)
                .HasForeignKey(e => e.boeing_order_no);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.builders_selection_sheet)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.delivery_rma)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.email_notification_orders)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.freightquote_package_hdr)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_advance_billing)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_cc_freight_estimate)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_creditcard_avs_hold)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_integration)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_progress_billing)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_salesrep)
                .WithRequired(e => e.oe_hdr)
                .HasForeignKey(e => e.order_number)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_ship_location)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_status)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_tax)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_vat)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_x_integration)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_line_230)
                .WithRequired(e => e.oe_hdr)
                .HasForeignKey(e => e.source_quote_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_line_loa_price_edit)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_line)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_line_samples)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_location_carrier)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_pick_ticket)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasOptional(e => e.oe_schedule)
                .WithRequired(e => e.oe_hdr);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.opportunity_x_order)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.order_iva_tax)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.payment_account_request_to_delete)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.pdaship_rma_hdr_data)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.quote_revision)
                .WithRequired(e => e.oe_hdr)
                .HasForeignKey(e => e.original_quote_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.quote_revision1)
                .WithRequired(e => e.oe_hdr1)
                .HasForeignKey(e => e.quote_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.remittances)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_hdr_uom_conversion)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr>()
                .HasMany(e => e.oe_line_service_labor_tax)
                .WithRequired(e => e.oe_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr_15>()
                .Property(e => e.custom1)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_15>()
                .Property(e => e.custom2)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_15>()
                .Property(e => e.custom3)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_15>()
                .Property(e => e.custom4)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_15>()
                .Property(e => e.custom5)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_15>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_15>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_369>()
                .Property(e => e.description_1)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_369>()
                .Property(e => e.description_2)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_369>()
                .Property(e => e.description_3)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_369>()
                .Property(e => e.description_4)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_369>()
                .Property(e => e.description_5)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_369>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_369>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_additional_info>()
                .Property(e => e.description_1)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_additional_info>()
                .Property(e => e.description_2)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_additional_info>()
                .Property(e => e.description_3)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_additional_info>()
                .Property(e => e.description_4)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_additional_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_additional_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_advance_billing>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_advance_billing>()
                .Property(e => e.advance_bill)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_advance_billing>()
                .Property(e => e.advance_bill_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_advance_billing>()
                .Property(e => e.unapplied_advance_bill_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_advance_billing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_bss>()
                .Property(e => e.bss_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_bss>()
                .Property(e => e.lock_price_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_bss>()
                .Property(e => e.bss_complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_bss>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_bss>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.vehicle_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.total_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.batch_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.tax_adjustment_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.cardlock_card_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.authorization_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cardlock>()
                .Property(e => e.last_odometer_reading)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_cc_freight_estimate>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cc_freight_estimate>()
                .Property(e => e.applied_to_authorization_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cc_freight_estimate>()
                .Property(e => e.estimated_freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_hdr_cc_freight_estimate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_cc_freight_estimate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_construction_info>()
                .Property(e => e.builder)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_construction_info>()
                .Property(e => e.sub_division)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_construction_info>()
                .Property(e => e.sub_division_lot)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_construction_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_construction_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_creditcard_avs_hold>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_creditcard_avs_hold>()
                .Property(e => e.avs_response_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_creditcard_avs_hold>()
                .Property(e => e.pos_message_given)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_creditcard_avs_hold>()
                .Property(e => e.approved_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_creditcard_avs_hold>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_creditcard_avs_hold>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .Property(e => e.fedex_freight_markup)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .Property(e => e.estimated_fedex_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .Property(e => e.cod_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .Property(e => e.cod_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .Property(e => e.total_cod_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .Property(e => e.cod_recipient_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .Property(e => e.fixed_handling_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_fedex_info>()
                .HasMany(e => e.oe_hdr_fedex_info_detail)
                .WithRequired(e => e.oe_hdr_fedex_info)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.fedex_tracking_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.weight)
                .HasPrecision(19, 12);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.length)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.width)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.height)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.actual_fedex_charge)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.commercial_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fedex_info_detail>()
                .Property(e => e.package_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_hdr_fidelitone_po>()
                .Property(e => e.po_description)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fidelitone_po>()
                .Property(e => e.store_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fidelitone_po>()
                .Property(e => e.consumer_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fidelitone_po>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fidelitone_po>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fidelitone_po>()
                .Property(e => e.customer_so_string)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_fidelitone_po>()
                .Property(e => e.customer_po_string)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_integration>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.external_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.mro_tax_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_mfr>()
                .Property(e => e.tax_group_override_set_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.default_in_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.general_note)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_order_cmp_pct>()
                .Property(e => e.order_completion_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_order_cmp_pct>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_order_cmp_pct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_product_group>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_product_group>()
                .Property(e => e.override_percent)
                .HasPrecision(9, 0);

            modelBuilder.Entity<oe_hdr_product_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_product_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .Property(e => e.progress_bill_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .Property(e => e.percent_complete)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .Property(e => e.percent_billed)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .Property(e => e.additional_labor)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .Property(e => e.additional_freight)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .Property(e => e.additional_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_hdr_progress_billing>()
                .HasMany(e => e.progress_billing_x_invoice_hdr)
                .WithRequired(e => e.oe_hdr_progress_billing)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_hdr_rma>()
                .Property(e => e.apply_credit_to_invoice_no)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_rma>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_rma>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_rma>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_salesrep>()
                .Property(e => e.order_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_salesrep>()
                .Property(e => e.commission_split)
                .HasPrecision(5, 2);

            modelBuilder.Entity<oe_hdr_salesrep>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_salesrep>()
                .Property(e => e.primary_salesrep)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_salesrep>()
                .Property(e => e.exclude_split_validation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_salesrep>()
                .Property(e => e.commission_override_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_hdr_ship_location>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_ship_location>()
                .Property(e => e.ship_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_hdr_ship_location>()
                .Property(e => e.freight_allowed_regular_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_ship_location>()
                .Property(e => e.freight_allowed_nfa_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_ship_location>()
                .Property(e => e.no_freight_allowed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_ship_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_ship_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_ship_location>()
                .Property(e => e.cod_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_ship_location>()
                .Property(e => e.order_cod_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_shipserv>()
                .Property(e => e.vessel_imo_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_shipserv>()
                .Property(e => e.vessel_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_shipserv>()
                .Property(e => e.port_country)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_shipserv>()
                .Property(e => e.buyer_tradenet_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_shipserv>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_shipserv>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_shipserv>()
                .Property(e => e.company_tradenet_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_source_loc_override>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_source_loc_override>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_status>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_status>()
                .Property(e => e.status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_status>()
                .Property(e => e.reason)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_status>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_status>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax>()
                .Property(e => e.rma_linked_tax)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax>()
                .HasMany(e => e.oe_hdr_tax_ud)
                .WithRequired(e => e.oe_hdr_tax)
                .HasForeignKey(e => new { e.order_no, e.jurisdiction_id });

            modelBuilder.Entity<oe_hdr_tax_ud>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax_ud>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax_ud>()
                .Property(e => e.tax_exemption)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax_ud>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax_ud>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_tax_ud>()
                .Property(e => e.tax_exempt_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_u_of_michigan>()
                .Property(e => e.department_ref_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_u_of_michigan>()
                .Property(e => e.short_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_u_of_michigan>()
                .Property(e => e.deliver_to)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_u_of_michigan>()
                .Property(e => e.unique_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_u_of_michigan>()
                .Property(e => e.requisitioner_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_u_of_michigan>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_u_of_michigan>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_uom_conversion>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_uom_conversion>()
                .Property(e => e.override_uom_conv_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_uom_conversion>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_uom_conversion>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.vat_source)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.registration_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.exemption_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.eu_member_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.override_cust_vat)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_vat>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_work_order_info>()
                .Property(e => e.job_site_id)
                .HasPrecision(10, 0);

            modelBuilder.Entity<oe_hdr_work_order_info>()
                .Property(e => e.location_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_work_order_info>()
                .Property(e => e.option_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_work_order_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_x_integration>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_x_price_library>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_x_price_library>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.qty_per_assembly)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.manual_price_overide)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.sales_tax)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.base_ut_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.calc_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.calc_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.combinable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.qty_on_pick_tickets)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.qty_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.source_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.ship_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.assembly)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.scheduled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.lot_bill)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.next_break)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.next_ut_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.customer_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.tax_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.ok_to_interchange)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.other_charge)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.sales_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.requested_downpayment)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.will_call)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.downpayment_remaining)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.cancel_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.commission_cost_edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.other_cost_edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.qty_canceled)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.qty_staged)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.user_line_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.item_terms_discount_pct)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.default_in_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.freight_in)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.substitute_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.allocate_usage_to_original_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.order_cost_edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.capture_usage)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.hose_qty_needed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.original_qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.cost_center)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.disposition_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.dea_restriction_failed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.restock_fee_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.customer_configured_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.customer_picked_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.cust_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.use_contract_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.tag_package_qty_per)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.used_specific_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.item_commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.from_alt_prev_requests_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.ud_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.item_bill_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.buyback_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.routing_status_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.additional_description)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.bill_hold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.core_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.clock)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.cell)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.environmental_fee)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.admin_fee)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.ext_disc_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.system_calc_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.buyer)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.recipient)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.strategic_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.verified_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.verified_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.used_strategic_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.original_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.original_freight_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.tank_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.split_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.strategic_list_cost_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.sample_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.routing_allocation_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.unit_pick_fee)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.oe_line_alt_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.retail_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.core_item_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.suppress_custom_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.buy_list_approval_initial)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.geocom_forced_send_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.geocom_forced_quantity)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.belting_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.belting_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.freight_in_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.sales_discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.pump_off_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.target_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.edi830_last_shipment_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.edi830_last_receive_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.faspac_ytd_qty_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.price_adj_note)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.imported_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.gl_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.rfq_indicator_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.buy_get_rewards_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.carrier_rebate_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.line_discount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.line_discount_description)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.unit_distributor_net)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.extended_distributor_net)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.extended_desc_location)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.extended_desc_customer)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.eco_fee_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.bypass_prod_order_processing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.generic_custom_description)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.restricted_by_address_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.secondary_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.secondary_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.original_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.secondary_manual_price_overide)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.extended_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.print_desc_on_forms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.print_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.courtesy_core_return_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.qa_status)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.service_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.prediscount_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.cust_percentage_disc)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.original_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.price_lock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.ext_electronic_disc_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.service_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.po_contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.exclude_from_edi_844_867_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.add_to_open_pt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.reason_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.damaged_item_serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.export_parker_printer_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.create_trackabout_lease_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.pricing_multiplier_from_lot)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.rental_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.rental_return_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.rental_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.quote_conversion_list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.quoted_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.conversion_order_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.direct_ship_freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.linked_charge_scale_qty_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.org_value)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.line_supplier_exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<oe_line>()
                .Property(e => e.default_source_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.geocom_handheld)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.oe_line_tax)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_number, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.oe_line_component)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_number, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.oe_line_eco_fee)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.oe_line_lot)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_no, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.oe_line_notepad)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.oe_line_schedule)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.oe_line_serial)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_no, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.oe_line_status)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.oe_line_x_integration)
                .WithRequired(e => e.oe_line)
                .HasForeignKey(e => new { e.order_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line>()
                .HasMany(e => e.strategic_pricing_oe_info)
                .WithOptional(e => e.oe_line)
                .HasForeignKey(e => new { e.order_no, e.line_no });

            modelBuilder.Entity<oe_line_1000>()
                .Property(e => e.budget_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_1000>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_1000>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_194>()
                .Property(e => e.purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_230>()
                .Property(e => e.source_quote_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_230>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_235>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_235>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_265>()
                .Property(e => e.imported_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_265>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_265>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_265>()
                .Property(e => e.imported_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_265>()
                .Property(e => e.imported_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_523>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_523>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_982>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_982>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.manual_price_overide)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_alternate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_bss>()
                .Property(e => e.originating_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_bss>()
                .Property(e => e.samples_given_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_bss>()
                .Property(e => e.samples_returned_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_bss>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_bss>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_buy_get_rewards>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_buy_get_rewards>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_class>()
                .Property(e => e.class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_class>()
                .Property(e => e.class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_class>()
                .Property(e => e.class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_class>()
                .Property(e => e.class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_class>()
                .Property(e => e.class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.order_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.sequence_number)
                .HasPrecision(5, 0);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.component_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.assembly_quantity)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.qty_on_pick_tickets)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.qty_invoiced)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_component>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_config_prompt>()
                .Property(e => e.prompt_text)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_config_prompt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_config_prompt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_consignment>()
                .Property(e => e.qty_transferred)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_consignment>()
                .Property(e => e.qty_delivered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_consignment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_consignment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_cost_category>()
                .Property(e => e.pct_amt_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_cost_category>()
                .Property(e => e.pct_amt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_cost_category>()
                .Property(e => e.add_sub_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_cost_category>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_cost_category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_cost_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_cost_code>()
                .Property(e => e.cost_code_1)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_cost_code>()
                .Property(e => e.cost_code_2)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_cost_code>()
                .Property(e => e.cost_code_3)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_cost_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_cost_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_dealer_commission>()
                .Property(e => e.dealer_commission_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_dealer_commission>()
                .Property(e => e.dealer_commission_ext_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_dealer_commission>()
                .Property(e => e.dealer_commission_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_dealer_commission>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_dealer_commission>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_dealer_commission>()
                .Property(e => e.dealer_commission_tax_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_dealer_commission>()
                .Property(e => e.rma_linked_tax_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.exempt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.gl_account)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.eco_fee_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.eco_fee_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.quantity_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.amount_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.eco_fees_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.tax_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.linked_rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_eco_fee>()
                .Property(e => e.home_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_excise_tax>()
                .Property(e => e.excise_tax_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_excise_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_excise_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.customer_po_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.manufacturer_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.part_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.part_description)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.exchange_indicator)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.customer_so_string)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.customer_po_string)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_fidelitone_po>()
                .Property(e => e.subfor_string)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_freight>()
                .Property(e => e.freight_anticipated_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_freight>()
                .Property(e => e.incoming_freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_freight>()
                .Property(e => e.freight_qty_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_freight>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_freight>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_freight>()
                .Property(e => e.freight_in_per_sku)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_hose_assembly>()
                .Property(e => e.hose_assembly_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_hose_assembly>()
                .Property(e => e.hose_overall_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_hose_assembly>()
                .Property(e => e.hose_uom)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_hose_assembly>()
                .Property(e => e.component_cut_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_hose_assembly>()
                .Property(e => e.cut_length_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_hose_assembly>()
                .Property(e => e.hose_fitting_d_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_hose_assembly>()
                .Property(e => e.hose_fitting_uom)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_hose_assembly>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_hose_assembly>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_insurance>()
                .Property(e => e.hicfa_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_insurance>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_insurance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_integration>()
                .Property(e => e.job_mgmt_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_label_group>()
                .Property(e => e.label_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_label_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_label_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_labor>()
                .Property(e => e.estimated_labor_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_labor>()
                .Property(e => e.estimated_labor_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_labor>()
                .Property(e => e.estimated_labor_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_last_margin_price>()
                .Property(e => e.prev_sku_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_last_margin_price>()
                .Property(e => e.prev_qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_last_margin_price>()
                .Property(e => e.prev_profit_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_last_margin_price>()
                .Property(e => e.one_time_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_last_margin_price>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_last_margin_price>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_last_margin_price>()
                .Property(e => e.item_priced_by_last_margin)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.order_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.system_calc_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.discounted_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.taker)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.approver)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.rc_reason_code)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.rc_competitor_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.rc_competitor_price)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.rc_basemodel_product)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.rc_reason_description)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.rc_image_capture)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_loa_price_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_lot>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_lot>()
                .Property(e => e.quantity)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_lot>()
                .Property(e => e.qty_picked)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_lot>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.lot_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.lot_bill_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.price_basis)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.accumulated_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.open_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.lot_bill_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.accumulated_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.open_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.lot_billing_comments)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.lot_bill_price_edit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.lot_bill_cost_edit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.lot_bill_profit_edit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.billing_profit_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_lot_billing>()
                .Property(e => e.packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_notepad>()
                .Property(e => e.tally_note_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_panel>()
                .Property(e => e.default_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_panel>()
                .Property(e => e.default_display_in_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_panel>()
                .Property(e => e.real_dw)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_panel>()
                .Property(e => e.system_setting_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_panel>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_panel>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_pass_through>()
                .Property(e => e.pass_through_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_pass_through>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_pass_through>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.order_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.quantity_on_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.po_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.cancel_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.completed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.connection_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po>()
                .Property(e => e.original_oe_line_freight_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_po>()
                .HasMany(e => e.oe_line_po_x_inv_receipts_line)
                .WithRequired(e => e.oe_line_po)
                .HasForeignKey(e => new { e.order_number, e.oe_line_number, e.po_no, e.po_line_number, e.connection_type })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line_po_x_inv_receipts_line>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_po_x_inv_receipts_line>()
                .Property(e => e.po_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_po_x_inv_receipts_line>()
                .Property(e => e.order_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po_x_inv_receipts_line>()
                .Property(e => e.oe_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_po_x_inv_receipts_line>()
                .Property(e => e.connection_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po_x_inv_receipts_line>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_po_x_inv_receipts_line>()
                .Property(e => e.qty_allocated_on_oe)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_po_x_inv_receipts_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_po_x_inv_receipts_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_promise_date>()
                .Property(e => e.edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_promise_date>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_promise_date>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_promise_date>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_promise_date>()
                .Property(e => e.alert)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_promise_date>()
                .Property(e => e.insufficient_data_to_calculate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_quote_info_27>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_quote_info_27>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_quote_info_27>()
                .Property(e => e.delivery_quote)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_quote_info_27>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_quote_info_27>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_rental_rate>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_rental_rate>()
                .Property(e => e.duration)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_rental_rate>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_rental_rate>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_rental_rate>()
                .Property(e => e.total)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_rental_rate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_rental_rate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_rewards>()
                .Property(e => e.rebate_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_rewards>()
                .Property(e => e.rebate_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_rewards>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_rewards>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_rewards>()
                .Property(e => e.rebate_amt_fc)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_line_rewards>()
                .Property(e => e.amf_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_rma>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_rma>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.room_description)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.sku_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.sku_qty_staged)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.sku_qty_on_pick_tickets)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.sku_qty_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.sku_qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.sku_qty_released)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_room>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_room>()
                .HasMany(e => e.oe_pick_ticket_detail_room)
                .WithRequired(e => e.oe_line_room)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_salesrep>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_salesrep>()
                .Property(e => e.enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_salesrep>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_salesrep>()
                .Property(e => e.exclude_split_validation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_salesrep>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_salesrep>()
                .Property(e => e.commission_override_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_samples>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_samples>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_samples>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_samples>()
                .Property(e => e.converted_to_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_samples>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_samples>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.release_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.release_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.allocated_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.expedite_value)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.expedite_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.pick_value)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.pick_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.printed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.qty_picked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.qty_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.qty_staged)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.qty_canceled)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.edit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.promise_date_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.release_status_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.price_recalculated_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_schedule>()
                .Property(e => e.edi830_accum_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_secondary_rebate>()
                .Property(e => e.secondary_rebate_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_secondary_rebate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_secondary_rebate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_secondary_rebate>()
                .Property(e => e.cost_calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_secondary_rebate>()
                .Property(e => e.other_cost_source_price_oe)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_secondary_rebate>()
                .Property(e => e.seconday_rebate_src_price_oe)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_serial>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_serial>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_serial>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_serial>()
                .Property(e => e.invoiced_or_picked)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_serial>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.in_house)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.estimated_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.service_ext_desc)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.service_make)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.service_model)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.po_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.ship_to_customer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.shipped)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.parts_packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.service_item_otf_new)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service>()
                .HasMany(e => e.oe_line_service_x_integration)
                .WithRequired(e => e.oe_line_service)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line_service>()
                .HasMany(e => e.oe_line_service_labor)
                .WithRequired(e => e.oe_line_service)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line_service>()
                .HasMany(e => e.oe_line_service_warranty)
                .WithRequired(e => e.oe_line_service)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.bill_to_customer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.print_on_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.print_on_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.hours_worked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.hours_charged)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.applied_labor_acct)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.base_ut_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.base_labor_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.total_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.total_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.covered_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.covered_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.manual_price_overide)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.warranty_edit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.sales_tax)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.sales_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.commission_cost_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.qty_estimated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.estimated_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.estimated_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.in_allowance)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.out_allowance)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.hours_charged_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.flat_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .Property(e => e.original_base_ut_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor>()
                .HasMany(e => e.oe_line_service_labor_time)
                .WithRequired(e => e.oe_line_service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line_service_labor>()
                .HasMany(e => e.service_labor_schedule)
                .WithRequired(e => e.oe_line_service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line_service_labor_tax>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor_tax>()
                .Property(e => e.taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor_tax>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor_time>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor_time>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.bill_to_customer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.print_on_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.print_on_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.total_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.total_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.covered_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.covered_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.warranty_edit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.qty_estimated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.estimated_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.estimated_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.third_party_service_part_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.suppress_j_disp_on_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.to_loc_to_loc_adj_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.from_loc_to_loc_adj_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_service_part>()
                .Property(e => e.comp_part_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_warranty>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_warranty>()
                .Property(e => e.warranty_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_service_warranty>()
                .Property(e => e.create_claim_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_warranty>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_service_warranty>()
                .HasMany(e => e.warranty_claim_hdr)
                .WithRequired(e => e.oe_line_service_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_line_service_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_special_purchase>()
                .Property(e => e.special_purchase_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_special_purchase>()
                .Property(e => e.special_po_received_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_special_purchase>()
                .Property(e => e.special_purchase_qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_special_purchase>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_special_purchase>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_status>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_status>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_status>()
                .Property(e => e.status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_status>()
                .Property(e => e.reason)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_status>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_status>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_subtotal_options>()
                .Property(e => e.print_on_quote_ack)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_subtotal_options>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_subtotal_options>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_supplier_charges>()
                .Property(e => e.misc_charge_override)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_supplier_charges>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_supplier_charges>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_tax>()
                .Property(e => e.order_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_tax>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_tax>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_tax>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_tax>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_trackabout_lease>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_trackabout_lease>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.set_pressure)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.service_cd)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.seat_diameter)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.capacity_no)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.cd_stamp)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.spring_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.capacity_rating)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.part_no_suffix)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_valve>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_work_order>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_employee>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_employee>()
                .Property(e => e.badge_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_employee>()
                .Property(e => e.bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_employee>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_x_employee>()
                .Property(e => e.batch_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_employee>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_employee>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_employee>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_integration>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_integration>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_location_carrier>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_location_carrier>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_location_carrier>()
                .Property(e => e.default_carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_location_carrier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_message_log>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_message_log>()
                .Property(e => e.message_text)
                .IsUnicode(false);

            modelBuilder.Entity<oe_message_log>()
                .Property(e => e.context)
                .IsUnicode(false);

            modelBuilder.Entity<oe_message_log>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.instructions)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.freight_out)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.freight_in)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.invoice_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.pick_and_hold)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.printed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.direct_shipment)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.front_counter_tax)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.total_tax)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.front_counter)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.invoice_id_when_shipped)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.auxiliary)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.picker)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.weight_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.override_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.outgoing_freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.quality_control)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.packing_list_printed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.dea_pick_ticket_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.packer)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.checker)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.review_shipment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.original_freight_out)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.exported_to_router_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.price_confirmed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.ship_confirmed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.vics_bol_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.out_freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.freight_out_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.print_prices_on_packinglist)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.pregenerated_invoice_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.prepaid_freight_out)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.print_canadian_b3_forms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.pro_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.packing_list_print_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.slab_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.shipping_account)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.sid_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.user_confirmed_pick_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.scan)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.actual_fedex_freight_out)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.diff_fedex_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.pick_confirmed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.sent_to_trackabout_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.bol_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.arn_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.pick_complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .Property(e => e.pickup_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.bill_hold_hdr)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.clippership_return_nfa_1934)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.consolidated_asn_pick_ticket)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.consolidated_picking_line)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.customer_package_hdr)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.delivery_pick_ticket)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.ups_connectship_freight)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.oe_pick_ticket_detail)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.oe_pick_ticket_freight_info)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.oe_pick_ticket_frt_charges)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.oe_pick_ticket_package)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.oe_pick_ticket_trackabout)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.oe_pick_ticket_ups)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.oe_pick_ticket_signature)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.oe_pick_ticket_consolidate)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.pick_list_hdr_x_oe_pick_ticket)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.pro_forma_info)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.routeview_batch_dtl)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.shipping_containers_hdr)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket>()
                .HasMany(e => e.shipping_iva_tax)
                .WithRequired(e => e.oe_pick_ticket)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket_consolidate>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_consolidate>()
                .Property(e => e.picked_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_consolidate>()
                .Property(e => e.packed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_consolidate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_consolidate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.print_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.ship_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.freight_in)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.oe_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.qty_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.qty_to_pick)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.staged)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.release_no)
                .HasPrecision(6, 0);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.unit_quantity_edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.environmental_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.admin_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.original_freight_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.inspected_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.qty_scanned)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.freight_in_min_applied_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.box_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.original_qty_to_pick)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.box_lpn)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.print_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .Property(e => e.employee_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .HasMany(e => e.oe_pick_ticket_detail_box)
                .WithRequired(e => e.oe_pick_ticket_detail)
                .HasForeignKey(e => new { e.pick_ticket_no, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .HasMany(e => e.oe_pick_ticket_detail_pkg)
                .WithRequired(e => e.oe_pick_ticket_detail)
                .HasForeignKey(e => new { e.pick_ticket_no, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .HasMany(e => e.oe_pick_ticket_detail_room)
                .WithRequired(e => e.oe_pick_ticket_detail)
                .HasForeignKey(e => new { e.pick_ticket_no, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .HasMany(e => e.pt_dtl_bill_hold_bin)
                .WithRequired(e => e.oe_pick_ticket_detail)
                .HasForeignKey(e => new { e.pick_ticket_no, e.pick_ticket_line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_pick_ticket_detail>()
                .HasMany(e => e.scan_pack_container_detail)
                .WithOptional(e => e.oe_pick_ticket_detail)
                .HasForeignKey(e => new { e.pick_ticket_no, e.line_number });

            modelBuilder.Entity<oe_pick_ticket_detail_box>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail_box>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail_box>()
                .Property(e => e.box_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail_box>()
                .Property(e => e.sku_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail_box>()
                .Property(e => e.sku_qty_boxed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail_box>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_box>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_box>()
                .Property(e => e.z_box_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_pkg>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail_pkg>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail_pkg>()
                .Property(e => e.ship_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail_pkg>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_pkg>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.room_description)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.print_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.ship_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.qty_to_pick)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_room>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.trackabout_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.new_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.qty_delivered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.qty_returned)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.tag_delivered)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.tag_returned)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.serial_no_delivered)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.serial_no_returned)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.lot_delivered)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.lot_returned)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_detail_trackabout>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_freight_info>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_freight_info>()
                .Property(e => e.allowable_freight)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_pick_ticket_freight_info>()
                .Property(e => e.freight_allowed_regular_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_freight_info>()
                .Property(e => e.freight_allowed_nfa_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_freight_info>()
                .Property(e => e.no_freight_allowed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_freight_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_freight_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_frt_charges>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_frt_charges>()
                .Property(e => e.cold_per_box_charge)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_pick_ticket_frt_charges>()
                .Property(e => e.hazmat_per_box_charge)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_pick_ticket_frt_charges>()
                .Property(e => e.express_freight_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_pick_ticket_frt_charges>()
                .Property(e => e.bulk_freight_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<oe_pick_ticket_frt_charges>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_frt_charges>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_frt_charges>()
                .Property(e => e.free_bulk_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_package>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_package>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_package>()
                .Property(e => e.weight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<oe_pick_ticket_package>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_package>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_package>()
                .Property(e => e.added_to_list)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_signature>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_signature>()
                .Property(e => e.signature)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_signature>()
                .Property(e => e.recipient_name)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_signature>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_signature>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_signature>()
                .Property(e => e.stores_image_path_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_trackabout>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_trackabout>()
                .Property(e => e.trip_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_trackabout>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_trackabout>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_ups>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_pick_ticket_ups>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_ups>()
                .Property(e => e.sent_to_roadnet_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_ups>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_pick_ticket_ups>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.order_number)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.release_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.round_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.total_releases)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.frequency_value)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.frequency_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.expedite_value)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.expedite_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.pick_value)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.pick_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule>()
                .Property(e => e.default_to_all)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule>()
                .HasMany(e => e.oe_schedule_detail)
                .WithRequired(e => e.oe_schedule)
                .HasForeignKey(e => e.order_no)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<oe_schedule_detail>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule_detail>()
                .Property(e => e.release_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_schedule_detail>()
                .Property(e => e.expedite_value)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_schedule_detail>()
                .Property(e => e.expedite_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule_detail>()
                .Property(e => e.pick_value)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_schedule_detail>()
                .Property(e => e.pick_type)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_schedule_detail>()
                .Property(e => e.promise_date_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.use_shipping_groups)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.commission_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.other_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.other_cost_source)
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.downpayment_option)
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.recalculate_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.pricing_uom_is_order_uom)
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.print_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.all_on_1st_pick_hold)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.suppress_pick_and_hold)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.oe_system_parameter_uid)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.allow_source_ship_to_differ)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.change_source_loc_via_popup)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_system_parameters>()
                .Property(e => e.suppress_backorder_on_pickticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<operation>()
                .Property(e => e.operation_cd)
                .IsUnicode(false);

            modelBuilder.Entity<operation>()
                .Property(e => e.operation_desc)
                .IsUnicode(false);

            modelBuilder.Entity<operation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<operation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.opportunity_name)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.opportunity_description)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.source_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.opportunity_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.assigned_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity>()
                .HasMany(e => e.opportunity_competitor)
                .WithRequired(e => e.opportunity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<opportunity>()
                .HasMany(e => e.opportunity_contact)
                .WithRequired(e => e.opportunity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<opportunity>()
                .HasMany(e => e.opportunity_product_group)
                .WithRequired(e => e.opportunity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<opportunity>()
                .HasMany(e => e.opportunity_supplier)
                .WithRequired(e => e.opportunity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<opportunity>()
                .HasMany(e => e.opportunity_x_order)
                .WithRequired(e => e.opportunity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<opportunity>()
                .HasMany(e => e.opportunity_x_room)
                .WithRequired(e => e.opportunity)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<opportunity_competitor>()
                .Property(e => e.strengths)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_competitor>()
                .Property(e => e.weaknesses)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_competitor>()
                .Property(e => e.other_info)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_competitor>()
                .Property(e => e.won_opportunity_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_competitor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_competitor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_contact>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_contact>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_contact>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_list_temp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_list_temp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.total_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.item_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.cost_per_uom)
                .HasPrecision(19, 4);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.price_per_uom)
                .HasPrecision(19, 4);

            modelBuilder.Entity<opportunity_product_group>()
                .Property(e => e.total_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<opportunity_stage>()
                .Property(e => e.opportunity_stage_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_stage>()
                .Property(e => e.opportunity_stage_desc)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_stage>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_stage>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_status>()
                .Property(e => e.opportunity_status_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_status>()
                .Property(e => e.opportunity_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_status>()
                .Property(e => e.complete_opportunity_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_status>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_status>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_status>()
                .Property(e => e.default_status_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_status>()
                .HasMany(e => e.opportunities)
                .WithRequired(e => e.opportunity_status)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<opportunity_step>()
                .Property(e => e.opportunity_step_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_step>()
                .Property(e => e.opportunity_step_desc)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_step>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_step>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_supplier>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<opportunity_supplier>()
                .Property(e => e.total_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<opportunity_supplier>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_supplier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_supplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_type>()
                .Property(e => e.opportunity_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_type>()
                .Property(e => e.opportunity_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_x_order>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_x_order>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_x_order>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_x_room>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<opportunity_x_room>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.report_type)
                .IsUnicode(false);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.inside_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.customer_service_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.salesrep_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.isr_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.csr_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.chain_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.dept_commission_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.commission_paid_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.commission_note)
                .IsUnicode(false);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_based_commission>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_cost_category>()
                .Property(e => e.order_cost_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_cost_category>()
                .Property(e => e.order_cost_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<order_cost_category>()
                .Property(e => e.order_cost_category_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<order_cost_category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_cost_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_cost_category>()
                .HasMany(e => e.oe_line_cost_category)
                .WithRequired(e => e.order_cost_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<order_floor_plan_xref_10002>()
                .Property(e => e.floor_plan_approval_number)
                .IsUnicode(false);

            modelBuilder.Entity<order_floor_plan_xref_10002>()
                .Property(e => e.bill_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<order_floor_plan_xref_10002>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_floor_plan_xref_10002>()
                .Property(e => e.bill_to_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_hold_class>()
                .Property(e => e.order_hold_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_hold_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_hold_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.qty_allocated_remotely)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.qty_allocated_import)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.total_order_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.taker)
                .IsUnicode(false);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_import_exception>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_iva_tax>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_iva_tax>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<order_iva_tax>()
                .Property(e => e.payment_method_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_iva_tax>()
                .Property(e => e.domestic_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<order_iva_tax>()
                .Property(e => e.account_digits)
                .IsUnicode(false);

            modelBuilder.Entity<order_iva_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_iva_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_iva_tax>()
                .Property(e => e.leyenda_fiscal_1)
                .IsUnicode(false);

            modelBuilder.Entity<order_iva_tax>()
                .Property(e => e.tax_registration_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_location_switch>()
                .Property(e => e.request_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<order_location_switch>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<order_location_switch>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<order_location_switch>()
                .Property(e => e.destination_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<order_location_switch>()
                .Property(e => e.line_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<order_location_switch>()
                .Property(e => e.error_message)
                .IsUnicode(false);

            modelBuilder.Entity<order_location_switch>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_location_switch>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_priority>()
                .Property(e => e.order_priority_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_priority>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_priority>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_priority>()
                .Property(e => e.workbench_priority_pick_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<order_priority>()
                .HasMany(e => e.inventory_movement)
                .WithRequired(e => e.order_priority)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<order_priority>()
                .HasMany(e => e.order_priority_threshold)
                .WithRequired(e => e.order_priority)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.order_value_break14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_priority_threshold>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_surcharge>()
                .Property(e => e.order_surcharge_id)
                .IsUnicode(false);

            modelBuilder.Entity<order_surcharge>()
                .Property(e => e.order_surcharge_desc)
                .IsUnicode(false);

            modelBuilder.Entity<order_surcharge>()
                .Property(e => e.min_order_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_surcharge>()
                .Property(e => e.min_order_surcharge_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_surcharge>()
                .Property(e => e.min_web_order_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_surcharge>()
                .Property(e => e.min_web_order_surcharge_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_surcharge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_surcharge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_surcharge>()
                .Property(e => e.min_gallon_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_surcharge>()
                .HasMany(e => e.customer_order_surcharge)
                .WithRequired(e => e.order_surcharge)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<order_terms_acceptance>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<order_terms_acceptance>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<order_terms_acceptance>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_terms_acceptance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_totals>()
                .Property(e => e.sales_sub_total)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_totals>()
                .Property(e => e.total_other_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_totals>()
                .Property(e => e.total_freight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_totals>()
                .Property(e => e.tax_total)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_totals>()
                .Property(e => e.sales_total)
                .HasPrecision(19, 9);

            modelBuilder.Entity<order_totals>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_totals>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_type_value>()
                .Property(e => e.required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<order_type_value>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<order_type_value>()
                .Property(e => e.default_column_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<order_type_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_type_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_types>()
                .Property(e => e.order_type_name)
                .IsUnicode(false);

            modelBuilder.Entity<order_types>()
                .Property(e => e.order_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<order_types>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<order_types>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ota_delivery>()
                .Property(e => e.response_document)
                .IsUnicode(false);

            modelBuilder.Entity<ota_delivery>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ota_delivery>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ota_delivery>()
                .Property(e => e.last_requested_by)
                .IsUnicode(false);

            modelBuilder.Entity<outlook_error_log>()
                .Property(e => e.error_message)
                .IsUnicode(false);

            modelBuilder.Entity<outlook_error_log>()
                .Property(e => e.error_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<outlook_error_log>()
                .Property(e => e.error_area)
                .IsUnicode(false);

            modelBuilder.Entity<outlook_error_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<outlook_error_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<output_audit_trail>()
                .Property(e => e.document_number)
                .IsUnicode(false);

            modelBuilder.Entity<output_audit_trail>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<output_audit_trail>()
                .Property(e => e.output_type)
                .IsUnicode(false);

            modelBuilder.Entity<output_audit_trail>()
                .Property(e => e.file_name)
                .IsUnicode(false);

            modelBuilder.Entity<output_audit_trail>()
                .Property(e => e.file_path)
                .IsUnicode(false);

            modelBuilder.Entity<output_audit_trail>()
                .Property(e => e.client_name)
                .IsUnicode(false);

            modelBuilder.Entity<output_audit_trail>()
                .Property(e => e.printer_name)
                .IsUnicode(false);

            modelBuilder.Entity<output_audit_trail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<output_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_inbound_log>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_inbound_log>()
                .Property(e => e.processing_path_status)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_inbound_log>()
                .Property(e => e.docstar_connection_status)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_inbound_log>()
                .Property(e => e.return_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_inbound_log>()
                .Property(e => e.return_message)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_inbound_log>()
                .Property(e => e.json)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_inbound_log>()
                .Property(e => e.stack_trace)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_inbound_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_inbound_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.rule_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.processing_path_status)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.docstar_connection_status)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.transaction_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.custom_field_creation_status)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.return_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.return_message)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.json)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.stack_trace)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.input_xml)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.input_customfields_xml)
                .IsUnicode(false);

            modelBuilder.Entity<p21_docstar_outbound_log>()
                .Property(e => e.processing_retrigger_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.value_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.sales_cost_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.commission_cost_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.other_cost_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.unit_price_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.pricing_unit_size_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.qty_ordered_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.qty_canceled_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.modified_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_eda_incremental_bookings>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_info>()
                .Property(e => e.end_point)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_info>()
                .Property(e => e.outgoing_payload_class)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_info>()
                .Property(e => e.outgoing_payload_view)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_info>()
                .Property(e => e.multithreaded_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.trn_key1_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.trn_key1_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.trn_key2_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.trn_key2_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.trn_key3_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.trn_key3_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.outgoing_payload)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.result_cd)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.result_message)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.extended_audit_info)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_log>()
                .Property(e => e.manual_resolve_flag)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.trn_key1_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.trn_key1_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.trn_key2_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.trn_key2_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.trn_key3_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.trn_key3_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.action_type)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.integration_trans_type)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.manual_resolve_flag)
                .IsUnicode(false);

            modelBuilder.Entity<p21_ext_integration_queue>()
                .Property(e => e.manual_queue_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_fulltext_catalog>()
                .Property(e => e.catalog_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_fulltext_catalog>()
                .HasMany(e => e.p21_fulltext_index_table)
                .WithRequired(e => e.p21_fulltext_catalog)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_fulltext_index_column>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_fulltext_index_table>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_fulltext_index_table>()
                .Property(e => e.primary_key)
                .IsUnicode(false);

            modelBuilder.Entity<p21_fulltext_index_table>()
                .HasMany(e => e.p21_fulltext_index_column)
                .WithRequired(e => e.p21_fulltext_index_table)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.company_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.location_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.beginning_balance)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.purchase_order_inflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.secondary_process_inflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.transfer_inflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.production_order_inflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.transfer_shipment_outflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.secondary_process_outflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.scheduled_order_outflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.production_order_outflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.customer_requirements_outflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.forecast_usage_outflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.ending_balance)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.future_transfer_demand_outflow)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.recommended_purchases)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_report>()
                .Property(e => e.net_stock)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_future_stock_analysis_run>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.end_point)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.user_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.password)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.key_enable_system_setting)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.integration_dw)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.api_key)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.secret_key)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.select_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.select_location_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.enable_resend)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .Property(e => e.enable_by_system_setting)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration>()
                .HasMany(e => e.p21_integration_x_company)
                .WithRequired(e => e.p21_integration)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration>()
                .HasMany(e => e.p21_integration_x_scheduled_job)
                .WithRequired(e => e.p21_integration)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .Property(e => e.end_point)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .Property(e => e.api_key)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .Property(e => e.secret_key)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.customer_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.grow_metric)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.inv_mast_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.item_quantity_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.location_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.oe_hdr_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.oe_line_service_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.oe_line_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.serial_number_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.service_inv_mast_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.service_labor_time_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.service_labor_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.service_technician_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.ship_to_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_company>()
                .HasMany(e => e.unit_of_measure_x_integration)
                .WithRequired(e => e.p21_integration_x_company)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<p21_integration_x_scheduled_job>()
                .Property(e => e.end_point)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration_x_scheduled_job>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_integration_x_scheduled_job>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_mapper_translation_table>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_mapper_translation_table>()
                .Property(e => e.mapper_trans_key)
                .IsUnicode(false);

            modelBuilder.Entity<p21_mapper_translation_table>()
                .Property(e => e.mapper_trans_value)
                .IsUnicode(false);

            modelBuilder.Entity<p21_mapper_translation_table>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_mapper_translation_table>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_hierarchy>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_hierarchy>()
                .Property(e => e.clr_class_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.sales_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.oe_source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.use_lowest_of_across_libraries)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.home_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.courtesy_contract_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run>()
                .Property(e => e.source_location_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run_audit_deleted_contracts>()
                .Property(e => e.delete_reason)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_audit_step>()
                .Property(e => e.query_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_audit_step>()
                .Property(e => e.step_description)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_audit_step_data>()
                .Property(e => e.column_header_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_audit_step_data>()
                .Property(e => e.column_data)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.area_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.dist_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.dist_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.claim_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.new_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.new_rebate_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.new_claim_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.new_price_contract_line_uid)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.apply_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.cust_rebate_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.mandatory_price_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.new_cust_rebate_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_line>()
                .Property(e => e.margin_sharing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.type_of_sale)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.gross_margin)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.price_mult_1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.reduction_rate_1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.price_mult_2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.reduction_rate_2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.price_mult_3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.segment_price_1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.segment_price_2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.segment_price_3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.master_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.area_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.max_claim)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.segment_claim_reduction_1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.segment_claim_reduction_2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.segment_claim_reduction_3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.new_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.new_rebate_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.new_claim_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.approved_claim_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.approved_sell_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_carrier_contract_z_line>()
                .Property(e => e.approved_profit_margin)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_error_log>()
                .Property(e => e.executetion_sql)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_error_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.disc_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.prod_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.mfr_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.customer_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.oe_sales_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.oe_pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.sales_pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.sales_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.order_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.system_other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.forced_price_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.other_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.stockable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.component_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.strategic_list_price_source_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.strategic_cost_source_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.visibility_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.strategic_list_price_cube_modifier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.strategic_cost_cube_modifier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.original_visibility_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.customer_sensitivity_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.freight_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.carrier_forced_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.root_default_revision)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.trade_promo_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.visibility_coreness_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.item_coreness_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.original_item_coreness_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_item>()
                .Property(e => e.original_visibility_coreness_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.hierarchy_value)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.shop_gpos_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.base_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.next_break)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.next_calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.next_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.combinable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_job_price_line>()
                .Property(e => e.cust_shipto_exclude_from_freight_factor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_library>()
                .Property(e => e.distributor_net_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.no_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.break_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.totaling_basis_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.price_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.price_source_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.price_calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.next_price_calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.next_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.other_cost_source_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.other_cost_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.other_cost_break_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.other_cost_calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.base_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.calc_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.apply_freight_factor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.freight_factor_source_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.core_value)
                .HasPrecision(19, 2);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.original_price_source_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.distributor_net_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_price_page>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.base_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.next_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.next_break)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.next_calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.combinable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.price_page_calculation_type)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.cost_page_calculation_type)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.strategic_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_results>()
                .Property(e => e.strategic_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.audit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.debug)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.rollup_component_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.calculator_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.limit_by_location_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.check_inventory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.use_web_based_pricing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.udl_list)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.use_lowest_of_across_libraries)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.use_distributor_net_library)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.table_suffix)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.use_location_currency)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_settings>()
                .Property(e => e.use_page_currency)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<package>()
                .Property(e => e.package_desc)
                .IsUnicode(false);

            modelBuilder.Entity<package>()
                .Property(e => e.package_length)
                .HasPrecision(19, 4);

            modelBuilder.Entity<package>()
                .Property(e => e.package_width)
                .HasPrecision(19, 4);

            modelBuilder.Entity<package>()
                .Property(e => e.package_height)
                .HasPrecision(19, 4);

            modelBuilder.Entity<package>()
                .Property(e => e.package_weight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<package>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<package>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<package>()
                .HasMany(e => e.package_x_shipment)
                .WithRequired(e => e.package)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<package_type>()
                .Property(e => e.package_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<package_type>()
                .Property(e => e.package_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<package_type>()
                .Property(e => e.package_tare_weight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<package_type>()
                .Property(e => e.package_volume)
                .HasPrecision(19, 4);

            modelBuilder.Entity<package_type>()
                .Property(e => e.package_type_default_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<package_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<package_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<package_type>()
                .Property(e => e.use_package_volume_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<package_type>()
                .HasMany(e => e.item_package_type)
                .WithRequired(e => e.package_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<package_type>()
                .HasMany(e => e.tag_detail)
                .WithRequired(e => e.package_type)
                .HasForeignKey(e => e.tag_pkg_type_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<package_x_shipment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<package_x_shipment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<package_x_shipment>()
                .HasMany(e => e.carrier_data_x_package)
                .WithRequired(e => e.package_x_shipment)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pallet_bol_hdr>()
                .Property(e => e.bol_number)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_bol_hdr>()
                .Property(e => e.dest_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pallet_bol_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pallet_bol_hdr>()
                .Property(e => e.tracking_number)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_bol_hdr>()
                .Property(e => e.truck_info)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_bol_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_bol_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_bol_hdr>()
                .HasMany(e => e.pallet_bol_line)
                .WithRequired(e => e.pallet_bol_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pallet_bol_line>()
                .Property(e => e.validated_cust_pallet_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pallet_bol_line>()
                .Property(e => e.validated_overflow_pallet_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pallet_bol_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_bol_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_hdr>()
                .Property(e => e.inter_company_transfer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pallet_hdr>()
                .HasMany(e => e.pallet_line)
                .WithRequired(e => e.pallet_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pallet_line>()
                .Property(e => e.sku_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pallet_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_lock_order>()
                .Property(e => e.pallet_id)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_lock_order>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_lock_order>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pallet_lock_order>()
                .Property(e => e.putaway_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pallet_lock_order>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pallet_lock_order>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<part_type_trade>()
                .Property(e => e.trade_type)
                .IsUnicode(false);

            modelBuilder.Entity<part_type_trade>()
                .Property(e => e.trade_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<part_type_trade>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<part_type_trade>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.partner_program_desc)
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.labor_discounts_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.shipping_discounts_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.pro_supplier_promo_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.best_pricing_guarantee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.electronic_discount_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<partner_program>()
                .Property(e => e.electronic_discount_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<partner_program>()
                .HasMany(e => e.service_labor_rate_x_partner_program)
                .WithRequired(e => e.partner_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<passive_rebate_exclusion>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_exclusion>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_exclusion>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_exclusion>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.rebate_id)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.rebate_description)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.begin_prod_group)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.end_prod_group)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.buying_group)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.buying_group_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.calc_from_first_break_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.all_prod_grps_in_volume_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .HasMany(e => e.passive_rebate_exclusion)
                .WithRequired(e => e.passive_rebate_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .HasMany(e => e.passive_rebate_level)
                .WithRequired(e => e.passive_rebate_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<passive_rebate_hdr>()
                .HasMany(e => e.passive_rebate_line)
                .WithRequired(e => e.passive_rebate_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<passive_rebate_level>()
                .Property(e => e.break_level)
                .HasPrecision(19, 9);

            modelBuilder.Entity<passive_rebate_level>()
                .Property(e => e.rebate_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<passive_rebate_level>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_level>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_line>()
                .Property(e => e.system_calc_purchases)
                .HasPrecision(19, 9);

            modelBuilder.Entity<passive_rebate_line>()
                .Property(e => e.system_calc_rebate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<passive_rebate_line>()
                .Property(e => e.vendor_calc_rebate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<passive_rebate_line>()
                .Property(e => e.reconciled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<passive_rebate_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payable_group>()
                .Property(e => e.payable_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<payable_group>()
                .Property(e => e.payable_group_description)
                .IsUnicode(false);

            modelBuilder.Entity<payable_group>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payable_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_1099_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_1099_detail>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_1099_detail>()
                .Property(e => e.year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<payment_1099_detail>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_1099_detail>()
                .Property(e => e.check_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_1099_detail>()
                .Property(e => e.ten99_type)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_1099_detail>()
                .Property(e => e.amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_1099_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.payment_acct_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.payment_acct_desc)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.extended_acct_info)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.routing_number)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.bank_name)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.bank_city)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.bank_state)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.taxpayer_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .Property(e => e.network_transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account>()
                .HasMany(e => e.payment_account_detail)
                .WithRequired(e => e.payment_account)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_account>()
                .HasMany(e => e.payment_account_request_to_delete)
                .WithRequired(e => e.payment_account)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_account>()
                .HasMany(e => e.payment_account_x_contact)
                .WithRequired(e => e.payment_account)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_account>()
                .HasMany(e => e.payment_account_x_customer)
                .WithRequired(e => e.payment_account)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_account>()
                .HasMany(e => e.payment_account_x_ship_to)
                .WithRequired(e => e.payment_account)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.accountholder_first_name)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.street_address1)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.street_address2)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.street_address3)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.state_or_province)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.country)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.phone)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.email)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_detail>()
                .Property(e => e.accountholder_last_name)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_request_to_delete>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_request_to_delete>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_request_to_delete>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_contact>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_contact>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_contact>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_account_x_contact>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_account_x_contact>()
                .Property(e => e.default_for_contact_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_contact>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_contact>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_customer>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_account_x_customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_customer>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_account_x_customer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_customer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_customer>()
                .Property(e => e.default_for_customer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_customer>()
                .Property(e => e.automatic_payment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_customer>()
                .Property(e => e.automatic_payment_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payment_account_x_ship_to>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_account_x_ship_to>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_account_x_ship_to>()
                .Property(e => e.default_for_ship_to_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_ship_to>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_account_x_ship_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_ship_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_ship_to>()
                .Property(e => e.automatic_payment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_ship_to>()
                .Property(e => e.automatic_payment_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payment_account_x_transaction>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_account_x_transaction>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_account_x_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_account_x_transaction>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.num_operacion)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.rfc_emisor_cta_ord)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.nom_banco_ord_ext)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.cta_ordenante)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.rfc_emisor_cta_ben)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.cta_beneficiario)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.tipo_cad_pago)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.cert_pago)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.cad_pago)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.sello_pago)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_additional_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_override>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_cfdi_override>()
                .Property(e => e.payment_amount_cfdi)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_cfdi_override>()
                .Property(e => e.payment_currency_id_cfdi)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_cfdi_override>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_cfdi_override>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.check_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.home_amt_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.terms_amount_taken)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.amount_paid_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.terms_amount_taken_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_detail>()
                .Property(e => e.currency_variance_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_detail>()
                .HasMany(e => e.payment_detail_iva)
                .WithRequired(e => e.payment_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.iva_amount_paid_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.iva_amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.iva_received_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.iva_withheld_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.iva_amount_received_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.iva_amount_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.iva_paid_reduced_amt_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.iva_paid_reduced_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_detail_iva>()
                .Property(e => e.currency_variance_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment_method_mx>()
                .Property(e => e.payment_method_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_method_mx>()
                .Property(e => e.payment_method_desc)
                .IsUnicode(false);

            modelBuilder.Entity<payment_method_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_method_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_method_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<payment_method_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_methods>()
                .Property(e => e.payment_method_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_methods>()
                .Property(e => e.payment_method_desc)
                .IsUnicode(false);

            modelBuilder.Entity<payment_methods>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_methods>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_methods>()
                .HasMany(e => e.payment_types)
                .WithRequired(e => e.payment_methods)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.payment_type_mx_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.payment_type_mx_desc)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.is_banked)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.operation_number)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.rfc_payer_account)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.pattern_payer_account)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.rfc_beneficiary_account)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.beneficiary_account)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.pattern_beneficiary_account)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.chain_payment_type)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.foreign_bank_name)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .Property(e => e.payer_account)
                .IsUnicode(false);

            modelBuilder.Entity<payment_type_mx>()
                .HasMany(e => e.payment_types_x_payment_type_mx)
                .WithRequired(e => e.payment_type_mx)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.payment_method_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.payment_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.discount)
                .HasPrecision(4, 2);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.flat_rate)
                .HasPrecision(4, 2);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.wildcard_account)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.use_check_verification_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.cash_discount_eligible_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.convenience_fee_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.service_voucher)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.billtrust_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.paypal_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.display_in_rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types>()
                .Property(e => e.bank_no_override)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_types>()
                .HasMany(e => e.ar_payment_details)
                .WithRequired(e => e.payment_types)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_types>()
                .HasMany(e => e.cc_payment_type_x_processor)
                .WithRequired(e => e.payment_types)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_types>()
                .HasMany(e => e.payment_account_x_contact)
                .WithRequired(e => e.payment_types)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_types>()
                .HasMany(e => e.payment_account_x_customer)
                .WithRequired(e => e.payment_types)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_types>()
                .HasMany(e => e.payment_account_x_ship_to)
                .WithRequired(e => e.payment_types)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_types>()
                .HasMany(e => e.pmt_type_x_comm_reduction)
                .WithRequired(e => e.payment_types)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<payment_types_335>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment_types_335>()
                .Property(e => e.card_no_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types_335>()
                .Property(e => e.auth_no_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment_types_335>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_types_335>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_types_x_payment_type_mx>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<payment_types_x_payment_type_mx>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 1);

            modelBuilder.Entity<payment_types_x_payment_type_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment_types_x_payment_type_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment>()
                .Property(e => e.check_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment>()
                .Property(e => e._void)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment>()
                .Property(e => e.check_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.cleared_bank)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<payment>()
                .Property(e => e.terms_taken_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment>()
                .Property(e => e.ap_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payment>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<payment>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<payment>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payment>()
                .Property(e => e.home_chk_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.void_period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<payment>()
                .Property(e => e.void_year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<payment>()
                .Property(e => e.terms_taken_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.check_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.currency_variance_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.reason)
                .IsUnicode(false);

            modelBuilder.Entity<payment>()
                .Property(e => e.home_currency_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payment>()
                .Property(e => e.calculated_exchange_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payment>()
                .Property(e => e.iva_withheld_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.iva_withheld_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.iva_terms_amount_taken)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.iva_terms_amount_taken_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<payment>()
                .Property(e => e.bank_gl_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<payment>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<payment>()
                .HasMany(e => e.payment_detail)
                .WithRequired(e => e.payment)
                .HasForeignKey(e => new { e.company_no, e.bank_no, e.check_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_tnam)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_ownr)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_cnam)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_labl)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_hdr)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_mask)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_ptrn)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_bmap)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_init)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_cmnt)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_edit)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatcol>()
                .Property(e => e.pbc_tag)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatedt>()
                .Property(e => e.pbe_name)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatedt>()
                .Property(e => e.pbe_edit)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatedt>()
                .Property(e => e.pbe_work)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcatfmt>()
                .Property(e => e.pbf_name)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatfmt>()
                .Property(e => e.pbf_frmt)
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbt_tnam)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbt_ownr)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbd_fitl)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbd_funl)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbd_ffce)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbh_fitl)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbh_funl)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbh_ffce)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbl_fitl)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbl_funl)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbl_ffce)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pbcattbl>()
                .Property(e => e.pbt_cmnt)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatvld>()
                .Property(e => e.pbv_name)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatvld>()
                .Property(e => e.pbv_vald)
                .IsUnicode(false);

            modelBuilder.Entity<pbcatvld>()
                .Property(e => e.pbv_msg)
                .IsUnicode(false);

            modelBuilder.Entity<pc_app_def>()
                .Property(e => e.app_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_app_def>()
                .Property(e => e.pb_app_lib)
                .IsUnicode(false);

            modelBuilder.Entity<pc_app_def>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pc_app_def>()
                .Property(e => e.exe_filename)
                .IsUnicode(false);

            modelBuilder.Entity<pc_app_def>()
                .Property(e => e.exe_path)
                .IsUnicode(false);

            modelBuilder.Entity<pc_app_def>()
                .Property(e => e.runtime_parm)
                .IsUnicode(false);

            modelBuilder.Entity<pc_app_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_app_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_app_def>()
                .HasOptional(e => e.pl_app_extend)
                .WithRequired(e => e.pc_app_def);

            modelBuilder.Entity<pc_app_def>()
                .HasMany(e => e.pl_collect_def)
                .WithRequired(e => e.pc_app_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pc_app_def>()
                .HasMany(e => e.pc_window_def)
                .WithRequired(e => e.pc_app_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pc_country>()
                .Property(e => e.country_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_country>()
                .Property(e => e.country_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_country>()
                .Property(e => e.phone_format)
                .IsUnicode(false);

            modelBuilder.Entity<pc_country>()
                .Property(e => e.state_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_country>()
                .Property(e => e.currency_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_country>()
                .Property(e => e.currency_format)
                .IsUnicode(false);

            modelBuilder.Entity<pc_country>()
                .Property(e => e.postal_code_format)
                .IsUnicode(false);

            modelBuilder.Entity<pc_language_def>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<pc_language_def>()
                .Property(e => e.language_comment)
                .IsUnicode(false);

            modelBuilder.Entity<pc_language_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_language_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_language_def>()
                .HasMany(e => e.pc_message_detail)
                .WithRequired(e => e.pc_language_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pc_location_def>()
                .Property(e => e.company_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_location_def>()
                .Property(e => e.address)
                .IsUnicode(false);

            modelBuilder.Entity<pc_location_def>()
                .Property(e => e.address2)
                .IsUnicode(false);

            modelBuilder.Entity<pc_location_def>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<pc_location_def>()
                .Property(e => e.zip)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_location_def>()
                .Property(e => e.phone_nbr)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_location_def>()
                .Property(e => e.fax_nbr)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_location_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_location_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_def>()
                .Property(e => e.message_group)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_def>()
                .Property(e => e.message_id)
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_def>()
                .Property(e => e.dialog_classname)
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_def>()
                .Property(e => e.response_classname)
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_def>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_def>()
                .HasMany(e => e.pc_message_detail)
                .WithRequired(e => e.pc_message_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pc_message_detail>()
                .Property(e => e.message_title)
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_detail>()
                .Property(e => e.message_text)
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_detail>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_message_detail>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_outline>()
                .Property(e => e.sequence_string)
                .IsUnicode(false);

            modelBuilder.Entity<pc_outline>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pc_outline>()
                .Property(e => e.outline_comment)
                .IsUnicode(false);

            modelBuilder.Entity<pc_outline>()
                .Property(e => e.open_bitmap)
                .IsUnicode(false);

            modelBuilder.Entity<pc_outline>()
                .Property(e => e.close_bitmap)
                .IsUnicode(false);

            modelBuilder.Entity<pc_outline>()
                .Property(e => e.data_parm)
                .IsUnicode(false);

            modelBuilder.Entity<pc_outline>()
                .Property(e => e.data_type)
                .IsUnicode(false);

            modelBuilder.Entity<pc_outline>()
                .Property(e => e.tree_line)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_profile_def>()
                .Property(e => e.profile_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_profile_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_profile_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_profile_def>()
                .HasMany(e => e.pl_profile_group)
                .WithRequired(e => e.pc_profile_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pc_seqctl>()
                .Property(e => e.seq_id)
                .IsUnicode(false);

            modelBuilder.Entity<pc_seqctl>()
                .Property(e => e.seqctl_comment)
                .IsUnicode(false);

            modelBuilder.Entity<pc_seqctl>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_seqctl>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_seqctl>()
                .Property(e => e.distributed_flag)
                .IsUnicode(false);

            modelBuilder.Entity<pc_seqctl>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_seqctl>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_state>()
                .Property(e => e.state_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_state>()
                .Property(e => e.state_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_time_zone>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.password)
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.first_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.mi)
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.last_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.ssn)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.home_phone)
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.work_phone)
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.work_ext)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.fax_nbr)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.active_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_user_def>()
                .HasMany(e => e.pl_user_collect)
                .WithRequired(e => e.pc_user_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pc_user_def>()
                .HasMany(e => e.pl_user_object)
                .WithRequired(e => e.pc_user_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pc_version>()
                .Property(e => e.product_code)
                .IsUnicode(false);

            modelBuilder.Entity<pc_version>()
                .Property(e => e.product_version)
                .IsUnicode(false);

            modelBuilder.Entity<pc_version>()
                .Property(e => e.script_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_version>()
                .Property(e => e.db_version)
                .IsUnicode(false);

            modelBuilder.Entity<pc_window_def>()
                .Property(e => e.win_name)
                .IsUnicode(false);

            modelBuilder.Entity<pc_window_def>()
                .Property(e => e.open_style)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_window_def>()
                .Property(e => e.window_comment)
                .IsUnicode(false);

            modelBuilder.Entity<pc_window_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pc_window_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.pda_oelist_criteria_id)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.pda_oelist_criteria_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.item_option)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.top_x_search_option)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.beg_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.end_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.beg_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.end_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.beg_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.end_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_criteria>()
                .Property(e => e.use_additional_criteria)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_hdr>()
                .Property(e => e.oelist_list_id)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_hdr>()
                .Property(e => e.oelist_list_description)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pda_oelist_hdr>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_hdr>()
                .HasMany(e => e.pda_oelist_shipto)
                .WithRequired(e => e.pda_oelist_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pda_oelist_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_shipto>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pda_oelist_shipto>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pda_oelist_shipto>()
                .HasMany(e => e.pda_oelist_item)
                .WithRequired(e => e.pda_oelist_shipto)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pdaship_delivery_data>()
                .Property(e => e.delivery_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pdaship_delivery_data>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_delivery_data>()
                .Property(e => e.delivery_status)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_delivery_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_delivery_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_delivery_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_delivery_data>()
                .HasMany(e => e.pdaship_stop_data)
                .WithRequired(e => e.pdaship_delivery_data)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pdaship_pick_hdr_data>()
                .Property(e => e.pick_hdr_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pdaship_pick_hdr_data>()
                .Property(e => e.accepted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_hdr_data>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_hdr_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_hdr_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_hdr_data>()
                .HasMany(e => e.pdaship_pick_line_data)
                .WithRequired(e => e.pdaship_pick_hdr_data)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.modified_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.overship_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.new_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.return_id_code)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.return_to_stock)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_pick_line_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_hdr_data>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_hdr_data>()
                .Property(e => e.accepted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_hdr_data>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_hdr_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_hdr_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_hdr_data>()
                .HasMany(e => e.pdaship_rma_line_data)
                .WithRequired(e => e.pdaship_rma_hdr_data)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pdaship_rma_line_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_line_data>()
                .Property(e => e.modified_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_line_data>()
                .Property(e => e.quantity)
                .HasPrecision(9, 0);

            modelBuilder.Entity<pdaship_rma_line_data>()
                .Property(e => e.new_quantity)
                .HasPrecision(9, 0);

            modelBuilder.Entity<pdaship_rma_line_data>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_line_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_rma_line_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_stop_data>()
                .Property(e => e.stop_status)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_stop_data>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_stop_data>()
                .Property(e => e.recipient_name)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_stop_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_stop_data>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pdaship_stop_data>()
                .HasMany(e => e.pdaship_pick_hdr_data)
                .WithRequired(e => e.pdaship_stop_data)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pdaship_stop_data>()
                .HasMany(e => e.pdaship_rma_hdr_data)
                .WithRequired(e => e.pdaship_stop_data)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pedimento>()
                .Property(e => e.aduana_number)
                .IsUnicode(false);

            modelBuilder.Entity<pedimento>()
                .Property(e => e.patent_number)
                .IsUnicode(false);

            modelBuilder.Entity<pedimento>()
                .Property(e => e.consecutive_number)
                .IsUnicode(false);

            modelBuilder.Entity<pedimento>()
                .Property(e => e.pedimento_key)
                .IsUnicode(false);

            modelBuilder.Entity<pedimento>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pedimento>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pedimento>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_account>()
                .Property(e => e.address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pegmost_account>()
                .Property(e => e.account_id)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_account>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_account>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_account>()
                .Property(e => e.marine_buyback_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_account>()
                .Property(e => e.marine_memo_number)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_account>()
                .Property(e => e.acexpress_auto_approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_account>()
                .Property(e => e.default_quarantine_bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_export_history>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_export_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_export_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_oe_hdr>()
                .Property(e => e.pump_off_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_oe_hdr>()
                .Property(e => e.release_no)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_oe_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_oe_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_oe_hdr>()
                .Property(e => e.mdr_nb)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_oe_hdr>()
                .Property(e => e.drc_code)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_oe_hdr>()
                .Property(e => e.vessel_nb)
                .IsUnicode(false);

            modelBuilder.Entity<pegmost_oe_hdr>()
                .Property(e => e.pegmost_delivery_notes)
                .IsUnicode(false);

            modelBuilder.Entity<pending_alerts>()
                .Property(e => e.trans_no_varchar)
                .IsUnicode(false);

            modelBuilder.Entity<pending_alerts>()
                .Property(e => e.marked_for_processing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pending_import>()
                .Property(e => e.impexp_source_id)
                .IsUnicode(false);

            modelBuilder.Entity<pending_import>()
                .Property(e => e.transaction_set_id)
                .IsUnicode(false);

            modelBuilder.Entity<pending_import>()
                .Property(e => e.dbtable_id)
                .IsUnicode(false);

            modelBuilder.Entity<pending_import>()
                .Property(e => e.import_data)
                .IsUnicode(false);

            modelBuilder.Entity<pending_import>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pending_import>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pending_import>()
                .Property(e => e.source_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<pending_import>()
                .Property(e => e.import_result_info)
                .IsUnicode(false);

            modelBuilder.Entity<pending_payments>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pending_payments>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<pending_payments>()
                .Property(e => e.pending_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<pending_payments>()
                .Property(e => e.terms_amount_to_pay)
                .HasPrecision(19, 4);

            modelBuilder.Entity<pending_payments>()
                .Property(e => e.pay_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pending_payments>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pending_payments>()
                .Property(e => e.iva_terms_amount_to_pay)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pending_payments>()
                .Property(e => e.iva_withheld_amount_to_pay)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pending_price_protection>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pending_price_protection>()
                .Property(e => e.limit_max_claim_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pending_price_protection>()
                .Property(e => e.qty_in_transit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pending_price_protection>()
                .Property(e => e.qty_on_unreceived_rma)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pending_price_protection>()
                .Property(e => e.old_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<pending_price_protection>()
                .Property(e => e.new_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<pending_price_protection>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pending_price_protection>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pending_retroactive_rebates_info>()
                .Property(e => e.rewards_program_id)
                .IsUnicode(false);

            modelBuilder.Entity<pending_retroactive_rebates_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pending_retroactive_rebates_info>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pending_retroactive_rebates_info>()
                .Property(e => e.apply_to_current_period_year_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pending_retroactive_rebates_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pending_retroactive_rebates_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pending_retroactive_rebates_info>()
                .Property(e => e.applied_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pending_retroactive_rebates_info>()
                .Property(e => e.apply_action)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<period_journals>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<period_journals>()
                .Property(e => e.journal_id)
                .IsUnicode(false);

            modelBuilder.Entity<period_journals>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<period_journals>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<period_journals>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<period_journals>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<period>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<period>()
                .Property(e => e.period1)
                .HasPrecision(3, 0);

            modelBuilder.Entity<period>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<period>()
                .Property(e => e.period_closed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<period>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<period>()
                .Property(e => e.adjustment_period_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<period>()
                .Property(e => e.gl_rollup_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<period>()
                .Property(e => e.period_reopened)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.pick_list_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.cod_add_on)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.source_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.ship2_name)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.ship2_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.ship2_add1)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.ship2_add2)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.ship2_city)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.ship2_state)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.ship2_zip)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.ship2_country)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .Property(e => e.ship2_add3)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr>()
                .HasMany(e => e.pick_list_hdr_x_oe_pick_ticket)
                .WithRequired(e => e.pick_list_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pick_list_hdr>()
                .HasMany(e => e.pick_list_line)
                .WithRequired(e => e.pick_list_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pick_list_hdr_x_oe_pick_ticket>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_list_hdr_x_oe_pick_ticket>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_hdr_x_oe_pick_ticket>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_line>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_list_line>()
                .Property(e => e.pick_ticket_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_list_line>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_list_line>()
                .Property(e => e.print_item_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pick_list_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.pt_report_criteria_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.str_beg_account)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.str_end_account)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.release_partials_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.detail_or_summary)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.bucket_1)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.bucket_2)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.route_or_zip)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.beg_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.end_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.beg_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.end_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.non_interrupted_mode_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.will_call_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.print_qty)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.print_pick_and_hold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.beg_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.end_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.include_tag_and_hold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.suppress_tag_and_hold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.release_partial_tag_and_hold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.blank_tag_hold_class_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.pull_to_pick_list_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.beg_prod_order)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.end_prod_order)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.include_service_orders)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.create_pick_ticket_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.create_group_pick_ticket_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.include_scheduled_releases_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.print_dea_pick_tickets)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.include_roadnet_routed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.no_license_mode_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.printer_name)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.beg_carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.end_carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.process_doclinks_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.route_code_list)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.route_code_option_cd)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_report_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_serial>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pick_ticket_serial>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_serial>()
                .Property(e => e.allocated)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pick_ticket_serial>()
                .Property(e => e.oe_pick_ticket_detail_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<picking_tote_bin>()
                .Property(e => e.bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<picking_tote_bin>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<picking_tote_bin>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pinpoint_item_qty_sync>()
                .Property(e => e.p21_qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pinpoint_item_qty_sync>()
                .Property(e => e.pinpoint_qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pinpoint_item_qty_sync>()
                .Property(e => e.pinpoint_unit)
                .IsUnicode(false);

            modelBuilder.Entity<pinpoint_item_qty_sync>()
                .Property(e => e.pinpoint_qty_on_hand_sku)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pinpoint_item_qty_sync>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pinpoint_item_qty_sync>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pl_app_extend>()
                .Property(e => e.pb_app_lib)
                .IsUnicode(false);

            modelBuilder.Entity<pl_collect_def>()
                .Property(e => e.collect_name)
                .IsUnicode(false);

            modelBuilder.Entity<pl_collect_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_collect_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_collect_def>()
                .HasMany(e => e.pl_group_collect)
                .WithRequired(e => e.pl_collect_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pl_collect_def>()
                .HasMany(e => e.pl_object_collect)
                .WithRequired(e => e.pl_collect_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pl_collect_def>()
                .HasMany(e => e.pl_user_collect)
                .WithRequired(e => e.pl_collect_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pl_group_collect>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_group_collect>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_group_def>()
                .Property(e => e.group_name)
                .IsUnicode(false);

            modelBuilder.Entity<pl_group_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_group_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_group_def>()
                .HasMany(e => e.pl_group_collect)
                .WithRequired(e => e.pl_group_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pl_group_def>()
                .HasMany(e => e.pl_group_object)
                .WithRequired(e => e.pl_group_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pl_group_def>()
                .HasMany(e => e.pl_profile_group)
                .WithRequired(e => e.pl_group_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pl_group_object>()
                .Property(e => e.access_condition)
                .IsUnicode(false);

            modelBuilder.Entity<pl_group_object>()
                .Property(e => e.where_condition)
                .IsUnicode(false);

            modelBuilder.Entity<pl_group_object>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_group_object>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_collect>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_collect>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_def>()
                .Property(e => e.object_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_def>()
                .Property(e => e.object_comment)
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_def>()
                .Property(e => e.object_name)
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_def>()
                .Property(e => e.access_condition)
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_def>()
                .Property(e => e.where_condition)
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_def>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_def>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_object_def>()
                .HasMany(e => e.pl_group_object)
                .WithRequired(e => e.pl_object_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pl_object_def>()
                .HasMany(e => e.pl_object_collect)
                .WithRequired(e => e.pl_object_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pl_object_def>()
                .HasMany(e => e.pl_user_object)
                .WithRequired(e => e.pl_object_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pl_profile_group>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_profile_group>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_user_collect>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_user_collect>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_user_object>()
                .Property(e => e.access_condition)
                .IsUnicode(false);

            modelBuilder.Entity<pl_user_object>()
                .Property(e => e.where_condition)
                .IsUnicode(false);

            modelBuilder.Entity<pl_user_object>()
                .Property(e => e.create_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pl_user_object>()
                .Property(e => e.maint_user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pmt_type_x_comm_reduction>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pmt_type_x_comm_reduction>()
                .Property(e => e.reduce_commission_amt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pmt_type_x_comm_reduction>()
                .Property(e => e.reduction_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pmt_type_x_comm_reduction>()
                .Property(e => e.reduction_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pmt_type_x_comm_reduction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pmt_type_x_comm_reduction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement>()
                .Property(e => e.po_ack_cd)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_hdr>()
                .Property(e => e.po_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_acknowledgement_hdr>()
                .Property(e => e.invoice_number)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_acknowledgement_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_hdr>()
                .Property(e => e.trans_type)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_hdr>()
                .Property(e => e.external_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_hdr>()
                .Property(e => e.accept_vendor_pricing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_hdr>()
                .HasMany(e => e.po_acknowledgement_line)
                .WithRequired(e => e.po_acknowledgement_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 2);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.invoice_number)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.old_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.cosl_order_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.cosl_confirmed_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.cosl_delivered_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.cosl_open_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.marked_for)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.tracking_number)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.bill_of_lading)
                .IsUnicode(false);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.asn_delivered_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_acknowledgement_line>()
                .Property(e => e.asn_carrier_reference_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_asn_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_asn_hdr>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_asn_hdr>()
                .Property(e => e.shipment_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_asn_hdr>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_hdr>()
                .HasMany(e => e.po_asn_line)
                .WithRequired(e => e.po_asn_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_asn_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_line>()
                .Property(e => e.qty_shipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_asn_line>()
                .Property(e => e.upc_number)
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_line>()
                .Property(e => e.supplier_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<po_asn_line>()
                .Property(e => e.pallet_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ship2_name)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.packing_slip_number)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ship2_add1)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ship2_add2)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ship2_city)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ship2_state)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ship2_country)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.requested_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.fob)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.po_desc)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ship2_zip)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.terms)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.carrier_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.vouch_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.cancel_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.printed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ack_code)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.closed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.purchase_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.po_class1)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.po_class2)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.po_class3)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.po_class4)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.po_class5)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.sales_order_number)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.po_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.external_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.exclude_from_lead_time)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.revised_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.total_iva_tax_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.expedite_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.vendor_pays_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.supplier_release_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.historical_complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.print_canadian_b3_forms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.cad_cha_quote_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.tracking_no)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.net_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ship2_add3)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.do_not_export_carrier_po_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.transmit_print)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.transmit_fax)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.transmit_email)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.transmit_edi)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.dflt_list_price_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.ship_via_desc)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.blind_ship_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.bulk_discount_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.estimated_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.estimated_value_edit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.bid_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.auto_vouch_except_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.excl_send_linked_info_to_rfnav_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .Property(e => e.exclude_ds_po_from_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.carrier_info)
                .WithRequired(e => e.po_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.group_po_line)
                .WithRequired(e => e.po_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.inventory_return_hdr)
                .WithOptional(e => e.po_hdr)
                .HasForeignKey(e => e.po_reference_number);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.landed_cost_driver_x_po_hdr)
                .WithRequired(e => e.po_hdr)
                .HasForeignKey(e => e.po_number)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.location_x_po_hdr)
                .WithRequired(e => e.po_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.po_acknowledgement_hdr)
                .WithRequired(e => e.po_hdr)
                .HasForeignKey(e => e.po_number)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.proc_x_trans_det_x_po_hdr)
                .WithRequired(e => e.po_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.po_hdr_notepad)
                .WithRequired(e => e.po_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.po_hdr_x_jc_job)
                .WithRequired(e => e.po_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_hdr>()
                .HasMany(e => e.po_line)
                .WithRequired(e => e.po_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_hdr_notepad>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_hdr_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_hdr_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_x_jc_job>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_x_jc_job>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_hdr_x_jc_job>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_x_jc_job>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 6);

            modelBuilder.Entity<po_line>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.mfg_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.next_due_in_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.vouch_completed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.cancel_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.in_bound_curry_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.qty_to_vouch)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.closed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.item_description)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<po_line>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line>()
                .Property(e => e.pricing_book_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.pricing_book_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.pricing_book_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line>()
                .Property(e => e.pricing_book_disc_grp_id)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.combinable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.calc_type)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.calc_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.next_break)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.next_ut_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.base_ut_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<po_line>()
                .Property(e => e.price_edit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.new_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.quantity_changed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<po_line>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.unit_price_display)
                .HasPrecision(19, 6);

            modelBuilder.Entity<po_line>()
                .Property(e => e.exclude_from_lead_time)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.edi_new_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.line_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.entered_as_code)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.expedite_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.original_unit_price_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.expedite_notes)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.expedite_followup_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.desired_receipt_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line>()
                .Property(e => e.country_of_origin)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.b3_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.bulk_buy_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.cad_purchase_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.qty_ready)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.qty_ready_unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.qty_ready_uom)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.unit_qty_ready)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.list_price_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line>()
                .Property(e => e.carrier_status)
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .Property(e => e.acknowledged)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line>()
                .HasMany(e => e.po_line_notepad)
                .WithRequired(e => e.po_line)
                .HasForeignKey(e => new { e.po_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_line>()
                .HasMany(e => e.transfer_backorders)
                .WithOptional(e => e.po_line)
                .HasForeignKey(e => new { e.po_no, e.po_line_no });

            modelBuilder.Entity<po_line>()
                .HasMany(e => e.vendor_invoice_line)
                .WithOptional(e => e.po_line)
                .HasForeignKey(e => new { e.po_no, e.po_line_number });

            modelBuilder.Entity<po_line_108>()
                .Property(e => e.contract_number)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line_108>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_27>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line_27>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line_27>()
                .Property(e => e.user_line_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_27>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_delivery_info>()
                .Property(e => e.delivery_location)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_delivery_info>()
                .Property(e => e.method_of_transit)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_delivery_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_delivery_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_disputed_voucher>()
                .Property(e => e.qty_to_pay)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_disputed_voucher>()
                .Property(e => e.price_to_pay)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_disputed_voucher>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_disputed_voucher>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line_disputed_voucher>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_disputed_voucher>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_disputed_voucher_legacy>()
                .Property(e => e.qty_to_pay)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_disputed_voucher_legacy>()
                .Property(e => e.price_to_pay)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_disputed_voucher_legacy>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_disputed_voucher_legacy>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line_disputed_voucher_legacy>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_disputed_voucher_legacy>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_schedule>()
                .Property(e => e.release_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_schedule>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_schedule>()
                .Property(e => e.expedite_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line_schedule>()
                .Property(e => e.qty_ready)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_schedule>()
                .HasMany(e => e.po_line_delivery_info)
                .WithRequired(e => e.po_line_schedule)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_line_schedule>()
                .HasMany(e => e.po_schedule_receipts)
                .WithRequired(e => e.po_line_schedule)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.po_no)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.line_no)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.oracle_split_line_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.oracle_line_status)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.oracle_serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.oracle_carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.oracle_waybill_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_split>()
                .Property(e => e.oracle_split_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_vessel_6>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line_vessel_6>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_line_vessel_6>()
                .Property(e => e.vessel)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_vessel_6>()
                .Property(e => e.shipped_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_line_vessel_6>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_vessel_6>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_x_lot_attribute_value>()
                .Property(e => e.lot_attribute_value)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_x_lot_attribute_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_line_x_lot_attribute_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_receipt_voucher_194>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_receipt_voucher_194>()
                .Property(e => e.voucher_no)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_receipt_voucher_194>()
                .Property(e => e.quantity_vouched)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_receipt_voucher_194>()
                .Property(e => e.amount_vouched_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<po_receipt_voucher_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_schedule_receipts>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_schedule_receipts>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<po_schedule_receipts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_schedule_rule>()
                .Property(e => e.frequency_type)
                .IsUnicode(false);

            modelBuilder.Entity<po_schedule_rule>()
                .Property(e => e.default_to_all)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_schedule_rule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.package_weight)
                .IsUnicode(false);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.total_charge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.package_surcharge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.handling_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_shipment_tracking>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<po_system_parameters>()
                .Property(e => e.rounding_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<po_system_parameters>()
                .Property(e => e.pricing_uom_is_order_uom)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_system_parameters>()
                .Property(e => e.po_system_parameter_uid)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pod_document_template>()
                .Property(e => e.document_template)
                .IsUnicode(false);

            modelBuilder.Entity<pod_document_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pod_document_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pod_document_template>()
                .Property(e => e.document_version)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.square_feet)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_a_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_b_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_c_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_d_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_e_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_f_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_g_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_h_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_j_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.dim_k_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.cuddle_cove_print_filename)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.liner_print_filename)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.step_print_filename)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.corner_size_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.safety_ledge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.safety_ledge_size_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.see_drawing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.historical_data_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.standard_pad_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.above_ground_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_info>()
                .Property(e => e.manual_schedule_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_pattern>()
                .Property(e => e.pattern_id)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_pattern>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_pattern>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_pattern>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_pattern>()
                .HasMany(e => e.pool_liner_info)
                .WithRequired(e => e.pool_liner_pattern)
                .HasForeignKey(e => e.floor_pattern_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pool_liner_pattern>()
                .HasMany(e => e.pool_liner_info1)
                .WithRequired(e => e.pool_liner_pattern1)
                .HasForeignKey(e => e.side_pattern_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pool_liner_process>()
                .Property(e => e.process_id)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_process>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_process>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_process>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_process_defaults>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_process_defaults>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pool_liner_process_defaults>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_process_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_processing>()
                .Property(e => e.prod_order_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pool_liner_processing>()
                .Property(e => e.prod_order_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pool_liner_processing>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_processing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_processing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_slot>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_liner_slot>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_position>()
                .Property(e => e.pool_position_id)
                .IsUnicode(false);

            modelBuilder.Entity<pool_position>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pool_position>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_position>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_pricing_code>()
                .Property(e => e.pricing_code_id)
                .IsUnicode(false);

            modelBuilder.Entity<pool_pricing_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_pricing_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_pricing_code>()
                .HasMany(e => e.pool_liner_info)
                .WithRequired(e => e.pool_pricing_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pool_pricing_code>()
                .HasMany(e => e.pool_pricing_code_break)
                .WithRequired(e => e.pool_pricing_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pool_pricing_code_break>()
                .Property(e => e.size_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_pricing_code_break>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pool_pricing_code_break>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_pricing_code_break>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_shape>()
                .Property(e => e.pool_shape_id)
                .IsUnicode(false);

            modelBuilder.Entity<pool_shape>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pool_shape>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_shape>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pool_shape>()
                .HasMany(e => e.pool_liner_info)
                .WithRequired(e => e.pool_shape)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.datawindow_name)
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.auto_retrieve_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.allow_advanced_search_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.company_security_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.company_security_advanced_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.column_to_return)
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.redirect_to_column)
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.developer_notes)
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.default_sort_column)
                .IsUnicode(false);

            modelBuilder.Entity<popup_column>()
                .Property(e => e.sort_descending)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_detail>()
                .Property(e => e.popup_title)
                .IsUnicode(false);

            modelBuilder.Entity<popup_detail>()
                .Property(e => e.popup_desc)
                .IsUnicode(false);

            modelBuilder.Entity<popup_detail>()
                .Property(e => e.restrict_hdlr)
                .IsUnicode(false);

            modelBuilder.Entity<popup_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_detail>()
                .Property(e => e.source)
                .IsUnicode(false);

            modelBuilder.Entity<popup_detail>()
                .Property(e => e.expandable_popup)
                .IsUnicode(false);

            modelBuilder.Entity<popup_detail>()
                .HasMany(e => e.popup_field)
                .WithRequired(e => e.popup_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<popup_detail>()
                .HasMany(e => e.popup_index)
                .WithRequired(e => e.popup_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<popup_detail>()
                .HasMany(e => e.popup_statement)
                .WithRequired(e => e.popup_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.header)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.mask)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.return_to)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.popup_to_show)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.parameter_code_group)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.parameter_default_value)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.parameter_header)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.parameter_hidden_condition)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.alias_definition)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.field_expression)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .Property(e => e.data_type)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field>()
                .HasMany(e => e.popup_field_behavior)
                .WithRequired(e => e.popup_field)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<popup_field_behavior>()
                .Property(e => e.condition)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field_behavior>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field_behavior>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field_behavior>()
                .Property(e => e.parameter_default_value)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field_value>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field_value>()
                .Property(e => e.condition)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_field_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.dwcontrol)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.window)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.dwfield)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.role)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.condition)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.user_role)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.dataobject)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.action)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.shortcut)
                .IsUnicode(false);

            modelBuilder.Entity<popup_index>()
                .Property(e => e.dynachange_id)
                .HasPrecision(6, 0);

            modelBuilder.Entity<popup_index>()
                .HasMany(e => e.popup_x_popup)
                .WithRequired(e => e.popup_index)
                .HasForeignKey(e => e.linked_popup_index_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<popup_index>()
                .HasMany(e => e.popup_x_popup1)
                .WithRequired(e => e.popup_index1)
                .HasForeignKey(e => e.popup_index_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<popup_onfly_setup>()
                .Property(e => e.search_key)
                .IsUnicode(false);

            modelBuilder.Entity<popup_onfly_setup>()
                .Property(e => e.parent_column)
                .IsUnicode(false);

            modelBuilder.Entity<popup_onfly_setup>()
                .Property(e => e.child_column)
                .IsUnicode(false);

            modelBuilder.Entity<popup_onfly_setup>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_onfly_setup>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_onfly_setup>()
                .Property(e => e.aditional_column)
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.columns)
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.from_join)
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.where)
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.order_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.group_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.override_columns)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.override_from_join)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.override_where)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.override_group_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.override_order_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.option)
                .IsUnicode(false);

            modelBuilder.Entity<popup_statement>()
                .Property(e => e.common_table_expressions)
                .IsUnicode(false);

            modelBuilder.Entity<popup_x_popup>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<popup_x_popup>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<port>()
                .Property(e => e.port_desc)
                .IsUnicode(false);

            modelBuilder.Entity<port>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<port>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<port_printer>()
                .Property(e => e.port)
                .IsUnicode(false);

            modelBuilder.Entity<port_printer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<port_printer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal>()
                .Property(e => e.portal_name)
                .IsUnicode(false);

            modelBuilder.Entity<portal>()
                .Property(e => e.portal_desc)
                .IsUnicode(false);

            modelBuilder.Entity<portal>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal>()
                .HasMany(e => e.portal_assignment)
                .WithRequired(e => e.portal)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<portal>()
                .HasMany(e => e.portal_x_portal_element)
                .WithRequired(e => e.portal)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<portal_assignment>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<portal_assignment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_assignment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_assignment>()
                .HasMany(e => e.portal_param_value)
                .WithRequired(e => e.portal_assignment)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<portal_element>()
                .Property(e => e.portal_element_name)
                .IsUnicode(false);

            modelBuilder.Entity<portal_element>()
                .Property(e => e.classname)
                .IsUnicode(false);

            modelBuilder.Entity<portal_element>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_element>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_element>()
                .Property(e => e.icon_name)
                .IsUnicode(false);

            modelBuilder.Entity<portal_element>()
                .HasMany(e => e.portal_element_syntax)
                .WithRequired(e => e.portal_element)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<portal_element>()
                .HasMany(e => e.portal_user_defined)
                .WithRequired(e => e.portal_element)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<portal_element>()
                .HasMany(e => e.portal_x_portal_element)
                .WithRequired(e => e.portal_element)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<portal_element>()
                .HasMany(e => e.portal_param_def)
                .WithRequired(e => e.portal_element)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<portal_element>()
                .HasMany(e => e.ud_tabpage)
                .WithRequired(e => e.portal_element)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<portal_element_syntax>()
                .Property(e => e.portal_syntax)
                .IsUnicode(false);

            modelBuilder.Entity<portal_element_syntax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_element_syntax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_param_def>()
                .Property(e => e.parameter_name)
                .IsUnicode(false);

            modelBuilder.Entity<portal_param_def>()
                .Property(e => e.parameter_desc)
                .IsUnicode(false);

            modelBuilder.Entity<portal_param_def>()
                .Property(e => e.default_value)
                .IsUnicode(false);

            modelBuilder.Entity<portal_param_def>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_param_def>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_param_def>()
                .HasMany(e => e.portal_param_value)
                .WithRequired(e => e.portal_param_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<portal_param_value>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<portal_param_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_param_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_user_defined>()
                .Property(e => e.datawindow_name)
                .IsUnicode(false);

            modelBuilder.Entity<portal_user_defined>()
                .Property(e => e.library_file)
                .IsUnicode(false);

            modelBuilder.Entity<portal_user_defined>()
                .Property(e => e.url)
                .IsUnicode(false);

            modelBuilder.Entity<portal_user_defined>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_user_defined>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_user_defined>()
                .Property(e => e.bypass_theme)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<portal_x_portal_element>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<portal_x_portal_element>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<predefined_coa>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<predefined_coa>()
                .Property(e => e.account_description)
                .IsUnicode(false);

            modelBuilder.Entity<predefined_coa>()
                .Property(e => e.account_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<predefined_coa>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<predefined_coa>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<predefined_fin_rpt_row_x_acct>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<predefined_fin_rpt_row_x_acct>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<predefined_fin_rpt_row_x_acct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<preference>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<preference>()
                .Property(e => e.default_value)
                .IsUnicode(false);

            modelBuilder.Entity<preference>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<preference>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<preference>()
                .HasMany(e => e.user_preference)
                .WithRequired(e => e.preference)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_book>()
                .Property(e => e.price_book_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_book>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<price_book>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_book>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_book>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_book>()
                .HasMany(e => e.price_book_additional_info)
                .WithRequired(e => e.price_book)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_book>()
                .HasMany(e => e.price_book_x_library)
                .WithRequired(e => e.price_book)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_book>()
                .HasMany(e => e.price_book_x_location)
                .WithRequired(e => e.price_book)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_book>()
                .HasMany(e => e.price_page_x_book)
                .WithRequired(e => e.price_book)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.contact_number)
                .IsUnicode(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.contact_name)
                .IsUnicode(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.vendor_price_book)
                .IsUnicode(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.firm_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.national_contract_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.PIP_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.market_segment_SPA_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_book_additional_info>()
                .Property(e => e.use_all_locations_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_book_x_library>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_book_x_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_book_x_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_book_x_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_family>()
                .Property(e => e.price_family_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_family>()
                .Property(e => e.price_family_desc)
                .IsUnicode(false);

            modelBuilder.Entity<price_family>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_family>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_family>()
                .HasMany(e => e.inv_mast)
                .WithOptional(e => e.price_family)
                .HasForeignKey(e => e.default_price_family_uid);

            modelBuilder.Entity<price_family>()
                .HasMany(e => e.inventory_defaults)
                .WithOptional(e => e.price_family)
                .HasForeignKey(e => e.default_price_family_uid);

            modelBuilder.Entity<price_family>()
                .HasMany(e => e.price_family_x_restricted_class)
                .WithRequired(e => e.price_family)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_family>()
                .HasMany(e => e.price_family_x_rewards_program)
                .WithRequired(e => e.price_family)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_family_x_restricted_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_family_x_restricted_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_family_x_rewards_program>()
                .Property(e => e.coop_dollar_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_family_x_rewards_program>()
                .Property(e => e.incentive_points_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_family_x_rewards_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_family_x_rewards_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_library>()
                .Property(e => e.price_library_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_library>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<price_library>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_library>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_library>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_library>()
                .Property(e => e.terminal_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_library>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_library>()
                .Property(e => e.strategic_price_library_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_library>()
                .Property(e => e.library_on_contract)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_library>()
                .Property(e => e.exclude_from_cust_multiplier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_library>()
                .HasMany(e => e.oe_hdr)
                .WithOptional(e => e.price_library)
                .HasForeignKey(e => e.strategic_library_original_uid);

            modelBuilder.Entity<price_library>()
                .HasMany(e => e.oe_hdr1)
                .WithOptional(e => e.price_library1)
                .HasForeignKey(e => e.strategic_library_uid);

            modelBuilder.Entity<price_library>()
                .HasMany(e => e.oe_hdr_x_price_library)
                .WithRequired(e => e.price_library)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_library>()
                .HasMany(e => e.price_book_x_library)
                .WithRequired(e => e.price_library)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_library>()
                .HasMany(e => e.price_library_x_cust_x_cmpy)
                .WithRequired(e => e.price_library)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_library>()
                .HasMany(e => e.strategic_pricing_oe_info)
                .WithOptional(e => e.price_library)
                .HasForeignKey(e => e.new_price_library_uid);

            modelBuilder.Entity<price_library>()
                .HasMany(e => e.strategic_pricing_oe_info1)
                .WithOptional(e => e.price_library1)
                .HasForeignKey(e => e.old_price_library_uid);

            modelBuilder.Entity<price_library_x_cust_x_cmpy>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_library_x_cust_x_cmpy>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_library_x_cust_x_cmpy>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_library_x_cust_x_cmpy>()
                .Property(e => e.web_based_pricing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_library_x_cust_x_cmpy>()
                .Property(e => e.distributor_net_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_library_x_ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_library_x_ship_to>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_library_x_ship_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_library_x_ship_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_override_exception>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_override_exception>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_override_exception>()
                .Property(e => e.price_edit_pct_down)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_override_exception>()
                .Property(e => e.price_edit_oth_chrg_pct_down)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_override_exception>()
                .Property(e => e.price_edit_pct_up)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_override_exception>()
                .Property(e => e.price_edit_oth_chrg_pct_up)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page>()
                .Property(e => e.mfg_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.major_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value1)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value2)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value3)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value4)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value5)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value6)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value7)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value8)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value9)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value10)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value11)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value12)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value13)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value14)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculation_value15)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.break14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom1)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom2)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom3)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom4)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom5)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom6)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom7)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom8)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom9)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom10)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom11)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom12)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom13)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.uom14)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.cost_calculation_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<price_page>()
                .Property(e => e.commission_cost_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.commission_cost_calc_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<price_page>()
                .Property(e => e.price_page_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page>()
                .Property(e => e.customer_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.comm_cost_calc_value15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page>()
                .Property(e => e.values_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page>()
                .Property(e => e.calculator_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.on_contract_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.apply_freight_factor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.no_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.non_stock_items_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.price_override)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.rebate_margin)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.upper_margin_variance)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.lower_margin_variance)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page>()
                .Property(e => e.exclude_order_level_disc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.other_cost_source_use_item_hdr_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .Property(e => e.charge_back_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page>()
                .HasMany(e => e.invoice_line)
                .WithOptional(e => e.price_page)
                .HasForeignKey(e => e.cost_price_page_uid);

            modelBuilder.Entity<price_page>()
                .HasMany(e => e.price_page_location)
                .WithRequired(e => e.price_page)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_page>()
                .HasMany(e => e.price_page_po_cost_calc)
                .WithRequired(e => e.price_page)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_page>()
                .HasMany(e => e.price_page_source)
                .WithRequired(e => e.price_page)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_page>()
                .HasMany(e => e.price_page_x_book)
                .WithRequired(e => e.price_page)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_page>()
                .HasMany(e => e.price_page_dealer_commission)
                .WithRequired(e => e.price_page)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_page>()
                .HasMany(e => e.price_page_secondary_rebate)
                .WithRequired(e => e.price_page)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.scalculation_value15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_1266>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_break>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_break>()
                .Property(e => e.break_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_break>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page_break>()
                .Property(e => e.other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_break>()
                .Property(e => e.commission_cost_calc_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_custpart>()
                .Property(e => e.customer_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_custpart>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page_custpart>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_custpart>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_calc_value15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_break14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom1)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom2)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom3)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom4)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom5)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom6)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom7)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom8)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom9)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom10)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom11)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom12)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom13)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_dealer_commission>()
                .Property(e => e.dealer_comm_uom14)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_discgrp>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_discgrp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_column>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_column>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_column>()
                .Property(e => e.data_type)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_dtl>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_dtl>()
                .Property(e => e.data_type)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_dtl>()
                .Property(e => e.date_mask)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_layout>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_layout>()
                .Property(e => e.path)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_layout>()
                .Property(e => e.filename)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_layout>()
                .Property(e => e.format)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_layout>()
                .Property(e => e.firstlinecolname_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_layout>()
                .Property(e => e.delimiter)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_layout>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_layout>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_import_layout>()
                .HasMany(e => e.price_page_import_dtl)
                .WithRequired(e => e.price_page_import_layout)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<price_page_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page_po_cost_calc>()
                .Property(e => e.contract_no)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc>()
                .Property(e => e.po_cost_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_page_po_cost_calc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_pricefam>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_pricefam>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_prodgrp>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_prodgrp>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_prodgrp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate>()
                .Property(e => e.secondary_rebate_value)
                .HasPrecision(19, 6);

            modelBuilder.Entity<price_page_secondary_rebate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate>()
                .Property(e => e.secondary_rebate_source_use_item_hdr_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_page_source>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_source>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_suppdisc>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page_suppdisc>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_suppdisc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_supplier>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page_supplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_suppmfg>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page_suppmfg>()
                .Property(e => e.mfg_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_suppmfg>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_supppricefam>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page_supppricefam>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_supppricefam>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_suppprod>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_page_suppprod>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_suppprod>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_suppprod>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_type_x_company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_type_x_company>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_x_book>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_source_x_company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_source_x_company>()
                .Property(e => e.available_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_source_x_company>()
                .Property(e => e.used_in_zero_pricing_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<price_source_x_company>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.pricing_pros_criteria_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.item_list)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.beg_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.end_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.beg_abc_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.end_abc_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.beg_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.end_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_0)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_1)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_2)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_3)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_4)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_5)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_6)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_7)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_8)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_name_9)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.currency_code)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.dimension_scope)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.lookup_name)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.uom_code)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.approval_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_0)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_1)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_2)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_3)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_4)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_5)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_6)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_7)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_8)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.column_value_9)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_pros_lookup_values>()
                .Property(e => e.extraction_time)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_catalog>()
                .Property(e => e.new_items_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_catalog>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_catalog>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_catalog>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_catalog>()
                .Property(e => e.match_on_key_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code>()
                .Property(e => e.code_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_code>()
                .Property(e => e.code_name)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code>()
                .Property(e => e.code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code>()
                .HasMany(e => e.pricing_service_code_detail)
                .WithRequired(e => e.pricing_service_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_code_detail>()
                .Property(e => e.code_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_code_detail>()
                .Property(e => e.code_detail_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_code_detail>()
                .Property(e => e.code_value)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code_detail>()
                .Property(e => e.value_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code_detail>()
                .Property(e => e.group_code)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code_detail>()
                .Property(e => e.subgroup_code)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_code_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.column_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.column_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.alternate_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.inventory_defaults_name)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.required_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.default_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.data_type)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.column_size)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.validation_rule)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.tpcx_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.tpcx_abbrev_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.tpcx_abbrev_add_for_update)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.act_layout_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.act_layout_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.act_layout_add_for_update)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.aqnet_layout_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.aqnet_layout_column_name)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.aqnet_layout_add_for_update)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.pricing_template_dflt_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .Property(e => e.import_new_values_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_column>()
                .HasMany(e => e.pricing_template_item_dflt)
                .WithRequired(e => e.pricing_service_column)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_column>()
                .HasMany(e => e.pricing_template_location_dflt)
                .WithRequired(e => e.pricing_service_column)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.layout_detail_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.conversion_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.sequence_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.factor_source)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.source_layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.source_layout_detail_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.operand)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_conversion>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.layout_detail_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.extension_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.extension_source)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.extension_value)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.source_layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.source_layout_detail_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.sequence_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_extension>()
                .Property(e => e.extension_position)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_filter>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_filter>()
                .Property(e => e.layout_detail_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_filter>()
                .Property(e => e.filter_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_filter>()
                .Property(e => e.operand)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_filter>()
                .Property(e => e.filter_value)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_filter>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_filter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.layout_type)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.layout_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.layout_key)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.layout_path)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.layout_filename)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.layout_tabletype)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.layout_delimiter)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.layout_firstlinenames)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.add_location)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.add_supplier)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.purchase_transfer_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.pricing_template_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.catalog_status_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.build_in_both_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .Property(e => e.apply_value_list_first_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout>()
                .HasMany(e => e.pricing_service_layout_loc)
                .WithRequired(e => e.pricing_service_layout)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_layout>()
                .HasMany(e => e.pricing_service_product_accts)
                .WithRequired(e => e.pricing_service_layout)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_layout>()
                .HasMany(e => e.pricing_service_layout_detail)
                .WithRequired(e => e.pricing_service_layout)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_layout>()
                .HasMany(e => e.pricing_service_log)
                .WithRequired(e => e.pricing_service_layout)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.layout_detail_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.start_position)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.data_precision)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.data_type)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.decimal_scale)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.acs_type)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.extension_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.value_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.value_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.conversion_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.filter_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.data_length)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.required_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.default_ind)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.new_items_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.date_mask)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.set_by_option)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .Property(e => e.import_new_values_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .HasMany(e => e.pricing_service_conversion)
                .WithOptional(e => e.pricing_service_layout_detail)
                .HasForeignKey(e => new { e.source_layout_id, e.source_layout_detail_id });

            modelBuilder.Entity<pricing_service_layout_detail>()
                .HasMany(e => e.pricing_service_conversion1)
                .WithRequired(e => e.pricing_service_layout_detail1)
                .HasForeignKey(e => new { e.layout_id, e.layout_detail_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .HasMany(e => e.pricing_service_extension)
                .WithRequired(e => e.pricing_service_layout_detail)
                .HasForeignKey(e => new { e.layout_id, e.layout_detail_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .HasMany(e => e.pricing_service_extension1)
                .WithOptional(e => e.pricing_service_layout_detail1)
                .HasForeignKey(e => new { e.source_layout_id, e.source_layout_detail_id });

            modelBuilder.Entity<pricing_service_layout_detail>()
                .HasMany(e => e.pricing_service_filter)
                .WithRequired(e => e.pricing_service_layout_detail)
                .HasForeignKey(e => new { e.layout_id, e.layout_detail_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_layout_detail>()
                .HasMany(e => e.pricing_service_map)
                .WithRequired(e => e.pricing_service_layout_detail)
                .HasForeignKey(e => new { e.layout_id, e.layout_detail_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_layout_loc>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout_loc>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_layout_loc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_layout_loc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.log_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.error_report)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.detail_report)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.summary_report)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.error_records)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.update_report)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_log>()
                .Property(e => e.performance_report)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_map>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_map>()
                .Property(e => e.layout_detail_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_map>()
                .Property(e => e.target_table)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_map>()
                .Property(e => e.target_column)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_map>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_map>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_product_accts>()
                .Property(e => e.layout_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_product_accts>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_product_accts>()
                .Property(e => e.asset_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_product_accts>()
                .Property(e => e.revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_product_accts>()
                .Property(e => e.cos_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_product_accts>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_product_accts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_value>()
                .Property(e => e.value_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_value>()
                .Property(e => e.value_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_value>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_value>()
                .Property(e => e.use_exact_match)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_value>()
                .Property(e => e.process_type)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_value>()
                .HasMany(e => e.pricing_service_value_detail)
                .WithRequired(e => e.pricing_service_value)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_service_value_detail>()
                .Property(e => e.value_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_value_detail>()
                .Property(e => e.value_detail_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_service_value_detail>()
                .Property(e => e.original_value)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_value_detail>()
                .Property(e => e.converted_value)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_value_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<pricing_service_value_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template>()
                .Property(e => e.pricing_template_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template>()
                .Property(e => e.pricing_template_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template>()
                .HasMany(e => e.pricing_template_key_field)
                .WithRequired(e => e.pricing_template)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_template>()
                .HasMany(e => e.pricing_template_location)
                .WithRequired(e => e.pricing_template)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_template_item_dflt>()
                .Property(e => e.column_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_template_item_dflt>()
                .Property(e => e.default_value)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_item_dflt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_item_dflt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .Property(e => e.key_field_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .Property(e => e.key_field_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .Property(e => e.item_prefix_suffix)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .Property(e => e.secondary_key_field_id)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .Property(e => e.secondary_key_field_desc)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .HasMany(e => e.pricing_template_item_dflt)
                .WithRequired(e => e.pricing_template_key_field)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_template_key_field>()
                .HasMany(e => e.pricing_template_location_dflt)
                .WithRequired(e => e.pricing_template_key_field)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_template_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_template_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_location>()
                .HasMany(e => e.pricing_template_location_dflt)
                .WithRequired(e => e.pricing_template_location)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pricing_template_location_dflt>()
                .Property(e => e.column_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pricing_template_location_dflt>()
                .Property(e => e.default_value)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_location_dflt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pricing_template_location_dflt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<printer_detail>()
                .Property(e => e.tray_name)
                .IsUnicode(false);

            modelBuilder.Entity<printer_detail>()
                .Property(e => e.tray_desc)
                .IsUnicode(false);

            modelBuilder.Entity<printer_detail>()
                .Property(e => e.use_on_all_forms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<printer_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<printer_detail>()
                .HasMany(e => e.printer_x_form)
                .WithRequired(e => e.printer_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<printer_hdr>()
                .Property(e => e.printer_name)
                .IsUnicode(false);

            modelBuilder.Entity<printer_hdr>()
                .Property(e => e.printer_desc)
                .IsUnicode(false);

            modelBuilder.Entity<printer_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<printer_hdr>()
                .HasMany(e => e.port_printer)
                .WithRequired(e => e.printer_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<printer_hdr>()
                .HasMany(e => e.printer_detail)
                .WithRequired(e => e.printer_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<printer_x_form>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<pro_forma_info>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pro_forma_info>()
                .Property(e => e.paps_no)
                .IsUnicode(false);

            modelBuilder.Entity<pro_forma_info>()
                .Property(e => e.number_of_skids)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pro_forma_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pro_forma_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<problem_code>()
                .Property(e => e.problem_code_id)
                .IsUnicode(false);

            modelBuilder.Entity<problem_code>()
                .Property(e => e.problem_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<problem_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<problem_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<problem_code>()
                .HasMany(e => e.problem_code_x_inv_mast)
                .WithRequired(e => e.problem_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<problem_code_x_inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<problem_code_x_inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<proc_x_trans_det_x_po_hdr>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<proc_x_trans_det_x_po_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.process_code)
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.process_name)
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.process_description)
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<process>()
                .Property(e => e.all_locations_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.receipt_process_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.raw_yield_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process>()
                .Property(e => e.finished_yield_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process>()
                .Property(e => e.raw_yield_uom)
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.finished_yield_uom)
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.capture_usage_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.production_order_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .Property(e => e.one_off_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process>()
                .HasMany(e => e.process_predefined_item)
                .WithRequired(e => e.process)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<process>()
                .HasMany(e => e.process_notepad)
                .WithRequired(e => e.process)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<process>()
                .HasMany(e => e.stage_x_process)
                .WithRequired(e => e.process)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<process_in_progress_lock>()
                .Property(e => e.transaction_login_name)
                .IsUnicode(false);

            modelBuilder.Entity<process_in_progress_lock>()
                .Property(e => e.in_progress_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_in_progress_lock>()
                .Property(e => e.argument1)
                .IsUnicode(false);

            modelBuilder.Entity<process_in_progress_lock>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_in_progress_lock>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<process_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<process_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<process_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<process_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_po_shipment_hdr>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<process_po_shipment_hdr>()
                .Property(e => e.confirmed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_po_shipment_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<process_po_shipment_hdr>()
                .Property(e => e.tracking_number)
                .IsUnicode(false);

            modelBuilder.Entity<process_po_shipment_hdr>()
                .Property(e => e.instructions)
                .IsUnicode(false);

            modelBuilder.Entity<process_po_shipment_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_po_shipment_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_predefined_item>()
                .Property(e => e.auto_start_process)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_predefined_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_predefined_item>()
                .Property(e => e.raw_yield_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_predefined_item>()
                .Property(e => e.finished_yield_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_predefined_item>()
                .Property(e => e.raw_yield_uom)
                .IsUnicode(false);

            modelBuilder.Entity<process_predefined_item>()
                .Property(e => e.finished_yield_uom)
                .IsUnicode(false);

            modelBuilder.Entity<process_predefined_item>()
                .Property(e => e.auto_start_process_from_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_system_parameters>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_trans_x_oe_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.raw_qty_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.raw_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.accumulated_cost_of_processing)
                .HasPrecision(19, 4);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.qty_completed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.extended_description)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.process_cd)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.process_name)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.process_desc)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.raw_yield_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.finished_yield_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.raw_yield_uom)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.finished_yield_uom)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.finished_qty_completed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.report_printed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.capture_usage_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.process_po_without_allocation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .Property(e => e.qwo_no)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction>()
                .HasMany(e => e.process_x_trans_x_oe_line)
                .WithRequired(e => e.process_x_transaction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<process_x_transaction>()
                .HasMany(e => e.process_x_transaction_detail)
                .WithRequired(e => e.process_x_transaction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<process_x_transaction>()
                .HasMany(e => e.process_x_transaction_note)
                .WithRequired(e => e.process_x_transaction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.qty_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.qty_out)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.qty_lost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.qty_partially_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.cost_uom)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.stage_qty_uom)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.qty_split)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.cost_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.qty_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.po_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.allow_partials)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.stage_wip_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.stage_cd)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.stage_desc)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.estimated_hours)
                .HasPrecision(6, 2);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.min_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.stage_po_desc)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.purchasing_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.backflush_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.traveler_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.posted_gl_po_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.consolidatable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.container_uom)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.container_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.comment_process)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_detail>()
                .Property(e => e.comment)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_note>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<process_x_transaction_note>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_note>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_note>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_note>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_note>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_note>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<process_x_transaction_note>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty>()
                .Property(e => e.commercial_product_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty>()
                .Property(e => e.coil_labor_charge_credit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_group_dealer_warranty>()
                .Property(e => e.compressor_labor_charge_credit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_group_dealer_warranty>()
                .Property(e => e.require_date_code_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty>()
                .Property(e => e.require_failed_part_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty>()
                .Property(e => e.require_equipment_dtl_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty_equip>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty_equip>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty_serial>()
                .Property(e => e.serial_template)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty_serial>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_dealer_warranty_serial>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_strategic_hdr>()
                .Property(e => e.factor_1)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_strategic_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_strategic_hdr>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_group_strategic_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_strategic_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_strategic_hdr>()
                .Property(e => e.visibility_coreness_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_group_strategic_hdr>()
                .HasMany(e => e.prod_group_strategic_line)
                .WithRequired(e => e.prod_group_strategic_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_group_strategic_line>()
                .Property(e => e.minimum_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_group_strategic_line>()
                .Property(e => e.price_cube_modifier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_group_strategic_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_group_strategic_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_line_component_labor>()
                .Property(e => e.estimated_labor_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_line_component_labor>()
                .Property(e => e.estimated_labor_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_line_component_labor>()
                .Property(e => e.estimated_labor_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_line_component_labor>()
                .Property(e => e.estimated_material_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_line_component_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_line_component_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_ord_comp_x_inv_adj>()
                .Property(e => e.adjustment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_ord_comp_x_inv_adj>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_ord_comp_x_inv_adj>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_ord_line_compnt_x_oe_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_ord_line_po>()
                .Property(e => e.prod_order_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_ord_line_po>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_ord_line_po>()
                .Property(e => e.component_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_ord_line_po>()
                .Property(e => e.po_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_ord_line_po>()
                .Property(e => e.po_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_ord_line_po>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_ord_line_po>()
                .Property(e => e.connection_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.prod_order_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.cancel)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.comment)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.entered_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.assemble_disassemble)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.printed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.create_auto_transfer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.estimated_freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.actual_freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.manual_freight_overide_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.drawings_complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_hdr>()
                .Property(e => e.inventory_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_hdr>()
                .HasMany(e => e.prod_ord_line_po)
                .WithRequired(e => e.prod_order_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_hdr>()
                .HasMany(e => e.prod_order_line)
                .WithRequired(e => e.prod_order_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_hdr>()
                .HasMany(e => e.prod_order_line_component)
                .WithRequired(e => e.prod_order_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_hdr>()
                .HasMany(e => e.prod_order_line_link)
                .WithRequired(e => e.prod_order_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_hdr>()
                .HasMany(e => e.prod_pick_ticket_hdr)
                .WithRequired(e => e.prod_order_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.prod_order_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.qty_to_make)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.qty_completed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.completed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.cancel)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.labor)
                .HasPrecision(19, 2);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.ship_partial_quantity)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.ship_incomplete_assemblies)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.print_compnts_on_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.print_components_on_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.overall_assembly_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.free_form)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.cum_assembly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.print_incomplete_assemblies)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.assembly_for_stock)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.cost_to_disassemble)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.print_return_to_stock_components)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.price_return_to_stock_components)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.hose_assembly_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.hose_overall_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.hose_uom)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.deposit_bin)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.qty_on_pick_tickets)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.qty_confirmed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.estimated_freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.actual_freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.manual_freight_overide_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.extd_comp_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.extd_comp_cost_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.design_complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.estimated_process_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line>()
                .HasMany(e => e.pool_liner_processing)
                .WithRequired(e => e.prod_order_line)
                .HasForeignKey(e => new { e.prod_order_number, e.prod_order_line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line>()
                .HasMany(e => e.prod_ord_line_po)
                .WithRequired(e => e.prod_order_line)
                .HasForeignKey(e => new { e.prod_order_number, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line>()
                .HasMany(e => e.prod_order_line_component)
                .WithRequired(e => e.prod_order_line)
                .HasForeignKey(e => new { e.prod_order_number, e.line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line>()
                .HasMany(e => e.prod_order_line_link)
                .WithRequired(e => e.prod_order_line)
                .HasForeignKey(e => new { e.prod_order_number, e.prod_order_line_number })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line_comp_frght>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_comp_frght>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_comp_frght>()
                .Property(e => e.freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_frght>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_frght>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.bill_to_customer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.print_on_pick_ticket_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.print_on_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.hours_worked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.hours_charged)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.applied_labor_acct)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.base_ut_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.base_labor_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.total_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.total_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.manual_price_overide_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.sales_tax)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.sales_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.commission_cost_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.cost_posted)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .Property(e => e.total_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .HasMany(e => e.prodorder_labor_schedule)
                .WithRequired(e => e.prod_order_line_comp_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line_comp_labor>()
                .HasMany(e => e.wip_worksheet_x_labor)
                .WithRequired(e => e.prod_order_line_comp_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.prod_order_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.component_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.qty_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.qty_canceled)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.other_charge)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.units_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.sub_assembly)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.qty_per_assembly)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.comp_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.component_cut_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.cut_length_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.qty_needed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.used_specific_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.qty_on_pick_tickets)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.qty_confirmed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.inventory_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.new_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.backflush_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.qty_scrapped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.belting_length)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.belting_width)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.uom_converted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.loose_ship_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.extended_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .Property(e => e.unit_cost_edited)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_component>()
                .HasMany(e => e.prod_line_component_labor)
                .WithRequired(e => e.prod_order_line_component)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line_component>()
                .HasMany(e => e.prod_ord_line_compnt_x_oe_line)
                .WithRequired(e => e.prod_order_line_component)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line_component>()
                .HasMany(e => e.prod_order_line_comp_frght)
                .WithRequired(e => e.prod_order_line_component)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line_component>()
                .HasMany(e => e.prod_order_line_comp_labor)
                .WithRequired(e => e.prod_order_line_component)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line_component>()
                .HasMany(e => e.wip_worksheet_x_component)
                .WithRequired(e => e.prod_order_line_component)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prod_order_line_link>()
                .Property(e => e.prod_order_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_link>()
                .Property(e => e.prod_order_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_line_link>()
                .Property(e => e.trans_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_link>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_link>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_link>()
                .Property(e => e.row_status_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.qty_completed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.material_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.labor_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.other_charge_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.process_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.additional_labor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.additional_freight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.additional_material)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.additional_other_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.labor_cost_indirect)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_line_process>()
                .Property(e => e.additional_labor_indirect)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_print_info>()
                .Property(e => e.prod_order_no)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_order_print_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_print_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.allow_multiple_assemblies)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.labor_cost_multiplier)
                .HasPrecision(19, 4);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.ship_partial_quantity)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.ship_incomplete_assemblies)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.print_compnts_on_pick_ticket)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.print_components_on_invoice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.production_order_processing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.overall_assembly_length)
                .HasPrecision(19, 4);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.prod_order_system_param_uid)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.auto_create_prod_orders)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.append_to_prod_orders)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_order_system_parameters>()
                .Property(e => e.allow_oe_add_components)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.sku_qty_picked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.sku_qty_confirmed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.prod_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.prod_component_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.sku_qty_completed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prod_pick_ticket_detail>()
                .Property(e => e.over_under_picking_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_pick_ticket_hdr>()
                .Property(e => e.prod_order_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_pick_ticket_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<prod_pick_ticket_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_pick_ticket_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prod_pick_ticket_hdr>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prod_pick_ticket_hdr>()
                .HasMany(e => e.prod_pick_ticket_detail)
                .WithRequired(e => e.prod_pick_ticket_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prodord_tech_default_shift>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodord_tech_default_shift>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_calendar>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_calendar>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_calendar>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.prodorder_labor_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.prodorder_labor_desc)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.prodorder_labor_ext_desc)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.production_commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor>()
                .Property(e => e.estimated_hours)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prodorder_labor>()
                .HasMany(e => e.prodorder_labor_rate)
                .WithRequired(e => e.prodorder_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prodorder_labor>()
                .HasMany(e => e.prodorder_labor_proc_dtl)
                .WithRequired(e => e.prodorder_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prodorder_labor>()
                .HasMany(e => e.prodorder_tech_x_labor)
                .WithRequired(e => e.prodorder_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prodorder_labor_proc_dtl>()
                .Property(e => e.estimated_hours)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prodorder_labor_proc_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor_proc_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor_proc_hdr>()
                .Property(e => e.prodorder_labor_process_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor_proc_hdr>()
                .Property(e => e.prodorder_labor_process_desc)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor_proc_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor_proc_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor_proc_hdr>()
                .HasMany(e => e.prodorder_labor_proc_dtl)
                .WithRequired(e => e.prodorder_labor_proc_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prodorder_labor_rate>()
                .Property(e => e.rate_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prodorder_labor_rate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor_rate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor_schedule>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_labor_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_shift>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_shift>()
                .Property(e => e.shift_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_shift>()
                .Property(e => e.shift_desc)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_shift>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_shift>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_tech_x_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_tech_x_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.contacts_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.overtime_hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.premium_hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.burdened_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.applied_labor_acct)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.labor_cos_acct)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_technician>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_technician>()
                .HasMany(e => e.prodord_tech_default_shift)
                .WithRequired(e => e.prodorder_technician)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prodorder_technician>()
                .HasMany(e => e.prodorder_tech_x_labor)
                .WithRequired(e => e.prodorder_technician)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prodorder_work_center>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_work_center>()
                .Property(e => e.prodorder_work_center_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_work_center>()
                .Property(e => e.prodorder_work_center_desc)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_work_center>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_work_center>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_work_day>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_work_day>()
                .Property(e => e.active_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_work_day>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prodorder_work_day>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.product_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.asset_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.cos_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.parker_product_code)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.landed_cost_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.environmental_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.admin_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.include_in_size_analysis_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.rma_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.price_rounding_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.price_rounding_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group>()
                .Property(e => e.apply_min_margin_rules_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.vendor_rebate_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.enable_line_profit_warning)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.minimum_order_line_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group>()
                .Property(e => e.maximum_order_line_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group>()
                .Property(e => e.oe_skip_profit_check_unpriced)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.oe_skip_profit_check_uncosted)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.compressor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.ta_rental_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<product_group>()
                .Property(e => e.percent_req_to_alloc_transfer)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group>()
                .Property(e => e.future_price_rounding_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.alternate_oe_settings)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.commission_rule)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.customer_retail_pricing)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.cycle_count_product_group)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.inv_loc)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.inv_mast_default)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.inventory_defaults)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.landed_cost_driver)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.loan_item)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.loan_item_extra)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.passive_rebate_exclusion)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.price_page)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.product_group_x_unit_type_category)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.product_group_effective_days)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.product_group_direct_ship)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.product_group_duplicate_order)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.product_group_salesrep)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.product_group_x_restricted_class)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.product_group_x_rewards_program)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.ship_to_item)
                .WithOptional(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id });

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.supplier_list_price)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group>()
                .HasMany(e => e.tos_code)
                .WithRequired(e => e.product_group)
                .HasForeignKey(e => new { e.company_id, e.product_group_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<product_group_direct_ship>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_direct_ship>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_direct_ship>()
                .Property(e => e.direct_ship_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group_direct_ship>()
                .Property(e => e.direct_ship_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_direct_ship>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group_direct_ship>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_direct_ship>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_direct_ship>()
                .Property(e => e.order_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_duplicate_order>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_duplicate_order>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_duplicate_order>()
                .Property(e => e.duplicate_order_check_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group_duplicate_order>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_duplicate_order>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_effective_days>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_effective_days>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_effective_days>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_effective_days>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_effective_days>()
                .Property(e => e.job_entry_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group_effective_days>()
                .Property(e => e.order_entry_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group_effective_days>()
                .Property(e => e.job_min_gross_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_effective_days>()
                .Property(e => e.order_min_gross_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_prc_ctrl_dtl>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_prc_ctrl_dtl>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_prc_ctrl_dtl>()
                .Property(e => e.job_min_gross_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_prc_ctrl_dtl>()
                .Property(e => e.order_min_gross_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_prc_ctrl_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_prc_ctrl_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_prc_ctrl_dtl>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group_prefix>()
                .Property(e => e.product_group_prefix_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_prefix>()
                .Property(e => e.product_group_prefix_desc)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_prefix>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_prefix>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_price_increment>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_price_increment>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_price_increment>()
                .Property(e => e.price_break)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_price_increment>()
                .Property(e => e.price_increment)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_price_increment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_price_increment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_salesrep>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_salesrep>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_salesrep>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_salesrep>()
                .Property(e => e.enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_group_salesrep>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_restricted_class>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_restricted_class>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_restricted_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_restricted_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_rewards_program>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_rewards_program>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_rewards_program>()
                .Property(e => e.coop_dollar_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_x_rewards_program>()
                .Property(e => e.incentive_points_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<product_group_x_rewards_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_rewards_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_unit_type_category>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_unit_type_category>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_unit_type_category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_group_x_unit_type_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_service_mx>()
                .Property(e => e.product_service_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_service_mx>()
                .Property(e => e.product_service_desc)
                .IsUnicode(false);

            modelBuilder.Entity<product_service_mx>()
                .Property(e => e.include_iva_transferred)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_service_mx>()
                .Property(e => e.include_ieps_transferred)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<product_service_mx>()
                .Property(e => e.complement_to_include)
                .IsUnicode(false);

            modelBuilder.Entity<product_service_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_service_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<product_service_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<product_service_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<product_service_mx>()
                .HasMany(e => e.inv_mast_x_product_service_mx)
                .WithRequired(e => e.product_service_mx)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<progress_billing_x_invoice_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<progress_billing_x_invoice_hdr>()
                .Property(e => e.percent_billed)
                .HasPrecision(19, 2);

            modelBuilder.Entity<progress_billing_x_invoice_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<progress_billing_x_invoice_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<promotional_group_det>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<promotional_group_det>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<promotional_group_det>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<promotional_group_hdr>()
                .Property(e => e.promotional_group_hdr_id)
                .IsUnicode(false);

            modelBuilder.Entity<promotional_group_hdr>()
                .Property(e => e.promotional_group_hdr_desc)
                .IsUnicode(false);

            modelBuilder.Entity<promotional_group_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<promotional_group_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<promotional_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prorate_reason_detail>()
                .Property(e => e.original_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<prorate_reason_detail>()
                .Property(e => e.remaining_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<prorate_reason_detail>()
                .Property(e => e.credit_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<prorate_reason_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prorate_reason_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prorate_reason_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<prorate_reason_hdr>()
                .Property(e => e.gl_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<prorate_reason_hdr>()
                .Property(e => e.prorate_reason)
                .IsUnicode(false);

            modelBuilder.Entity<prorate_reason_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<prorate_reason_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<prorate_reason_hdr>()
                .HasMany(e => e.invoice_line_proration)
                .WithRequired(e => e.prorate_reason_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<prorate_reason_hdr>()
                .HasMany(e => e.prorate_reason_detail)
                .WithRequired(e => e.prorate_reason_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<pt_dtl_bill_hold_bin>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pt_dtl_bill_hold_bin>()
                .Property(e => e.pick_ticket_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<pt_dtl_bill_hold_bin>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<pt_dtl_bill_hold_bin>()
                .Property(e => e.hold_bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<pt_dtl_bill_hold_bin>()
                .Property(e => e.hold_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<pt_dtl_bill_hold_bin>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<pt_dtl_bill_hold_bin>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<published_portal>()
                .Property(e => e.published_datawindow)
                .IsUnicode(false);

            modelBuilder.Entity<published_portal>()
                .Property(e => e.subscriber_datawindow)
                .IsUnicode(false);

            modelBuilder.Entity<published_portal>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<published_portal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<published_portal>()
                .HasMany(e => e.published_portal_detail)
                .WithRequired(e => e.published_portal)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<published_portal_detail>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<published_portal_detail>()
                .Property(e => e.retrieval_argument)
                .IsUnicode(false);

            modelBuilder.Entity<published_portal_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<published_portal_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purch_type>()
                .Property(e => e.type_id)
                .IsUnicode(false);

            modelBuilder.Entity<purch_type>()
                .Property(e => e.type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<purch_type>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purch_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_acct_group_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_acct_group_hdr>()
                .Property(e => e.group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_acct_group_hdr>()
                .Property(e => e.group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_acct_group_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_acct_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_acct_group_hdr>()
                .HasMany(e => e.purchase_acct_group_line)
                .WithRequired(e => e.purchase_acct_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<purchase_acct_group_line>()
                .Property(e => e.purchase_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_acct_group_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_acct_group_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.purchase_class_description)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.high_level_months)
                .HasPrecision(19, 2);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.mid_level_months)
                .HasPrecision(19, 2);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.low_level_months)
                .HasPrecision(19, 2);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.annual_threshold)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.high_safety_stock_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.mid_safety_stock_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.low_safety_stock_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.exclude_from_ranking)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.exclude_from_reclassification)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.splittable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.service_level_pct_goal)
                .HasPrecision(19, 2);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.safety_stock_days)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.erratic_max_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.nonerratic_min_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.nonerratic_max_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.include_large_order_qty_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.minimum_percent_used)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.maximum_percent_used)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.deviation_mult_one_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.deviation_mult_two_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.deviation_mult_three_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.crit_item_deviation_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.crit_min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_class>()
                .Property(e => e.crit_max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_class>()
                .HasMany(e => e.bin_zone_group)
                .WithOptional(e => e.purchase_class)
                .HasForeignKey(e => e.putaway_rank);

            modelBuilder.Entity<purchase_class>()
                .HasMany(e => e.cycle_count_purchase_class)
                .WithRequired(e => e.purchase_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<purchase_class_x_location>()
                .Property(e => e.purchase_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_class_x_location>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.po_criteria_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.beg_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.end_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.beg_abc_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.end_abc_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.beg_purchase_discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.end_purchase_discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.beg_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.end_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.usage_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.minimum_dollars_per_item)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.carrying_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.order_point_exception)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.discount_percent)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.roai)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.number_of_months)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.replenishment_method)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.purchase_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.safety_stock_days)
                .HasPrecision(19, 4);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.look_ahead_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.purchase_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.requested_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.include_unapproved_pos)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.include_production_orders)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.use_surplus_qty)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.exclude_tbo_quantity)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.replenishment_location_only)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.autogenerate_tbo)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.buyer_specific_purchasing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.use_ns_as_source_for_transfer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.show_all_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.rdc_detail_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.roai_cut_off_periods)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.roai_cut_off_dollars)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.service_level_pct_goal)
                .HasPrecision(19, 2);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.combine_sp_with_stock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.beg_class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.end_class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.use_supplier_dflt_print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.supplier_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.beg_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.end_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.product_group_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.supplier_buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.beg_route_code_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.end_route_code_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.beg_prod_order)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.end_prod_order)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.prod_order_list)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.deviation_mult_one_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.deviation_mult_two_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.deviation_mult_three_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.crit_item_deviation_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.crit_min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.crit_max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.supplier_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_criteria>()
                .Property(e => e.class_id4_list)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library>()
                .Property(e => e.purchase_price_library_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library>()
                .Property(e => e.purchase_price_library_desc)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library>()
                .Property(e => e.purchase_price_library_type)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library>()
                .Property(e => e.source_price)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_price_library>()
                .Property(e => e.inactive)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library>()
                .HasMany(e => e.purchase_price_library_detail)
                .WithRequired(e => e.purchase_price_library)
                .HasForeignKey(e => new { e.company_id, e.purchase_price_library_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<purchase_price_library>()
                .HasMany(e => e.supplier_pricing_detail)
                .WithRequired(e => e.purchase_price_library)
                .HasForeignKey(e => new { e.company_id, e.purchase_price_library_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<purchase_price_library_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library_detail>()
                .Property(e => e.purchase_price_library_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library_detail>()
                .Property(e => e.purchase_pricing_book_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library_detail>()
                .Property(e => e.sequence_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_price_library_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_price_library_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_book>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_book>()
                .Property(e => e.purchase_pricing_book_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_book>()
                .Property(e => e.purchase_pricing_book_desc)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_book>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_book>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_book>()
                .HasMany(e => e.purchase_price_library_detail)
                .WithRequired(e => e.purchase_pricing_book)
                .HasForeignKey(e => new { e.company_id, e.purchase_pricing_book_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<purchase_pricing_book>()
                .HasMany(e => e.purchase_pricing_page)
                .WithRequired(e => e.purchase_pricing_book)
                .HasForeignKey(e => new { e.company_id, e.pricing_book_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.pricing_book_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.major_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.pricing_description)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.pricing_method)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.source_price)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_type)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.calculation_value15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.break14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom1)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom2)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom3)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom4)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom5)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom6)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom7)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom8)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom9)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom10)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom11)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom12)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom13)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.uom14)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.totaling_method)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.totaling_basis)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_pricing_page>()
                .Property(e => e.all_locations_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_type)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value11)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value12)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value13)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value14)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.scalculation_value15)
                .HasPrecision(19, 9);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_pricing_page_1266>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_transfer_group>()
                .Property(e => e.purchase_transfer_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_transfer_group>()
                .Property(e => e.purchase_transfer_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_transfer_group>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_transfer_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_transfer_group>()
                .Property(e => e.region_group_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_transfer_group>()
                .HasMany(e => e.po_hdr)
                .WithOptional(e => e.purchase_transfer_group)
                .HasForeignKey(e => e.purchase_group_id);

            modelBuilder.Entity<purchase_transfer_group>()
                .HasMany(e => e.purchase_transfer_locations)
                .WithRequired(e => e.purchase_transfer_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<purchase_transfer_group>()
                .HasMany(e => e.users_portal)
                .WithOptional(e => e.purchase_transfer_group)
                .HasForeignKey(e => e.credit_manager_group_id);

            modelBuilder.Entity<purchase_transfer_group>()
                .HasMany(e => e.users_portal1)
                .WithOptional(e => e.purchase_transfer_group1)
                .HasForeignKey(e => e.shop_floor_group_id);

            modelBuilder.Entity<purchase_transfer_locations>()
                .Property(e => e.purchase_transfer_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_transfer_locations>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<purchase_transfer_locations>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<purchase_transfer_locations>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<purchase_transfer_locations>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<putaway_trace>()
                .Property(e => e.calling_process)
                .IsUnicode(false);

            modelBuilder.Entity<putaway_trace>()
                .Property(e => e.trace_message)
                .IsUnicode(false);

            modelBuilder.Entity<putaway_trace>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<putaway_trace>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<quality_code>()
                .Property(e => e.quality_code_id)
                .IsUnicode(false);

            modelBuilder.Entity<quality_code>()
                .Property(e => e.quality_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<quality_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<quality_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<quarter>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<quarter>()
                .Property(e => e.beginning_period)
                .HasPrecision(19, 0);

            modelBuilder.Entity<quarter>()
                .Property(e => e.ending_period)
                .HasPrecision(19, 0);

            modelBuilder.Entity<quarter>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<quarter>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<quarter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<quarter>()
                .HasMany(e => e.salesrep_quota_x_quarter)
                .WithRequired(e => e.quarter)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<quote_hdr>()
                .Property(e => e.complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<quote_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<quote_hdr>()
                .Property(e => e.use_external_tax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<quote_line>()
                .Property(e => e.line_complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<quote_line>()
                .Property(e => e.qty_converted)
                .HasPrecision(19, 9);

            modelBuilder.Entity<quote_line>()
                .Property(e => e.uom_converted)
                .IsUnicode(false);

            modelBuilder.Entity<quote_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<quote_lot>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<quote_lot>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<quote_lot>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<quote_revision>()
                .Property(e => e.original_quote_no)
                .IsUnicode(false);

            modelBuilder.Entity<quote_revision>()
                .Property(e => e.quote_no)
                .IsUnicode(false);

            modelBuilder.Entity<quote_revision>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<quote_revision>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.rate_or_fee_mx_type)
                .IsUnicode(false);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.min_value)
                .HasPrecision(9, 5);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.max_value)
                .HasPrecision(9, 5);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.tax_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.rate_or_fee_mx_factor)
                .IsUnicode(false);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.traslated_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.retained_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rate_or_fee_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.terms_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.allowed_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.reapplied_receipt_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<reapplied_payment_line>()
                .Property(e => e.reapplied_payment_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<reason>()
                .Property(e => e.id)
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.reason1)
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.gl_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.affect_actual_usage_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.delivery_reason_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.use_branch_acc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.ar_cash_reason_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.mac_update_reason_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.rma_reason_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.field_destroy_reason_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.inv_adj_item_level_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.inv_adj_item_level_edit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.return_to_stock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .Property(e => e.maf_surcharge_reason_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reason>()
                .HasMany(e => e.adjustment_criteria)
                .WithRequired(e => e.reason)
                .HasForeignKey(e => e.reason_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<reason>()
                .HasMany(e => e.company_so_options)
                .WithOptional(e => e.reason)
                .HasForeignKey(e => e.service_order_adj_reason_id);

            modelBuilder.Entity<reason>()
                .HasMany(e => e.inv_adj_hdr)
                .WithRequired(e => e.reason)
                .HasForeignKey(e => e.reason_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<reason>()
                .HasMany(e => e.inv_adj_line)
                .WithOptional(e => e.reason)
                .HasForeignKey(e => e.reason_id);

            modelBuilder.Entity<reason>()
                .HasMany(e => e.locations)
                .WithOptional(e => e.reason)
                .HasForeignKey(e => e.fca_reason_id);

            modelBuilder.Entity<reason_code>()
                .Property(e => e.reason_code_name)
                .IsUnicode(false);

            modelBuilder.Entity<reason_code>()
                .Property(e => e.reason_code_description)
                .IsUnicode(false);

            modelBuilder.Entity<reason_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<reason_code>()
                .Property(e => e.affact_actual_usage_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_charge>()
                .Property(e => e.amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rebate_payments_charge>()
                .Property(e => e.acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_charge>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_charge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_charge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.payment_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.allowed_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.check_number)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.deposit_number)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.cleared_bank)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .Property(e => e.cash_acct)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_payments_detail>()
                .HasMany(e => e.rebate_receipts_detail)
                .WithRequired(e => e.rebate_payments_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rebate_receipts_detail>()
                .Property(e => e.payment_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<rebate_receipts_detail>()
                .Property(e => e.allowed_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<rebate_receipts_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_receipts_detail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<rebate_receipts_detail>()
                .Property(e => e.reversed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rebill_invoice_reason>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<rebill_invoice_reason>()
                .Property(e => e.reason_code)
                .IsUnicode(false);

            modelBuilder.Entity<rebill_invoice_reason>()
                .Property(e => e.reason_desc)
                .IsUnicode(false);

            modelBuilder.Entity<rebill_invoice_reason>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rebill_invoice_reason>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<receivable_group>()
                .Property(e => e.receivable_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<receivable_group>()
                .Property(e => e.receivable_group_description)
                .IsUnicode(false);

            modelBuilder.Entity<receivable_group>()
                .Property(e => e.billing_cycle_cutoff_day)
                .HasPrecision(18, 0);

            modelBuilder.Entity<receivable_group>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<receivable_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je>()
                .Property(e => e.je_source)
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je>()
                .Property(e => e.je_reference)
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je>()
                .Property(e => e.je_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<recon_layout_dtl_auto_je>()
                .Property(e => e.percentage_or_amount)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je>()
                .HasMany(e => e.recon_layout_dtl_auto_je_acct)
                .WithRequired(e => e.recon_layout_dtl_auto_je)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je_acct>()
                .Property(e => e.percentage)
                .HasPrecision(19, 2);

            modelBuilder.Entity<recon_layout_dtl_auto_je_acct>()
                .Property(e => e.je_acct_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<recon_layout_dtl_auto_je_acct>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je_acct>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<recon_layout_dtl_auto_je_acct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_detail>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_detail>()
                .HasMany(e => e.recon_layout_dtl_auto_je)
                .WithRequired(e => e.reconciliation_layout_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<reconciliation_layout_hdr>()
                .Property(e => e.reconciliation_layout_id)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_hdr>()
                .Property(e => e.reconciliation_layout_desc)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_hdr>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<reconciliation_layout_hdr>()
                .Property(e => e.layout_file)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_hdr>()
                .Property(e => e.include_check_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reconciliation_layout_hdr>()
                .HasMany(e => e.reconciliation_layout_detail)
                .WithRequired(e => e.reconciliation_layout_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.code)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.code_description)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.invoice_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.voucher_class)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.frequency_in_days)
                .HasPrecision(19, 4);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.amount_vouched)
                .HasPrecision(19, 4);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.no_of_times_to_recur)
                .HasPrecision(19, 4);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.times_vouched)
                .HasPrecision(19, 4);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.active)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.always_take_terms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.recur_per_period_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.code)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.purchase_amount)
                .HasPrecision(16, 4);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.purchase_account)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.purchase_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.ten99_type)
                .HasPrecision(3, 0);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.intercompany_id)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.gl_dimension_id)
                .IsUnicode(false);

            modelBuilder.Entity<recur_apinv_line>()
                .Property(e => e.gl_dimension_desc)
                .IsUnicode(false);

            modelBuilder.Entity<refrigerant_type>()
                .Property(e => e.refrigerant_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<refrigerant_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<refrigerant_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<region>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<region>()
                .Property(e => e.region_name)
                .IsUnicode(false);

            modelBuilder.Entity<region>()
                .Property(e => e.region_description)
                .IsUnicode(false);

            modelBuilder.Entity<region>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<region>()
                .Property(e => e.primary_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<region>()
                .HasMany(e => e.inv_group_region)
                .WithRequired(e => e.region)
                .HasForeignKey(e => e.dest_region_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<region>()
                .HasMany(e => e.inv_group_region1)
                .WithRequired(e => e.region1)
                .HasForeignKey(e => e.source_region_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<region>()
                .HasMany(e => e.labor_x_region)
                .WithRequired(e => e.region)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<region>()
                .HasMany(e => e.region_x_branch)
                .WithRequired(e => e.region)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<region_x_branch>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<region_x_branch>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<region_x_branch>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<region_x_branch>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<remittance>()
                .Property(e => e.remittance_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<remittance>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<remittance>()
                .Property(e => e.cash_drawer_id)
                .IsUnicode(false);

            modelBuilder.Entity<remittance>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<remittance>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<remittance>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<remittance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<remittance>()
                .Property(e => e.in_cash_drawer)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<remittance>()
                .HasMany(e => e.remittances_detail)
                .WithRequired(e => e.remittance)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<remittances_detail>()
                .Property(e => e.remittance_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<remittances_detail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<remittances_detail>()
                .Property(e => e.payment_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<remittances_detail>()
                .Property(e => e.terms_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<remittances_detail>()
                .Property(e => e.allowed_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<remittances_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<remittances_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<remittances_detail>()
                .Property(e => e.currency_variance_amt_home)
                .HasPrecision(19, 2);

            modelBuilder.Entity<remittances_detail>()
                .Property(e => e.tax_amount_paid)
                .HasPrecision(19, 2);

            modelBuilder.Entity<rental_class>()
                .Property(e => e.rental_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<rental_class>()
                .Property(e => e.rental_class_description)
                .IsUnicode(false);

            modelBuilder.Entity<rental_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rental_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rental_log>()
                .Property(e => e.request_url)
                .IsUnicode(false);

            modelBuilder.Entity<rental_log>()
                .Property(e => e.request_user)
                .IsUnicode(false);

            modelBuilder.Entity<rental_log>()
                .Property(e => e.request_payload)
                .IsUnicode(false);

            modelBuilder.Entity<rental_log>()
                .Property(e => e.response_code)
                .IsUnicode(false);

            modelBuilder.Entity<rental_log>()
                .Property(e => e.response_error)
                .IsUnicode(false);

            modelBuilder.Entity<rental_log>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rental_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rental_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rental_log>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<rental_processing>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<rental_processing>()
                .Property(e => e.transaction_status)
                .IsUnicode(false);

            modelBuilder.Entity<rental_processing>()
                .Property(e => e.amt_due)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rental_processing>()
                .Property(e => e.additional_info)
                .IsUnicode(false);

            modelBuilder.Entity<rental_processing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rental_processing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rental_processing>()
                .Property(e => e.due_time)
                .IsUnicode(false);

            modelBuilder.Entity<repair_sales_orders>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<repair_sales_orders_history>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<repair_transfers>()
                .Property(e => e.transfer_no)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.code)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.journal_id)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.source)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.foreign_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.maximum_amount_setup)
                .HasPrecision(19, 9);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.recurred_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.gl_dimension_id)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.gl_dimension_desc)
                .IsUnicode(false);

            modelBuilder.Entity<repeat_je>()
                .Property(e => e.exchange_rate_manual_entry)
                .HasPrecision(19, 6);

            modelBuilder.Entity<report>()
                .Property(e => e.menu_path)
                .IsUnicode(false);

            modelBuilder.Entity<report>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report>()
                .HasMany(e => e.report_style)
                .WithRequired(e => e.report)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_code>()
                .Property(e => e.report_code_id)
                .IsUnicode(false);

            modelBuilder.Entity<report_code>()
                .Property(e => e.report_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<report_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_code_group_p21>()
                .Property(e => e.code_group_description)
                .IsUnicode(false);

            modelBuilder.Entity<report_code_group_p21>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_code_group_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_code_group_p21>()
                .HasMany(e => e.report_code_x_code_group_p21)
                .WithRequired(e => e.report_code_group_p21)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_code_p21>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<report_code_p21>()
                .Property(e => e.code_description)
                .IsUnicode(false);

            modelBuilder.Entity<report_code_p21>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_code_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_code_p21>()
                .HasMany(e => e.report_code_x_code_group_p21)
                .WithRequired(e => e.report_code_p21)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_code_x_code_group_p21>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_code_x_code_group_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_conditional>()
                .Property(e => e.equation)
                .IsUnicode(false);

            modelBuilder.Entity<report_conditional>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<report_conditional>()
                .Property(e => e.action)
                .IsUnicode(false);

            modelBuilder.Entity<report_conditional>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_conditional>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_criteria>()
                .Property(e => e.report_criteria_id)
                .IsUnicode(false);

            modelBuilder.Entity<report_criteria>()
                .Property(e => e.report_criteria_desc)
                .IsUnicode(false);

            modelBuilder.Entity<report_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_criteria>()
                .HasMany(e => e.report_criteria_detail)
                .WithRequired(e => e.report_criteria)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_criteria_detail>()
                .Property(e => e.object_name)
                .IsUnicode(false);

            modelBuilder.Entity<report_criteria_detail>()
                .Property(e => e.object_property)
                .IsUnicode(false);

            modelBuilder.Entity<report_criteria_detail>()
                .Property(e => e.object_value)
                .IsUnicode(false);

            modelBuilder.Entity<report_criteria_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_criteria_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_email_defaults_x_token>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_email_defaults_x_token>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_email_subject_x_token>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_email_subject_x_token>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_execution_configuration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_execution_configuration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_execution_configuration>()
                .HasMany(e => e.report_execution_configuration_value)
                .WithRequired(e => e.report_execution_configuration)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_execution_configuration_value>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_execution_configuration_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_hdr>()
                .Property(e => e.report_name)
                .IsUnicode(false);

            modelBuilder.Entity<report_hdr>()
                .Property(e => e.report_source_path)
                .IsUnicode(false);

            modelBuilder.Entity<report_hdr>()
                .Property(e => e.post_purge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_hdr>()
                .HasMany(e => e.report_parm)
                .WithRequired(e => e.report_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_hdr>()
                .HasMany(e => e.report_presentation)
                .WithRequired(e => e.report_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_keyword>()
                .Property(e => e.keyword)
                .IsUnicode(false);

            modelBuilder.Entity<report_keyword>()
                .Property(e => e.statement)
                .IsUnicode(false);

            modelBuilder.Entity<report_keyword>()
                .Property(e => e.alias)
                .IsUnicode(false);

            modelBuilder.Entity<report_keyword>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<report_keyword>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_keyword>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.report_syntax)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.sort_sequence)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.groupings)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.sub_total)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.filter_criteria_desc)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.enable_for_all_users)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.show_summary_by_default)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.use_report_server)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.summary_filter)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .Property(e => e.show_graph_by_default)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata>()
                .HasMany(e => e.report_metadata_criteria)
                .WithRequired(e => e.report_metadata)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_metadata>()
                .HasMany(e => e.report_metadata_graph)
                .WithRequired(e => e.report_metadata)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_metadata>()
                .HasMany(e => e.report_metadata_x_roles)
                .WithRequired(e => e.report_metadata)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_metadata>()
                .HasMany(e => e.report_metadata_x_users)
                .WithRequired(e => e.report_metadata)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_metadata_criteria>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_criteria>()
                .Property(e => e.criteria_value)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_graph>()
                .Property(e => e.graph_title)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_graph>()
                .Property(e => e.measure_field)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_graph>()
                .Property(e => e.dimension_field)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_graph>()
                .Property(e => e.use_series)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_graph>()
                .Property(e => e.series_field)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_graph>()
                .Property(e => e.create_other_aggregation)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_graph>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_graph>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_metadata_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter>()
                .Property(e => e.dwcontrol)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter>()
                .Property(e => e.window)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter>()
                .Property(e => e.dwfield)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter>()
                .Property(e => e.role)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter>()
                .Property(e => e.condition)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter>()
                .Property(e => e.user_role)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter>()
                .HasMany(e => e.report_conditional)
                .WithRequired(e => e.report_parameter)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_parameter>()
                .HasMany(e => e.report_parameter_x_group)
                .WithRequired(e => e.report_parameter)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_parameter_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter_group>()
                .HasMany(e => e.report_parameter_x_group)
                .WithRequired(e => e.report_parameter_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<report_parameter_x_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_parameter_x_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_parm>()
                .Property(e => e.parm_name)
                .IsUnicode(false);

            modelBuilder.Entity<report_parm>()
                .Property(e => e.parm_value)
                .IsUnicode(false);

            modelBuilder.Entity<report_parm>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_parm>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_parm>()
                .Property(e => e.parm_report_name)
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.display_background_edge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.display_group_tree_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.display_toolbar_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.show_close_button_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.show_export_button_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.show_goto_page_button_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.show_group_tree_button_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.show_page_navigate_buttons_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.show_print_button_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.show_refresh_button_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.show_text_search_button_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.show_zoom_button_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.enable_drill_down_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_presentation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_style>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_style>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_territory>()
                .Property(e => e.restriction_type)
                .IsUnicode(false);

            modelBuilder.Entity<report_territory>()
                .Property(e => e.customer_or_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<report_territory>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<report_territory>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_territory>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_x_server_configuration>()
                .Property(e => e.report_name)
                .IsUnicode(false);

            modelBuilder.Entity<report_x_server_configuration>()
                .Property(e => e.report_server)
                .IsUnicode(false);

            modelBuilder.Entity<report_x_server_configuration>()
                .Property(e => e.report_database)
                .IsUnicode(false);

            modelBuilder.Entity<report_x_server_configuration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<report_x_server_configuration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<reporting_export_log>()
                .Property(e => e.report_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<reporting_export_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<reporting_export_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.contact_phone)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.contact_phone_ext)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.contact_fax_no)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.contact_fax_ext)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.contact_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.taker)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.response_type)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.show_part_numbers_on_response)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.include_open_lines_on_response)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.row_status_flag)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.contact_name)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .Property(e => e.po_no_append)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_hdr>()
                .HasMany(e => e.research_tracking_line)
                .WithRequired(e => e.research_tracking_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.model_number)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.model_description)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.part_number)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.part_description)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.part_location)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.qty_available)
                .HasPrecision(19, 9);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.qty_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.row_status_flag)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.technician)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.response_print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<research_tracking_line>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<resource_monitor>()
                .Property(e => e.user_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<resource_monitor>()
                .Property(e => e.computer_name)
                .IsUnicode(false);

            modelBuilder.Entity<resource_monitor>()
                .Property(e => e.sheet_list)
                .IsUnicode(false);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.gl_transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.gl_reversing_trans_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.gl_transaction_number_reversed)
                .HasPrecision(19, 0);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.gl_reversing_trans_no_reversed)
                .HasPrecision(19, 0);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.artb_total_home)
                .HasPrecision(19, 4);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.ar_journal_adjust_home_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.ar_revalued_cumulative_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.aptb_total_home)
                .HasPrecision(19, 4);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.ap_journal_adjust_home_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<restate_accounts_hdr>()
                .Property(e => e.ap_revalued_cumulative_balance)
                .HasPrecision(19, 4);

            modelBuilder.Entity<restate_accounts_hdr>()
                .HasMany(e => e.restate_accounts_line)
                .WithRequired(e => e.restate_accounts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<restate_accounts_line>()
                .Property(e => e.foreign_cumulative_balance)
                .HasPrecision(19, 2);

            modelBuilder.Entity<restate_accounts_line>()
                .Property(e => e.cumulative_balance)
                .HasPrecision(19, 2);

            modelBuilder.Entity<restate_accounts_line>()
                .Property(e => e.revalued_cumulative_balance)
                .HasPrecision(19, 2);

            modelBuilder.Entity<restate_accounts_line>()
                .Property(e => e.create_journal_entry_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restate_accounts_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<restate_accounts_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.class_id)
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.class_description)
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.indicator)
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.restriction_state)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.block_in_oe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.license_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.license_expires_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.user_can_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.cumulative_restrictions_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.in_class_cannot_buy_items_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.ship_to_address_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.address_based_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.address_restriction_setting_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.apply_restrictions_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.restriction_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.qty_restr_universal_class_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.qty_restr_per_time_period_sales_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.qty_restr_time_period)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.qty_restr_per_order_limit_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.qty_restr_per_order_fixed_sales_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.qty_restr_per_order_average_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<restricted_class>()
                .Property(e => e.order_restriction_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<restricted_class>()
                .HasMany(e => e.address_x_restricted_class)
                .WithRequired(e => e.restricted_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<restricted_class>()
                .HasMany(e => e.discount_group_x_restricted_class)
                .WithRequired(e => e.restricted_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<restricted_class>()
                .HasMany(e => e.inv_mast_x_restricted_class)
                .WithRequired(e => e.restricted_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<restricted_class>()
                .HasMany(e => e.price_family_x_restricted_class)
                .WithRequired(e => e.restricted_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<restricted_class>()
                .HasMany(e => e.product_group_x_restricted_class)
                .WithRequired(e => e.restricted_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<restricted_class>()
                .HasMany(e => e.restricted_class1)
                .WithOptional(e => e.restricted_class2)
                .HasForeignKey(e => e.parent_class_uid);

            modelBuilder.Entity<restricted_class>()
                .HasMany(e => e.ship_to_address_x_restricted_class)
                .WithRequired(e => e.restricted_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<restricted_class>()
                .HasMany(e => e.supplier_x_restricted_class)
                .WithRequired(e => e.restricted_class)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.return_transfer_criteria_id)
                .IsUnicode(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.source_location_criteria_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.source_location_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.supplier_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.product_group_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.item_class_1)
                .IsUnicode(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<return_transfer_criteria>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reverse_payment_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<reverse_payment_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<reverse_payment_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<reverse_payment_hdr>()
                .Property(e => e.reverse_payment_approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reverse_payment_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<reverse_payment_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<reverse_payment_hdr>()
                .HasMany(e => e.reapplied_payment_line)
                .WithRequired(e => e.reverse_payment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<reverse_payment_hdr>()
                .HasMany(e => e.reverse_payment_line)
                .WithRequired(e => e.reverse_payment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<reverse_payment_line>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<reverse_payment_line>()
                .Property(e => e.reverse_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<reverse_payment_line>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<reverse_payment_line>()
                .Property(e => e.deposit_no)
                .IsUnicode(false);

            modelBuilder.Entity<reverse_payment_line>()
                .Property(e => e.reversal_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<reverse_payment_line>()
                .Property(e => e.receipt_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<reverse_payment_line>()
                .Property(e => e.payment_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<reverse_payment_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<reverse_payment_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.payment_desc)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.payment_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.terms_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.check_number)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.deposit_number)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.remitter_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.import_set_no)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.reviewed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .Property(e => e.processed_payment_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<review_lockbox_payment_import_hdr>()
                .HasMany(e => e.review_lockbox_payment_import_line)
                .WithRequired(e => e.review_lockbox_payment_import_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<review_lockbox_payment_import_line>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_line>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_line>()
                .Property(e => e.payment_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<review_lockbox_payment_import_line>()
                .Property(e => e.terms_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<review_lockbox_payment_import_line>()
                .Property(e => e.import_set_no)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<review_lockbox_payment_import_line>()
                .Property(e => e.invoice_reviewed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<revision_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<revision_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.rewards_program_id)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.rewards_program_desc)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.accum_coop_dollars_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.accum_incentive_points_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.coop_dollar_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.incentive_points_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.coop_dollar_accum_basis)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.incentive_points_accum_basis)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.universal_program_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.allow_retroactive_rewards_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.coop_dollar_basis_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.incentive_points_basis_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.allow_registration_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.web_visible_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.buy_get_promo_rewards_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.promo_submission_method)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.supplier_contact_information)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.additional_information)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.rebate_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.max_dollar_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.max_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.rebate_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.rebates_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.vendor_billing_include_rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.program_type)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.unbilled_trade_promo_acct)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.unbilled_offset_acct)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.trade_promo_receivable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.program_qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.program_value_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.start_program_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.start_program_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.rebate_correction_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.referenced_program_id)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.amf_claims_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.unredeemed_claims_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.redeemed_claims_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .Property(e => e.maf_surcharge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.buy_get_x_rewards_program)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.coop_gl_account)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.customer_x_rewards_program)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.discount_group_x_rewards_program)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.inv_mast_x_rewards_program)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.invoice_line_rewards)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.oe_line_rewards)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.price_family_x_rewards_program)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.product_group_x_rewards_program)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.rewards_program_x_accrued_claims)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program>()
                .HasMany(e => e.supplier_x_rewards_program)
                .WithRequired(e => e.rewards_program)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rewards_program_entry_form>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_form>()
                .Property(e => e.internal_notes)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_form>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_form>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_goal>()
                .Property(e => e.goal_name)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_goal>()
                .Property(e => e.goal_extended_description)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_goal>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_goal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_year>()
                .Property(e => e.allow_registration_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_year>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_entry_year>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_x_accrued_claims>()
                .Property(e => e.total_net_sales)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program_x_accrued_claims>()
                .Property(e => e.rebate_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rewards_program_x_accrued_claims>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rewards_program_x_accrued_claims>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rf_found_item>()
                .Property(e => e.qty_found)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rf_found_item>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<rf_found_item>()
                .Property(e => e.count_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rf_found_item>()
                .Property(e => e.qty_per_pkg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rf_found_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rf_found_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rf_found_item>()
                .Property(e => e.lot_id)
                .IsUnicode(false);

            modelBuilder.Entity<rf_found_item>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<rf_found_item>()
                .Property(e => e.tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.keystroke)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.event_name)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.keystroke_desc)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.keystroke_mod)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.image_file)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.tool_sequence)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.overridden_tool_desc_eds)
                .IsUnicode(false);

            modelBuilder.Entity<rf_keys_default>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal>()
                .Property(e => e.rf_ip_address)
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rf_terminal>()
                .Property(e => e.current_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal>()
                .Property(e => e.rf_client_name)
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal_inventory>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal_inventory>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal_inventory>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal_inventory>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rf_terminal_inventory>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rf_terminal_inventory>()
                .Property(e => e.empty_bin_suggested_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rf_terminal_inventory>()
                .Property(e => e.use_putaway_rank_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rfnavigator_sync_dump_batch>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch>()
                .HasMany(e => e.rfnavigator_sync_dump_batch_dtl)
                .WithRequired(e => e.rfnavigator_sync_dump_batch)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.serialized)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.p21_qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.p21_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.base_unit)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.total_row_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.rfnav_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.p21_unapproved_po_rcpt_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.p21_unconfirmed_pt_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_sync_dump_batch_dtl>()
                .Property(e => e.p21_unreceived_transfer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_log>()
                .Property(e => e.trans_type_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_log>()
                .Property(e => e.outgoing_payload)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_log>()
                .Property(e => e.result_message)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_log>()
                .Property(e => e.extended_audit_info)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_log>()
                .Property(e => e.manual_resolve_flag)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.code)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.avail_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.cart_number1)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.cart_number2)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.st_code_qty1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.trans_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.unit_number1)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.unit_number2)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.unit_qty1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.mfg_date)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.packing_slip_date)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.tr_date)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.tr_time)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.addl_charge)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.argv0)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.asn_number)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.branch_code)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.carrier)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.charge_number)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.correction)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.cust_name)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.destination)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.final_destination)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.final_dest_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.expired)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.grade)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.group_id)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.host_printer)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.inits)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.inspection_hold)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.int_order_number)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.interface_type)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.interface_type_chld)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.interface_type_mfg_prnt)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.interface_type_prnt)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.interface_type_ro)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.interface_type_unit)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.inv_hold)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.issue_type)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.load_id)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.location1)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.location2)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.lot_number1)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.lot_number2)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.lot_number3)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.message2)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.order_number)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.packing_slip_num)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.param_code)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.po_number1)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.po_verbal)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.pro_number)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.prog_type)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.reason_code)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.ref_ro_num)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.rfid)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.sc_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.seal_number)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.shop_cust_type)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.stock_code1)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.supplier)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.track_num)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.trailer_number)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.ucc_128)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.unit_meas)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.unit_status)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.ver_hold)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.conv_sm_alter)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.st_code_qty_alt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.trans_qty_alt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.unit_qty_alt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.unit_meas_alt)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.record_read)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.manual_resolve_flag)
                .IsUnicode(false);

            modelBuilder.Entity<rfnavigator_upload_queue>()
                .Property(e => e.asn_ref_order_number)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon>()
                .HasMany(e => e.ribbon_tab_x_ribbon)
                .WithRequired(e => e.ribbon)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.trigger_datawindow)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.trigger_field)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.url)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.metric_datawindow)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.metric_field)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.metric_title)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.metric_desc)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.metric_value)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.metric_color)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.image_type)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.image_mode)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.apply_to_all_users)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.metric_format)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.global_metric)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.business_rule)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.business_rule_field_detail)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.secondary_url)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.on_click_business_rule)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.window_title)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.color_expression_datawindow)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.color_expression_field)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric>()
                .Property(e => e.grow_metric_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ribbon_metric>()
                .HasMany(e => e.ribbon_metric_x_roles)
                .WithRequired(e => e.ribbon_metric)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ribbon_metric>()
                .HasMany(e => e.ribbon_metric_x_users)
                .WithRequired(e => e.ribbon_metric)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ribbon_metric_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_metric_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab>()
                .Property(e => e.tab_id)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab>()
                .Property(e => e.tab_text)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab>()
                .HasMany(e => e.ribbon_tab_group_x_ribbon_tab)
                .WithRequired(e => e.ribbon_tab)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ribbon_tab>()
                .HasMany(e => e.ribbon_tab_x_ribbon)
                .WithRequired(e => e.ribbon_tab)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ribbon_tab_group>()
                .Property(e => e.tab_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab_group>()
                .Property(e => e.tab_group_text)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab_group>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab_group>()
                .HasMany(e => e.ribbon_tab_group_x_ribbon_tab)
                .WithRequired(e => e.ribbon_tab_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ribbon_tab_group>()
                .HasMany(e => e.ribbon_tool_x_ribbon_tab_group)
                .WithRequired(e => e.ribbon_tab_group)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ribbon_tab_group_x_ribbon_tab>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab_group_x_ribbon_tab>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab_x_ribbon>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tab_x_ribbon>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.tool_id)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.tool_text)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.erp_menu)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.erp_event_message)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.erp_menu_attribute)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.image_file)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .Property(e => e.used_in_uiserver_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool>()
                .HasMany(e => e.ribbon_tool_x_ribbon_tab_group)
                .WithRequired(e => e.ribbon_tool)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ribbon_tool_x_ribbon_tab_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ribbon_tool_x_ribbon_tab_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_line_carrier_contract_info>()
                .Property(e => e.contract_id)
                .IsUnicode(false);

            modelBuilder.Entity<rma_line_carrier_contract_info>()
                .Property(e => e.contract_desc)
                .IsUnicode(false);

            modelBuilder.Entity<rma_line_carrier_contract_info>()
                .Property(e => e.master_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_line_carrier_contract_info>()
                .Property(e => e.area_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_line_carrier_contract_info>()
                .Property(e => e.claim_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_line_carrier_contract_info>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rma_line_carrier_contract_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_line_carrier_contract_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.receipt_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.freight_out)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.confirmed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.front_counter_rma)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.credit_percentage)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rma_receipt_hdr>()
                .Property(e => e.signature_filename)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_hdr>()
                .HasMany(e => e.rma_receipt_line)
                .WithRequired(e => e.rma_receipt_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<rma_receipt_hdr_4686>()
                .Property(e => e.rma_bin_action)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_hdr_4686>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_hdr_4686>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.qty_to_stock)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.qty_to_adjust)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.qty_to_supplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.freight_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.reason_adjustment_id)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.qty_to_transfer)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.core_item_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<rma_receipt_line>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rma_status>()
                .Property(e => e.rma_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<rma_status>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_status>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.refund_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.original_payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.requested_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.invoice_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.payment_requested_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_x_cc_payments>()
                .Property(e => e.external_tax_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_x_cc_payments_freight>()
                .Property(e => e.payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rma_x_cc_payments_freight>()
                .Property(e => e.refund_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<rma_x_cc_payments_freight>()
                .Property(e => e.original_payment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<rma_x_cc_payments_freight>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<rma_x_cc_payments_freight>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<rma_x_cc_payments_freight>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<rma_x_cc_payments_freight>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_pod>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_pod>()
                .Property(e => e.recipient_name)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_pod>()
                .Property(e => e.signature_image_data)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_pod>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_pod>()
                .Property(e => e.order_refused_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_pod>()
                .Property(e => e.complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_pod>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_pod>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_pod>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_routing>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<roadnet_routing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_routing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_routing>()
                .Property(e => e.route_id)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_routing>()
                .Property(e => e.service_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<roadnet_routing>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_routing>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_routing>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<roadnet_routing>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<role>()
                .Property(e => e.role1)
                .IsUnicode(false);

            modelBuilder.Entity<role>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<role>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<role>()
                .Property(e => e.minimum_margin_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<role>()
                .Property(e => e.approve_count_above_threshold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<role>()
                .Property(e => e.head_office_access_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<role>()
                .Property(e => e.allow_unlinked_cc_on_rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.alert_recipient_role)
                .WithRequired(e => e.role)
                .HasForeignKey(e => e.alert_role_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.api_data_access_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.business_rule_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.crystal_external_report_x_role)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.datasource_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.dc_nav_drill_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.dc_security_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.eva_skill_security_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.fastedit_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.grow_metric_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.report_metadata_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.ribbon_metric_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.roles_portal)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.scheduled_job_x_roles)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<role>()
                .HasMany(e => e.users)
                .WithRequired(e => e.role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<roles_loa>()
                .Property(e => e.order_approval_max_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<roles_loa>()
                .Property(e => e.osmi_item_loa_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<roles_loa>()
                .Property(e => e.local_item_loa_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<roles_loa>()
                .Property(e => e.price_floor_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<roles_loa>()
                .Property(e => e.price_floor_basis_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<roles_loa>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_loa>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_loa>()
                .Property(e => e.restricted_item_loa_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<roles_loa_restricted_items>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_loa_restricted_items>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_loa_sales_disc_grp>()
                .Property(e => e.sales_discount_grp_id)
                .IsUnicode(false);

            modelBuilder.Entity<roles_loa_sales_disc_grp>()
                .Property(e => e.loa_discount_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<roles_loa_sales_disc_grp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_loa_sales_disc_grp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_portal>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_portal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_price_controls>()
                .Property(e => e.job_entry_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<roles_price_controls>()
                .Property(e => e.order_entry_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<roles_price_controls>()
                .Property(e => e.max_total_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<roles_price_controls>()
                .Property(e => e.min_gross_profit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<roles_price_controls>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_price_controls>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_x_activity>()
                .Property(e => e.activity_id)
                .IsUnicode(false);

            modelBuilder.Entity<roles_x_activity>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_x_activity>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_x_hold_class>()
                .Property(e => e.roles_hold_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<roles_x_hold_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<roles_x_hold_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<room>()
                .Property(e => e.room_id)
                .IsUnicode(false);

            modelBuilder.Entity<room>()
                .Property(e => e.room_description)
                .IsUnicode(false);

            modelBuilder.Entity<room>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<room>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<room>()
                .HasMany(e => e.oe_line_room)
                .WithRequired(e => e.room)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<room>()
                .HasMany(e => e.oe_pick_ticket_detail_room)
                .WithRequired(e => e.room)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<room>()
                .HasMany(e => e.opportunity_x_room)
                .WithRequired(e => e.room)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<room>()
                .HasMany(e => e.room_x_oe_hdr)
                .WithRequired(e => e.room)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<room_area>()
                .Property(e => e.room_area_id)
                .IsUnicode(false);

            modelBuilder.Entity<room_area>()
                .Property(e => e.room_area_description)
                .IsUnicode(false);

            modelBuilder.Entity<room_area>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<room_area>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<room_x_oe_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<room_x_oe_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rounding_installment_10005>()
                .Property(e => e.rounding_installment_name)
                .IsUnicode(false);

            modelBuilder.Entity<rounding_installment_10005>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<rounding_installment_10005>()
                .Property(e => e.rounding_installment_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<routeview_batch_dtl>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<routeview_batch_dtl>()
                .Property(e => e.exported_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<routeview_batch_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<routeview_batch_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<routeview_batch_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<routeview_batch_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<routeview_batch_hdr>()
                .HasMany(e => e.routeview_batch_dtl)
                .WithRequired(e => e.routeview_batch_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.purchase_class)
                .IsUnicode(false);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.replenishment_method)
                .IsUnicode(false);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.critical_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.location_name)
                .IsUnicode(false);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.supplier_name)
                .IsUnicode(false);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.effective_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.safety_stock_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.mean_absolute_percent_error)
                .HasPrecision(19, 4);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.std_deviation)
                .HasPrecision(19, 2);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.safety_stock_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.service_level_pct_goal)
                .HasPrecision(19, 2);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.daily_usage)
                .HasPrecision(38, 15);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.deviation_mult_one_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.deviation_mult_two_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.deviation_mult_three_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.crit_item_deviation_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.crit_min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.crit_max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.median_forecast_deviation)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.effective_deviation_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.lead_time_safety_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.current_ss_investment)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.current_carrying_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<safety_stock_analysis_run>()
                .Property(e => e.investment_value_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_calls>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_calls>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_calls>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_calls>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_calls>()
                .Property(e => e.category_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_calls>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<sales_calls>()
                .Property(e => e.text)
                .IsUnicode(false);

            modelBuilder.Entity<sales_market_group>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_market_group>()
                .Property(e => e.sales_market_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<sales_market_group>()
                .Property(e => e.revenue_account)
                .IsUnicode(false);

            modelBuilder.Entity<sales_market_group>()
                .Property(e => e.cos_account)
                .IsUnicode(false);

            modelBuilder.Entity<sales_market_group>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sales_market_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<sales_market_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<sales_market_group>()
                .Property(e => e.sales_market_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.sales_mgmt_criteria_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.sales_mgmt_criteria_desc)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.beg_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.end_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.beg_assigned_to)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.end_assigned_to)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.beg_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.end_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.beg_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.end_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.beg_corporate_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.end_corporate_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.beg_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.end_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.include_completed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.beg_opportunity_name)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.end_opportunity_name)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.beg_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.end_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.include_won_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.include_lost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.include_no_decision_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.lead_source_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.activity_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<sales_mgmt_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_comm_days_overdue>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_comm_days_overdue>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_comm_days_overdue>()
                .Property(e => e.percent_forfeiture)
                .HasPrecision(19, 2);

            modelBuilder.Entity<salesrep_comm_days_overdue>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_comm_days_overdue>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_comm_days_overdue>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.commission_paid_on)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.paid_on_partial_payments)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.commission_cut_off)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.number_of_days_overdue)
                .HasPrecision(3, 0);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.track_quotas)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.commission_schedule_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.mfr_rep_paid_on_partial_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.total_profit_threshold)
                .HasPrecision(19, 2);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.total_profit_threshold_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission>()
                .Property(e => e.house_split_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<salesrep_commission_class>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_class>()
                .Property(e => e.commission_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_class>()
                .Property(e => e.months_sales)
                .HasPrecision(2, 0);

            modelBuilder.Entity<salesrep_commission_class>()
                .Property(e => e.create_voucher)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_split>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_split>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_split>()
                .Property(e => e.split_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_split>()
                .Property(e => e.split_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<salesrep_commission_split>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_split>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_commission_split>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_inside>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_inside>()
                .Property(e => e.inside_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_inside>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<salesrep_inside>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_inside>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_postalcode>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_postalcode>()
                .Property(e => e.start_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_postalcode>()
                .Property(e => e.end_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_postalcode>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_postalcode>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota>()
                .Property(e => e.quota_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota>()
                .Property(e => e.quota_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<salesrep_quota>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota>()
                .HasMany(e => e.salesrep_quota_detail)
                .WithRequired(e => e.salesrep_quota)
                .HasForeignKey(e => new { e.company_id, e.salesrep_id, e.fiscal_year })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<salesrep_quota>()
                .HasMany(e => e.salesrep_quota_period)
                .WithRequired(e => e.salesrep_quota)
                .HasForeignKey(e => new { e.company_id, e.salesrep_id, e.fiscal_year })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<salesrep_quota_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_detail>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_detail>()
                .Property(e => e.break_number)
                .HasPrecision(4, 0);

            modelBuilder.Entity<salesrep_quota_detail>()
                .Property(e => e.percent_of_quota)
                .HasPrecision(5, 2);

            modelBuilder.Entity<salesrep_quota_detail>()
                .Property(e => e.commission_schedule_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_period>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_period>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_period>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<salesrep_quota_period>()
                .Property(e => e.quota_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<salesrep_quota_period>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_period>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_x_quarter>()
                .Property(e => e.quota_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<salesrep_quota_x_quarter>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_x_quarter>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_quota_x_quarter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_weboe>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_weboe>()
                .Property(e => e.salesforce_weboe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_weboe>()
                .Property(e => e.salesforce_notification_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_weboe>()
                .Property(e => e.salesforce_pda_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_weboe>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<salesrep_weboe>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<salutation>()
                .Property(e => e.salutation1)
                .IsUnicode(false);

            modelBuilder.Entity<salutation>()
                .Property(e => e.full_name)
                .IsUnicode(false);

            modelBuilder.Entity<salutation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.source)
                .IsUnicode(false);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.source_table)
                .IsUnicode(false);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<sat_invoice_auxfoliorep_mx>()
                .Property(e => e.show_in_report_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.payment_invoice_no)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.destination_name)
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.transfer_rfc)
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.amount)
                .HasPrecision(18, 0);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.source_account)
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.source_bank)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.source_bank_foreign)
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.destination_account)
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.destination_bank)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.destination_bank_foreign)
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<sat_payment_transfer_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack>()
                .Property(e => e.prnt_ucc128_lbl_display_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack>()
                .Property(e => e.lock_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack>()
                .HasMany(e => e.scan_pack_container_hdr)
                .WithRequired(e => e.scan_pack)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scan_pack_container_detail>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<scan_pack_container_detail>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<scan_pack_container_detail>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<scan_pack_container_detail>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_detail>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<scan_pack_container_detail>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<scan_pack_container_detail>()
                .Property(e => e.parent_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<scan_pack_container_detail>()
                .HasMany(e => e.scan_pack_container_detail_tag)
                .WithRequired(e => e.scan_pack_container_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scan_pack_container_detail_tag>()
                .Property(e => e.tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_detail_tag>()
                .Property(e => e.parent_tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_detail_tag>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_detail_tag>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.weight_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.volume_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.container_id)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .Property(e => e.tag_container_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .HasMany(e => e.scan_pack_container_detail)
                .WithOptional(e => e.scan_pack_container_hdr)
                .HasForeignKey(e => e.inner_scan_pack_container_hdr_uid);

            modelBuilder.Entity<scan_pack_container_hdr>()
                .HasMany(e => e.scan_pack_container_detail1)
                .WithRequired(e => e.scan_pack_container_hdr1)
                .HasForeignKey(e => e.scan_pack_container_hdr_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_impmst_addlpath_194>()
                .Property(e => e.needsrspns_orderack_path)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_impmst_addlpath_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_def>()
                .Property(e => e.dbtable_id)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_def>()
                .Property(e => e.dbtable_desc)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_def>()
                .Property(e => e.req)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_def>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_def>()
                .Property(e => e.default_fileprefix)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_def>()
                .HasMany(e => e.scheduled_import_details)
                .WithRequired(e => e.scheduled_import_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_import_details>()
                .Property(e => e.fileprefix)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_details>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master>()
                .Property(e => e.polling_path)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master>()
                .Property(e => e.transaction_log_path)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master>()
                .Property(e => e.transaction_sum_path)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master>()
                .Property(e => e.transaction_sus_path)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master>()
                .Property(e => e.transaction_err_path)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master>()
                .Property(e => e.active)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master>()
                .Property(e => e.file_locking_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master>()
                .HasOptional(e => e.scheduled_impmst_addlpath_194)
                .WithRequired(e => e.scheduled_import_master);

            modelBuilder.Entity<scheduled_import_master>()
                .HasMany(e => e.scheduled_import_master_aux)
                .WithRequired(e => e.scheduled_import_master)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_import_master_aux>()
                .Property(e => e.update_invoices)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_import_master_aux>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.type)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.active_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.running_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.repeat_days)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.last_run_status)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .Property(e => e.run_once)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job>()
                .HasMany(e => e.p21_integration_x_scheduled_job)
                .WithRequired(e => e.scheduled_job)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_job>()
                .HasMany(e => e.scheduled_job_feature)
                .WithRequired(e => e.scheduled_job)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_job>()
                .HasMany(e => e.scheduled_job_history)
                .WithRequired(e => e.scheduled_job)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_job>()
                .HasMany(e => e.scheduled_job_user_notifications)
                .WithRequired(e => e.scheduled_job)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_job>()
                .HasMany(e => e.scheduled_job_x_roles)
                .WithRequired(e => e.scheduled_job)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_job>()
                .HasMany(e => e.scheduled_job_x_users)
                .WithRequired(e => e.scheduled_job)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_job_feature>()
                .Property(e => e.scheduled_job_feature_params)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_feature>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_feature>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_feature_type>()
                .Property(e => e.scheduled_job_feature_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_feature_type>()
                .Property(e => e.scheduled_job_feature_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_feature_type>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_feature_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_feature_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_feature_type>()
                .HasMany(e => e.scheduled_job_feature)
                .WithRequired(e => e.scheduled_job_feature_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_job_history>()
                .Property(e => e.job_run_status)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_history>()
                .Property(e => e.correlation_id)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_notifications>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_notifications>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_notifications>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_notifications>()
                .HasMany(e => e.scheduled_job_user_notifications)
                .WithRequired(e => e.scheduled_job_notifications)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<scheduled_job_user_notifications>()
                .Property(e => e.notification_for_all)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_user_notifications>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_user_notifications>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_x_roles>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_x_roles>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_x_users>()
                .Property(e => e.apply_to_all_users)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_x_users>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<scheduled_job_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<script_command>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<script_command>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<script_status>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<script_status>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<serial_number>()
                .Property(e => e.serial_number1)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<serial_number>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<serial_number>()
                .Property(e => e.bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number>()
                .Property(e => e.allowance_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<serial_number>()
                .HasMany(e => e.inv_tran_serial_detail)
                .WithRequired(e => e.serial_number1)
                .HasForeignKey(e => new { e.company_id, e.location_id, e.serial_number, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<serial_number>()
                .HasMany(e => e.serial_x_lot)
                .WithRequired(e => e.serial_number1)
                .HasForeignKey(e => new { e.company_id, e.location_id, e.serial_number, e.inv_mast_uid })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<serial_number_extd_info>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_extd_info>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_extd_info>()
                .Property(e => e.dimension_area_adjustment)
                .HasPrecision(19, 9);

            modelBuilder.Entity<serial_number_extd_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_extd_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_extd_info>()
                .Property(e => e.usable_area)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_x_integration>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_x_integration>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<serial_number_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<serial_x_lot>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<serial_x_lot>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<serial_x_lot>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<serial_x_lot>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<serial_x_lot>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<serial_x_lot>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_calendar>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_calendar>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_calendar>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_center>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_center>()
                .Property(e => e.service_center_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_center>()
                .Property(e => e.service_center_desc)
                .IsUnicode(false);

            modelBuilder.Entity<service_center>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_center>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_center>()
                .HasMany(e => e.service_center_x_machine)
                .WithRequired(e => e.service_center)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_center_x_machine>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_center_x_machine>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_code>()
                .Property(e => e.service_code_name)
                .IsUnicode(false);

            modelBuilder.Entity<service_code>()
                .Property(e => e.service_code_description)
                .IsUnicode(false);

            modelBuilder.Entity<service_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_cycle>()
                .Property(e => e.service_cycle_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_cycle>()
                .Property(e => e.service_cycle_desc)
                .IsUnicode(false);

            modelBuilder.Entity<service_cycle>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_cycle>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.service_ext_desc)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.service_make)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.service_model)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.schedule_pm)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.default_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.auto_create_service_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.default_soe_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.pm_agreement_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.tag_number)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .Property(e => e.in_stock_service_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast>()
                .HasMany(e => e.oe_line_service)
                .WithRequired(e => e.service_inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_mast>()
                .HasMany(e => e.service_inv_mast_part_list)
                .WithRequired(e => e.service_inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_mast>()
                .HasMany(e => e.service_inv_mast_pm_item)
                .WithRequired(e => e.service_inv_mast)
                .HasForeignKey(e => e.service_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_mast>()
                .HasMany(e => e.service_inv_mast_pm_item1)
                .WithRequired(e => e.service_inv_mast1)
                .HasForeignKey(e => e.pm_item_service_inv_mast_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_mast>()
                .HasMany(e => e.service_inv_mast_x_integration)
                .WithRequired(e => e.service_inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_mast>()
                .HasMany(e => e.service_inv_warranty)
                .WithRequired(e => e.service_inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_mast>()
                .HasMany(e => e.service_item_notepad)
                .WithRequired(e => e.service_inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_mast>()
                .HasMany(e => e.service_inv_mast_pm_sched)
                .WithRequired(e => e.service_inv_mast)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_mast_part_list>()
                .Property(e => e.oe_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_inv_mast_part_list>()
                .Property(e => e.oe_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_part_list>()
                .Property(e => e.pm_unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_inv_mast_part_list>()
                .Property(e => e.pm_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_part_list>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_part_list>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_part_list>()
                .Property(e => e.comp_part_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_part_list>()
                .HasMany(e => e.oe_line_service_part)
                .WithOptional(e => e.service_inv_mast_part_list)
                .HasForeignKey(e => e.comp_orig_part_list_uid);

            modelBuilder.Entity<service_inv_mast_pm_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_pm_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_pm_sched>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_pm_sched>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_pm_sched>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_mast_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.all_parts)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.all_labor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.parts_covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.labor_covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.allowance_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.allowance_amount_used)
                .HasPrecision(19, 4);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.journalized_flag)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty>()
                .Property(e => e.init_allowance_amount_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_inv_warranty>()
                .HasMany(e => e.service_inv_warranty_labor)
                .WithRequired(e => e.service_inv_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_warranty>()
                .HasMany(e => e.service_inv_warranty_part)
                .WithRequired(e => e.service_inv_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_inv_warranty_labor>()
                .Property(e => e.covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_inv_warranty_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty_part>()
                .Property(e => e.covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_inv_warranty_part>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_inv_warranty_part>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_item_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_item_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<service_item_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_item_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_item_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_item_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<service_item_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_item_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.service_labor_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.service_labor_desc)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.service_labor_ext_desc)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.service_commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.estimated_hours)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.min_hours_charged)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.tax_class)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.estimated_labor_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.overtime_hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.premium_hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.burdened_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.oe_line_service_labor)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.prod_order_line_comp_labor)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_inv_warranty_labor)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_technician_x_labor)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_labor_process_dtl)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_warranty_labor)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_labor_location)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_labor_rate)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_labor_rate_x_cust)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_labor_rate_x_partner_program)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_labor_x_integration)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.service_labor_x_tax_group_hdr)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.technician_clockinout_detail)
                .WithOptional(e => e.service_labor)
                .HasForeignKey(e => e.comp_service_labor_uid);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.technician_clockinout_detail1)
                .WithOptional(e => e.service_labor1)
                .HasForeignKey(e => e.service_labor_uid);

            modelBuilder.Entity<service_labor>()
                .HasMany(e => e.wip_worksheet_x_labor)
                .WithRequired(e => e.service_labor)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<service_labor_location>()
                .Property(e => e.estimated_labor_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_location>()
                .Property(e => e.hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_location>()
                .Property(e => e.overtime_hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_location>()
                .Property(e => e.premium_hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_location>()
                .Property(e => e.burdened_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_location>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_process_dtl>()
                .Property(e => e.estimated_hours)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_process_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_process_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_process_hdr>()
                .Property(e => e.service_labor_process_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_process_hdr>()
                .Property(e => e.service_labor_process_desc)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_process_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_process_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_process_hdr>()
                .HasMany(e => e.service_labor_process_dtl)
                .WithRequired(e => e.service_labor_process_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_labor_rate>()
                .Property(e => e.rate_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_rate>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_rate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_rate_x_cust>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<service_labor_rate_x_cust>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_rate_x_cust>()
                .Property(e => e.rate_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_rate_x_cust>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_rate_x_cust>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_rate_x_cust>()
                .Property(e => e.overtime_rate_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_rate_x_cust>()
                .Property(e => e.premium_rate_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_rate_x_partner_program>()
                .Property(e => e.base_rate_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_rate_x_partner_program>()
                .Property(e => e.hourly_rate_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_rate_x_partner_program>()
                .Property(e => e.overtime_rate_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_rate_x_partner_program>()
                .Property(e => e.premium_rate_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_labor_rate_x_partner_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_rate_x_partner_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_schedule>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_time_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_time_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_time_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_x_tax_group_hdr>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_x_tax_group_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_x_tax_group_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_labor_x_tax_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_level_agreement>()
                .Property(e => e.service_level_agreement_desc)
                .IsUnicode(false);

            modelBuilder.Entity<service_level_agreement>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_level_agreement>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_level_agreement>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_order_priority>()
                .Property(e => e.service_order_priority_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_order_priority>()
                .Property(e => e.default_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_order_priority>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_order_priority>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_plan>()
                .Property(e => e.service_plan_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_plan>()
                .Property(e => e.service_plan_description)
                .IsUnicode(false);

            modelBuilder.Entity<service_plan>()
                .Property(e => e.dflt_for_new_orders_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_plan>()
                .Property(e => e.dflt_for_warranty_orders_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_plan>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_plan>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_pm_notice_msg>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<service_pm_notice_msg>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_pm_notice_msg>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_signature>()
                .Property(e => e.signature)
                .IsUnicode(false);

            modelBuilder.Entity<service_signature>()
                .Property(e => e.recipient_name)
                .IsUnicode(false);

            modelBuilder.Entity<service_signature>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_signature>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.contacts_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.overtime_hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.premium_hourly_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.burdened_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.applied_labor_acct)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.labor_cos_acct)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician>()
                .HasMany(e => e.service_technician_x_labor)
                .WithRequired(e => e.service_technician)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_technician>()
                .HasMany(e => e.service_technician_x_integration)
                .WithRequired(e => e.service_technician)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_technician>()
                .HasMany(e => e.technician_default_shift)
                .WithRequired(e => e.service_technician)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_technician>()
                .HasMany(e => e.wip_worksheet_x_labor)
                .WithRequired(e => e.service_technician)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_technician_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician_x_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician_x_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician_x_service_center>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician_x_service_center>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_technician_x_service_center>()
                .Property(e => e.primary_service_center_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty>()
                .Property(e => e.service_warranty_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty>()
                .Property(e => e.service_warranty_desc)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty>()
                .Property(e => e.all_parts)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty>()
                .Property(e => e.parts_covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_warranty>()
                .Property(e => e.all_labor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty>()
                .Property(e => e.labor_covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_warranty>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty>()
                .Property(e => e.auto_create_claim)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty>()
                .HasMany(e => e.oe_line_service_warranty)
                .WithRequired(e => e.service_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_warranty>()
                .HasMany(e => e.service_inv_warranty)
                .WithRequired(e => e.service_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_warranty>()
                .HasMany(e => e.service_warranty_labor)
                .WithRequired(e => e.service_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_warranty>()
                .HasMany(e => e.service_warranty_part)
                .WithRequired(e => e.service_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_warranty>()
                .HasMany(e => e.service_warranty_item)
                .WithRequired(e => e.service_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_warranty>()
                .HasMany(e => e.service_warranty_claim)
                .WithRequired(e => e.service_warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<service_warranty_claim>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty_claim>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<service_warranty_claim>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty_claim>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty_labor>()
                .Property(e => e.covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_warranty_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty_part>()
                .Property(e => e.covered_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<service_warranty_part>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<service_warranty_part>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.claim_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.claim_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.edit_claim_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_credit_memo>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.servicebench_claim_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.imported_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.part_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.claim_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.warranty_status)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.optional_warranty_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.non_merchandising_part_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.unit_sell)
                .HasPrecision(19, 9);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.sales_tax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.replacement_serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.admin_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.sales_tax_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.linked_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.sales_tax_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.sales_tax_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<servicebench_wrrnty_claim_pending_import>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shift>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<shift>()
                .Property(e => e.shift_id)
                .IsUnicode(false);

            modelBuilder.Entity<shift>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shift>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shift>()
                .Property(e => e.shift_desc)
                .IsUnicode(false);

            modelBuilder.Entity<shift>()
                .HasMany(e => e.technician_default_shift)
                .WithRequired(e => e.shift)
                .HasForeignKey(e => e.default_shift_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.default_branch)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.federal_exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.state_exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.other_exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.price_file_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.default_carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.fob)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.delivery_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.accept_partial_orders)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.acceptable_wait_time)
                .HasPrecision(3, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.class1_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.class2_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.class3_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.class4_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.class5_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.invoice_type)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.billed_on_gross_net_qty)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.state_excise_tax_exemption_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.pick_ticket_type)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.handling_charge_req_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.third_party_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.signature_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.pda_order_entry)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.exclude_hold_from_pick_tix)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.exclude_canceld_from_pack_list)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.exclude_hold_from_pack_list)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.exclude_canceld_from_order_ack)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.exclude_hold_from_order_ack)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.exclude_canceld_from_pick_tix)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.print_packinglist_in_shipping)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.print_prices_on_packinglist)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.fedex_freight_markup)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.credit_limit)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.credit_limit_used)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.budget_code_approval_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.service_terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.default_customer_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.default_freight_markup_pct)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.drum_deposit_exempt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.bill_hold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.display_po_no_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.po_no_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.display_badge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.badge_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.dfoa_ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.erouter_tran_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.freight_mileage_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.degree_days_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.calendar_days_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.del_sch_source_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.service_source_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.distributor_account_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.cardlock_calc_price_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.courtesy_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.cardlock_discount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.plant_code)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.ups_roadnet_acct_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.ups_roadnet_delivery_days)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.ups_roadnet_zone_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.use_cust_ups_handlng_chrg_flag)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.ups_handling_charge)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.sales_tax_payable_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.vertex_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.customer_tax_class)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.duns_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.small_truck_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.ups_roadnet_exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.dfoa_sold_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.courtesy_contract_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.ups_third_party_billing_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.req_lot_doc_with_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.req_lot_doc_with_packinglist_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.limit_online_warranties_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.remote_margin)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.cfn_resale_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.separate_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.do_not_auto_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.sic_code)
                .HasPrecision(6, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.valvoline_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.conoco_ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.conoco_sold_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.order_by_bin_pick_ticket_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.alt_tax_rate_eligible_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.residential_address_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.exclude_print_packinglist_in_wwms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.record_usage_actual_loc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.scan_and_pack_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.freight_forward_address_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.advanced_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.trackabout_bill_by_ship_to)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .Property(e => e.protected_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.apinv_hdr)
                .WithOptional(e => e.ship_to)
                .HasForeignKey(e => new { e.company_no, e.ship_to_id });

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.bill_of_lading_hdr)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.calendar_based_delivery)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.calendar_based_reading_hist)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.carrier_contract_ship_to)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.contact_filter_tracking)
                .WithOptional(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id });

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.contacts_x_ship_to)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.customer_core_tracking)
                .WithOptional(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id });

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.degree_days_delivery)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.dispatcher_pricing_hdr)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.edi_852_reserved_po_info)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.export_matrix)
                .WithOptional(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id });

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.item_commitment_ship_to)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.job_price_customer_shipto)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.job_price_ship_control_no)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.label_definition_x_ship_to)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.loan_surcharge)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.locations)
                .WithOptional(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.consigned_ship_to_id });

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.payment_account_x_ship_to)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_carrier_acct)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_eft)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_3rd_party_carriers_194)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasOptional(e => e.ship_to_194)
                .WithRequired(e => e.ship_to);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_2186)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_blind_addressing)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_cardlock)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_credit)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_dea)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_eco_fee)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_fedex)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_finance_charge)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_form_template)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_freight_group)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_freight_multiplier)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_geocom)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_gpo)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_item)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_iva_tax)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_location_priority)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_order_cmp_pct)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_packing_list)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_pumpoff)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_salesrep_location)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_salesrep)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_tax_exemption)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_tax_state_exempt)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_ud)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id });

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_vat)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_x_integration)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.ship_to_x_inv_mast)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.shipto_carrier)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.tax_exception_list_x_ship_to)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.tax_exemption_hdr)
                .WithOptional(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id });

            modelBuilder.Entity<ship_to>()
                .HasMany(e => e.territory_x_ship_to)
                .WithRequired(e => e.ship_to)
                .HasForeignKey(e => new { e.company_id, e.ship_to_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ship_to_194>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_194>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_194>()
                .Property(e => e.bb_ship_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_2186>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_2186>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_2186>()
                .Property(e => e.default_rma_freight_code)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_2186>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_2186>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.inactive)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.prelim_notice_tracking)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.prelim_amount)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.credit_limit)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.estimated_job_value)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.print_prelim_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_335>()
                .Property(e => e.credit_limit_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_3rd_party_carriers_194>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_3rd_party_carriers_194>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_3rd_party_carriers_194>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_3rd_party_carriers_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_address_x_restricted_class>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_address_x_restricted_class>()
                .Property(e => e.state_code)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_address_x_restricted_class>()
                .Property(e => e.zip3_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_address_x_restricted_class>()
                .Property(e => e.zip5_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_address_x_restricted_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_address_x_restricted_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_blind_addressing>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_blind_addressing>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_blind_addressing>()
                .Property(e => e.blind_addressing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_blind_addressing>()
                .Property(e => e.replace_company_name_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_blind_addressing>()
                .Property(e => e.logo_path_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_blind_addressing>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_blind_addressing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_cardlock>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_cardlock>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_cardlock>()
                .Property(e => e.cardlock_card_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_cardlock>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_cardlock>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_cardlock>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_cardlock>()
                .Property(e => e.vehicle_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_cardlock>()
                .Property(e => e.odometer_reading)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_carrier_acct>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_carrier_acct>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_carrier_acct>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_carrier_acct>()
                .Property(e => e.carrier_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_carrier_acct>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_carrier_acct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_credit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_credit>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_credit>()
                .Property(e => e.credit_card_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_credit>()
                .Property(e => e.credit_card_name)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_credit>()
                .Property(e => e.credit_card_type)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_credit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_credit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.license_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.hin_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.dea_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.dea_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.dea_schedule1)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.dea_schedule2)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.dea_schedule3)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.dea_schedule4)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.dea_schedule5)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.dea_schedule6)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_dea>()
                .Property(e => e.dea_schedule7)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eco_fee>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_eco_fee>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eco_fee>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eco_fee>()
                .Property(e => e.excemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eco_fee>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eco_fee>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eco_fee>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eft>()
                .Property(e => e.bank)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eft>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eft>()
                .Property(e => e.routing_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eft>()
                .Property(e => e.status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eft>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eft>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eft>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_eft>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.payer_account)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.payer_name)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.company_name)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.address1)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.address2)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.country)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.use_system_handling_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_fedex>()
                .Property(e => e.fixed_handling_charge)
                .HasPrecision(19, 2);

            modelBuilder.Entity<ship_to_finance_charge>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_finance_charge>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_finance_charge>()
                .Property(e => e.generate_finance_charges)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_finance_charge>()
                .Property(e => e.fc_cycle)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_finance_charge>()
                .Property(e => e.minimum_finance_charge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ship_to_finance_charge>()
                .Property(e => e.fc_grace_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_finance_charge>()
                .Property(e => e.fc_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ship_to_finance_charge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_finance_charge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.order_ack_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.rma_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.packing_list_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.invoice_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.statement_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.cons_inv_detail_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.cons_inv_summary_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.packing_list_priced_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.pick_ticket_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.package_label_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_form_template>()
                .Property(e => e.package_content_label_filename)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_freight_group>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_freight_group>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_freight_group>()
                .Property(e => e.freight_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_freight_group>()
                .Property(e => e.use_freight_group_amt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_freight_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_freight_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_freight_multiplier>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_freight_multiplier>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_freight_multiplier>()
                .Property(e => e.freight_multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_freight_multiplier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_freight_multiplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_geocom>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_geocom>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_geocom>()
                .Property(e => e.longitude)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_geocom>()
                .Property(e => e.latitude)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_geocom>()
                .Property(e => e.bulk_duration)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_geocom>()
                .Property(e => e.package_duration)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_geocom>()
                .Property(e => e.approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_geocom>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_geocom>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_gpo>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_gpo>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_gpo>()
                .Property(e => e.gln)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_gpo>()
                .Property(e => e.hin)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_gpo>()
                .Property(e => e.facility_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_gpo>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_gpo>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_gpo>()
                .Property(e => e.gpo_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_item>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_item>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_item>()
                .Property(e => e.customer_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_item>()
                .Property(e => e.item_bill_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_item>()
                .Property(e => e.buyback_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_item>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_item>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.payment_method_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.domestic_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.account_digits)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.leyenda_fiscal_1)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_iva_tax>()
                .Property(e => e.tax_registration_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_jurisdiction>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_jurisdiction>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_jurisdiction>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_jurisdiction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_jurisdiction>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_jurisdiction>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_location_priority>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_location_priority>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_location_priority>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_location_priority>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_location_priority>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_notepad>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_order_cmp_pct>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_order_cmp_pct>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_order_cmp_pct>()
                .Property(e => e.order_completion_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_order_cmp_pct>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_order_cmp_pct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_packing_list>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_packing_list>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_packing_list>()
                .Property(e => e.packing_list_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_packing_list>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_packing_list>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_pumpoff>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_pumpoff>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_pumpoff>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_pumpoff>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep>()
                .Property(e => e.primary_salesrep)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ship_to_salesrep>()
                .Property(e => e.primary_service_rep)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep_location>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep_location>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_salesrep_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_salesrep_location>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep_location>()
                .Property(e => e.commission_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_salesrep_location>()
                .Property(e => e.primary_salesrep_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep_location>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_salesrep_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exceptions>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exceptions>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_tax_exceptions>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exceptions>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exemption>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exemption>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_tax_exemption>()
                .Property(e => e.type_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exemption>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exemption>()
                .Property(e => e.exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exemption>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exemption>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_exemption>()
                .Property(e => e.taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_state_exempt>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_state_exempt>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_tax_state_exempt>()
                .Property(e => e.exemption_no_1)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_state_exempt>()
                .Property(e => e.exemption_no_2)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_state_exempt>()
                .Property(e => e.exemption_state_1)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_state_exempt>()
                .Property(e => e.exemption_state_2)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_state_exempt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_tax_state_exempt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_ud>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_ud>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_ud>()
                .Property(e => e.shipping_route_stop)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_ud>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_ud>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.registration_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.exemption_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.eu_member_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.override_cust_vat)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_vat>()
                .Property(e => e.eori_no)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_x_integration>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_x_integration>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_x_integration>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_x_inv_mast>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_x_inv_mast>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_x_inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_x_inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_x_inv_mast>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ship_to_x_inv_mast>()
                .Property(e => e.pricing_uom)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_x_inv_mast>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<shipment>()
                .Property(e => e.ship_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipment>()
                .Property(e => e.transaction_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipment>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipment>()
                .Property(e => e.shipment_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipment>()
                .Property(e => e.shipment_desc)
                .IsUnicode(false);

            modelBuilder.Entity<shipment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipment>()
                .HasMany(e => e.carrier_data_x_shipment)
                .WithRequired(e => e.shipment)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipment>()
                .HasMany(e => e.carrier_shipping_charge)
                .WithRequired(e => e.shipment)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipment>()
                .HasMany(e => e.carrier_shipping_document)
                .WithRequired(e => e.shipment)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipment>()
                .HasMany(e => e.package_x_shipment)
                .WithRequired(e => e.shipment)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipping_charges>()
                .Property(e => e.shipping_charge)
                .HasPrecision(19, 2);

            modelBuilder.Entity<shipping_charges>()
                .Property(e => e.order_value)
                .HasPrecision(19, 2);

            modelBuilder.Entity<shipping_charges>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_charges>()
                .Property(e => e.row_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_charges>()
                .Property(e => e.est_transit_time)
                .HasPrecision(19, 2);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.packaging_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.serial_shipping_container_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.bl_tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.net_weight)
                .HasPrecision(19, 12);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.net_weight_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_hdr>()
                .Property(e => e.box_no)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_hdr>()
                .HasMany(e => e.shipping_containers_line)
                .WithRequired(e => e.shipping_containers_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipping_containers_line>()
                .Property(e => e.pick_ticket_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_containers_line>()
                .Property(e => e.container_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shipping_containers_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_line_temp>()
                .Property(e => e.serial_shipping_container_cd)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_line_temp>()
                .Property(e => e.container_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shipping_containers_line_temp>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_line_temp>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shipping_containers_line_temp>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_containers_line_temp>()
                .Property(e => e.pick_ticket_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_containers_line_temp>()
                .Property(e => e.completed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_line_temp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_containers_line_temp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_country_code>()
                .Property(e => e.shipping_country_code_value)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_country_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_country_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_document_template>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_document_template>()
                .Property(e => e.document_template)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_document_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_document_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_group>()
                .Property(e => e.shipping_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_group>()
                .Property(e => e.shipping_group_description)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_group>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_group>()
                .Property(e => e.primary_company_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_group>()
                .Property(e => e.primary_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_group_hdr>()
                .Property(e => e.shipping_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_group_hdr>()
                .Property(e => e.shipping_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_group_hdr>()
                .HasMany(e => e.shipping_group_line)
                .WithRequired(e => e.shipping_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipping_group_line>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_group_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_integration_msg_handling>()
                .Property(e => e.message_number_or_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_integration_msg_handling>()
                .Property(e => e.ignore_error_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_integration_msg_handling>()
                .Property(e => e.message_description)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_integration_msg_handling>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_integration_msg_handling>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_iva_tax>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_iva_tax>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_iva_tax>()
                .Property(e => e.payment_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_iva_tax>()
                .Property(e => e.account_digits)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_iva_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_iva_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_iva_tax>()
                .Property(e => e.leyenda_fiscal_1)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_iva_tax>()
                .Property(e => e.tax_registration_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_log>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_log>()
                .Property(e => e.request_document)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_log>()
                .Property(e => e.response_document)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_log>()
                .Property(e => e.url)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_log>()
                .Property(e => e.error_severity)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_log>()
                .Property(e => e.error_desc)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.package_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.package_desc)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.length)
                .HasPrecision(19, 4);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.width)
                .HasPrecision(19, 4);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.height)
                .HasPrecision(19, 4);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.tare_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shipping_package_type>()
                .Property(e => e.packaging_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_package_type>()
                .HasMany(e => e.scan_pack_container_hdr)
                .WithRequired(e => e.shipping_package_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.route_code)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.route_description)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.dow_route_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.tod_route_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.shipping_program_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.ship_prog_picking_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.ship_prog_picking_days)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.ship_prog_freight_disc_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.deductible_exempt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route>()
                .Property(e => e.delivery_days_of_week)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route>()
                .HasMany(e => e.door_bin_x_shipping_route)
                .WithRequired(e => e.shipping_route)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipping_route>()
                .HasMany(e => e.shipping_route_day_range)
                .WithRequired(e => e.shipping_route)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipping_route_day_range>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route_day_range>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_route_day_range>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_zone_hdr>()
                .Property(e => e.shipping_zone_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_zone_hdr>()
                .Property(e => e.shipping_zone_desc)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_zone_hdr>()
                .Property(e => e.ship_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_zone_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipping_zone_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_zone_hdr>()
                .Property(e => e.row_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipping_zone_hdr>()
                .HasMany(e => e.shipping_charges)
                .WithRequired(e => e.shipping_zone_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipping_zone_hdr>()
                .HasMany(e => e.shipping_zone_line)
                .WithRequired(e => e.shipping_zone_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shipping_zone_line>()
                .Property(e => e.beginning_zip)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_zone_line>()
                .Property(e => e.ending_zip)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_zone_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipping_zone_line>()
                .Property(e => e.row_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shipserv_tradenet_export>()
                .Property(e => e.tradenet_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipserv_tradenet_export>()
                .Property(e => e.export_path)
                .IsUnicode(false);

            modelBuilder.Entity<shipserv_tradenet_export>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipserv_tradenet_export>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shipto_carrier>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<shipto_carrier>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipto_carrier>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipto_carrier>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipto_carrier>()
                .Property(e => e.default_carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shipto_carrier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<shopper>()
                .Property(e => e.default_ship2_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shopper>()
                .HasMany(e => e.oe_contacts_customer)
                .WithRequired(e => e.shopper)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<shopping_cart_allocation>()
                .Property(e => e.web_reference_no)
                .IsUnicode(false);

            modelBuilder.Entity<shopping_cart_allocation>()
                .Property(e => e.source_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<shopping_cart_allocation>()
                .Property(e => e.requested_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shopping_cart_allocation>()
                .Property(e => e.allocated_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<shopping_cart_allocation>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<shopping_cart_allocation>()
                .Property(e => e.component_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<shopping_cart_allocation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<shopping_cart_allocation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<sic>()
                .Property(e => e.sic_code)
                .HasPrecision(6, 0);

            modelBuilder.Entity<sic>()
                .Property(e => e.sic_description)
                .IsUnicode(false);

            modelBuilder.Entity<sic>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<sic>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<signature_capture>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<signature_capture>()
                .Property(e => e.signature_data)
                .IsUnicode(false);

            modelBuilder.Entity<signature_capture>()
                .Property(e => e.recipient_name)
                .IsUnicode(false);

            modelBuilder.Entity<signature_capture>()
                .Property(e => e.stores_image_path_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<signature_capture>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<signature_capture>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<siop_whitelist>()
                .Property(e => e.siop_category)
                .IsUnicode(false);

            modelBuilder.Entity<siop_whitelist>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<siop_whitelist>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<siop_whitelist>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<skid_consolidation>()
                .Property(e => e.skid_package_cd)
                .IsUnicode(false);

            modelBuilder.Entity<skid_consolidation>()
                .Property(e => e.box_package_cd)
                .IsUnicode(false);

            modelBuilder.Entity<skid_consolidation>()
                .Property(e => e.transaction_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<skid_consolidation>()
                .Property(e => e.transfer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<skid_consolidation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<skid_consolidation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<skillset>()
                .Property(e => e.skillset_name)
                .IsUnicode(false);

            modelBuilder.Entity<skillset>()
                .Property(e => e.skillset_description)
                .IsUnicode(false);

            modelBuilder.Entity<skillset>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<skillset>()
                .HasMany(e => e.labor_x_skillset)
                .WithRequired(e => e.skillset)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<skillset>()
                .HasMany(e => e.work_order_type_x_skillset)
                .WithRequired(e => e.skillset)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<soa_async_request>()
                .Property(e => e.request_guid)
                .IsUnicode(false);

            modelBuilder.Entity<soa_async_request>()
                .Property(e => e.request_type)
                .IsUnicode(false);

            modelBuilder.Entity<soa_async_request>()
                .Property(e => e.response_key)
                .IsUnicode(false);

            modelBuilder.Entity<soa_async_request>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<soa_async_request>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<soa_async_request>()
                .Property(e => e.request_method)
                .IsUnicode(false);

            modelBuilder.Entity<soa_async_request>()
                .Property(e => e.callback_method)
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.soa_consumer_name)
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.consumer_key)
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.redirect_uri)
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.api_scope)
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.allow_impersonation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.domain_entity_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.consumer_type)
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<soa_consumer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<sort_dragdrop>()
                .Property(e => e.dataobject)
                .IsUnicode(false);

            modelBuilder.Entity<sort_dragdrop>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<sort_dragdrop>()
                .Property(e => e.selected_columns_list)
                .IsUnicode(false);

            modelBuilder.Entity<sort_dragdrop>()
                .Property(e => e.selected_columns_sort)
                .IsUnicode(false);

            modelBuilder.Entity<sort_dragdrop>()
                .Property(e => e.sort_by)
                .IsUnicode(false);

            modelBuilder.Entity<sort_dragdrop>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<sort_dragdrop>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<spa_slots>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<spa_slots>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<spe_parameter_info>()
                .Property(e => e.spe_parameter_description)
                .IsUnicode(false);

            modelBuilder.Entity<spe_parameter_info>()
                .Property(e => e.spe_parameter_example)
                .IsUnicode(false);

            modelBuilder.Entity<spe_parameter_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<spe_parameter_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<spe_parameter_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<spe_procedure_info>()
                .Property(e => e.spe_procedure_description)
                .IsUnicode(false);

            modelBuilder.Entity<spe_procedure_info>()
                .Property(e => e.spe_procedure_example)
                .IsUnicode(false);

            modelBuilder.Entity<spe_procedure_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<spe_procedure_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<spe_procedure_log>()
                .Property(e => e.spe_user)
                .IsUnicode(false);

            modelBuilder.Entity<spe_procedure_log>()
                .Property(e => e.spe_message)
                .IsUnicode(false);

            modelBuilder.Entity<spe_procedure_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.sku_special_inv_layer_qty_recd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.sku_special_inv_layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.sku_special_inv_layer_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.inv_tran_transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.source_document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.source_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.source_sub_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<special_inv_layer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<special_inv_layer>()
                .HasMany(e => e.special_inv_layer_tran)
                .WithRequired(e => e.special_inv_layer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<special_inv_layer_tran>()
                .Property(e => e.inv_tran_transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<special_inv_layer_tran>()
                .Property(e => e.sku_special_inv_layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<special_inv_layer_tran>()
                .Property(e => e.sku_special_inv_layer_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<special_inv_layer_tran>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<special_inv_layer_tran>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ssis_restricted_items_work>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<ssis_restricted_items_work>()
                .Property(e => e.assembly_header)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ssis_restricted_items_work>()
                .Property(e => e.assembly_component)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.stage_code)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.stage_description)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.stage_wip_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.estimated_hours)
                .HasPrecision(6, 2);

            modelBuilder.Entity<stage>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<stage>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<stage>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<stage>()
                .Property(e => e.cost_uom)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.allow_partials)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.po_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.minimum_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<stage>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.stage_qty_uom)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<stage>()
                .Property(e => e.qty_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<stage>()
                .Property(e => e.cost_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<stage>()
                .Property(e => e.all_locations_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<stage>()
                .Property(e => e.stage_po_desc)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.backflush_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.traveler_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.consolidatable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.container_uom)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.container_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.comment_process)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .Property(e => e.comment)
                .IsUnicode(false);

            modelBuilder.Entity<stage>()
                .HasMany(e => e.pool_liner_process_defaults)
                .WithRequired(e => e.stage)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<stage>()
                .HasMany(e => e.pool_liner_processing)
                .WithRequired(e => e.stage)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<stage>()
                .HasMany(e => e.process_x_transaction_detail)
                .WithRequired(e => e.stage)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<stage>()
                .HasMany(e => e.stage_notepad)
                .WithRequired(e => e.stage)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<stage>()
                .HasMany(e => e.stage_x_process)
                .WithRequired(e => e.stage)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<stage_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<stage_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<stage_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<stage_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<stage_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<stage_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.stage_po_description)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.stage_code)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.stage_description)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.stage_wip_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.estimated_hours)
                .HasPrecision(6, 2);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.po_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.division_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.cost_uom)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.cost_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.stage_qty_uom)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.qty_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.allow_partials)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.minimum_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.backflush_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.traveler_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.consolidatable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.container_uom)
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.container_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.comment_process)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_x_process>()
                .Property(e => e.comment)
                .IsUnicode(false);

            modelBuilder.Entity<state>()
                .Property(e => e.two_letter_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<state>()
                .Property(e => e.state_name)
                .IsUnicode(false);

            modelBuilder.Entity<state>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<state>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<state>()
                .HasMany(e => e.counties)
                .WithRequired(e => e.state)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<state>()
                .HasMany(e => e.state_alt_loc)
                .WithRequired(e => e.state)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<state>()
                .HasMany(e => e.zip_code)
                .WithRequired(e => e.state)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<state_alt_loc>()
                .Property(e => e.alt_loc_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<state_alt_loc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<state_alt_loc>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<state_mx>()
                .Property(e => e.state_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<state_mx>()
                .Property(e => e.state_name)
                .IsUnicode(false);

            modelBuilder.Entity<state_mx>()
                .Property(e => e.country_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<state_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<state_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<state_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<state_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<statement_frequency>()
                .Property(e => e.statement_frequency_id)
                .IsUnicode(false);

            modelBuilder.Entity<statement_frequency>()
                .Property(e => e.statement_frequency_desc)
                .IsUnicode(false);

            modelBuilder.Entity<statement_frequency>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<statement_frequency>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<statistical_account_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<statistical_account_hdr>()
                .Property(e => e.account_code)
                .IsUnicode(false);

            modelBuilder.Entity<statistical_account_hdr>()
                .Property(e => e.account_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<statistical_account_hdr>()
                .Property(e => e.balance_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<statistical_account_hdr>()
                .Property(e => e.static_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<statistical_account_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<statistical_account_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<statistical_account_hdr>()
                .Property(e => e.year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<statistical_account_hdr>()
                .HasMany(e => e.statistical_account_line)
                .WithRequired(e => e.statistical_account_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<statistical_account_line>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<statistical_account_line>()
                .Property(e => e.period_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<statistical_account_line>()
                .Property(e => e.cumulative_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<statistical_account_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<statistical_account_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<stop>()
                .Property(e => e.recipient_name)
                .IsUnicode(false);

            modelBuilder.Entity<stop>()
                .Property(e => e.signature_filename)
                .IsUnicode(false);

            modelBuilder.Entity<stop>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<stop>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<stop>()
                .Property(e => e.signature_image_data)
                .IsUnicode(false);

            modelBuilder.Entity<stop>()
                .Property(e => e.delivery_photo_data)
                .IsUnicode(false);

            modelBuilder.Entity<stop>()
                .HasMany(e => e.delivery_package)
                .WithRequired(e => e.stop)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<stop>()
                .HasMany(e => e.delivery_rma)
                .WithRequired(e => e.stop)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<store_credit_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<store_credit_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<store_credit_hdr>()
                .Property(e => e.credit_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<store_credit_hdr>()
                .Property(e => e.credit_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<store_credit_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<store_credit_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<store_original_datastream>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<store_original_datastream>()
                .Property(e => e.file_type)
                .IsUnicode(false);

            modelBuilder.Entity<store_original_datastream>()
                .Property(e => e.form_type)
                .IsUnicode(false);

            modelBuilder.Entity<store_original_datastream>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<store_original_datastream>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<stored_procedure_arg>()
                .Property(e => e.stored_procedure_arg_name)
                .IsUnicode(false);

            modelBuilder.Entity<stored_procedure_arg>()
                .Property(e => e.stored_procedure_arg_value)
                .IsUnicode(false);

            modelBuilder.Entity<stored_procedure_arg>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<stored_procedure_arg>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<stored_procedure_def>()
                .Property(e => e.stored_procedure)
                .IsUnicode(false);

            modelBuilder.Entity<stored_procedure_def>()
                .Property(e => e.stored_procedure_description)
                .IsUnicode(false);

            modelBuilder.Entity<stored_procedure_def>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<stored_procedure_def>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<stored_procedure_def>()
                .HasMany(e => e.stored_procedure_arg)
                .WithRequired(e => e.stored_procedure_def)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<strat_price_factor_detail>()
                .Property(e => e.factor_very_tiny)
                .HasPrecision(19, 9);

            modelBuilder.Entity<strat_price_factor_detail>()
                .Property(e => e.factor_tiny)
                .HasPrecision(19, 9);

            modelBuilder.Entity<strat_price_factor_detail>()
                .Property(e => e.factor_small)
                .HasPrecision(19, 9);

            modelBuilder.Entity<strat_price_factor_detail>()
                .Property(e => e.factor_medium)
                .HasPrecision(19, 9);

            modelBuilder.Entity<strat_price_factor_detail>()
                .Property(e => e.factor_large)
                .HasPrecision(19, 9);

            modelBuilder.Entity<strat_price_factor_detail>()
                .Property(e => e.factor_huge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<strat_price_factor_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<strat_price_factor_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<strat_price_factor_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<strat_price_factor_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<strat_price_factor_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_invoice>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_invoice>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<strategic_pricing_invoice>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_invoice>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_oe_info>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_oe_info>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<strategic_pricing_oe_info>()
                .Property(e => e.library_changed_by)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_oe_info>()
                .Property(e => e.old_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<strategic_pricing_oe_info>()
                .Property(e => e.new_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<strategic_pricing_oe_info>()
                .Property(e => e.price_changed_by)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_oe_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_oe_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.strategic_pricing_role_desc)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.allow_edit_customer_data_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.change_pricing_library_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.allow_frght_chrg_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.allow_free_freight_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.allow_edit_core_status_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.price_edit_pct_down)
                .HasPrecision(19, 0);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.price_edit_oth_chrg_pct_down)
                .HasPrecision(19, 0);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.price_edit_pct_up)
                .HasPrecision(19, 0);

            modelBuilder.Entity<strategic_pricing_role>()
                .Property(e => e.price_edit_oth_chrg_pct_up)
                .HasPrecision(19, 0);

            modelBuilder.Entity<strategic_pricing_role>()
                .HasMany(e => e.price_override_exception)
                .WithRequired(e => e.strategic_pricing_role)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<summary_invoice_daily>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<summary_invoice_daily>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<summary_invoice_daily>()
                .Property(e => e.summary_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_invoice_daily>()
                .Property(e => e.summary_amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_invoice_daily>()
                .Property(e => e.summary_shipping_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_invoice_monthly>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<summary_invoice_monthly>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<summary_invoice_monthly>()
                .Property(e => e.summary_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_invoice_monthly>()
                .Property(e => e.summary_amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_invoice_monthly>()
                .Property(e => e.summary_shipping_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_po_loc_daily>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<summary_po_loc_daily>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<summary_po_loc_daily>()
                .Property(e => e.summary_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<summary_po_loc_monthly>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<summary_po_loc_monthly>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<summary_po_loc_monthly>()
                .Property(e => e.summary_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<summary_sales_daily>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<summary_sales_daily>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<summary_sales_daily>()
                .Property(e => e.summary_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_sales_daily>()
                .Property(e => e.summary_sales_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_sales_daily>()
                .Property(e => e.summary_commission_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_sales_daily>()
                .Property(e => e.summary_other_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_sales_monthly>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<summary_sales_monthly>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<summary_sales_monthly>()
                .Property(e => e.summary_value)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_sales_monthly>()
                .Property(e => e.summary_sales_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_sales_monthly>()
                .Property(e => e.summary_commission_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<summary_sales_monthly>()
                .Property(e => e.summary_other_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<supplier>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.days_early)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier>()
                .Property(e => e.days_late)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.control_value)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.target_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.review_cycle)
                .HasPrecision(3, 0);

            modelBuilder.Entity<supplier>()
                .Property(e => e.default_carrier)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier>()
                .Property(e => e.default_shipping_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.average_lead_time)
                .HasPrecision(3, 0);

            modelBuilder.Entity<supplier>()
                .Property(e => e.lead_time_source)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.lead_time_safety_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<supplier>()
                .Property(e => e.safety_stock_days)
                .HasPrecision(19, 4);

            modelBuilder.Entity<supplier>()
                .Property(e => e.fct)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier>()
                .Property(e => e.supplier_name)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.rma_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.tpcx_rationalized)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.freight_control_value)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.freight_target_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.dea_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.dea_number)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.ddd_report)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.legacy_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.parker_division_cd)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.parker_supplier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.combine_stock_ns_special_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.service_level_pct_goal)
                .HasPrecision(19, 2);

            modelBuilder.Entity<supplier>()
                .Property(e => e.use_containers_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.container_volume)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.container_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.po_approval_threshold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.print_po_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.fax_po_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.email_po_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.edi_po_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.restrict_pedigree_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.pall_supplier_number)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.restrict_otf_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.serial_tracking_option)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.terms_discount_excluded_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.weekly_truck_allowed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.freight_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.min_freight_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.parker_hannafin_supplier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.parker_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.rcd_supplier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.surcharge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.use_qty_rdy_for_cont_build)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.fidelitone_supplier_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.default_servicebench_supplier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.default_po_packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.supplier_redemption_email)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.supplier_redemption_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.export_order_info_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.minimum_process_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.bulk_discount_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.bulk_contract_number_list)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.do_not_auto_create_returns_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.do_not_create_unapproved_po_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.deviation_mult_one_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.deviation_mult_two_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.deviation_mult_three_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.crit_item_deviation_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.crit_min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.crit_max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier>()
                .Property(e => e.excl_send_linked_info_to_rfnav_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.asb_call_criteria)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.commission_rule)
                .WithOptional(e => e.supplier)
                .HasForeignKey(e => e.primary_supplier_id);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.commission_rule1)
                .WithOptional(e => e.supplier1)
                .HasForeignKey(e => e.supplier_id);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.contacts_x_supplier)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.custom_column_data_supplier)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.customer_supplier)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.demand_line_point)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.dispatcher_pricing_dtl)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.divisions)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.gpor_supplier_pending_log)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.inv_loc_price_protection)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.loans)
                .WithRequired(e => e.supplier)
                .HasForeignKey(e => e.funding_source)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.location_supplier)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.multi_po_asn_hdr)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.opportunity_supplier)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.prod_order_line_component)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.rewards_program)
                .WithOptional(e => e.supplier)
                .HasForeignKey(e => e.rebate_supplier_id);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_pricing_detail)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_1348)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasOptional(e => e.supplier_194)
                .WithRequired(e => e.supplier);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_attribute_group)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_dealer_warr_dtl)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_failure_code)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_fascor_wms)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_form_template)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_group_line)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_item_conversion)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_lead_time)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_list_price)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_lot)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_nickname)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_notepad)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_notification_method)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_po_disc_group)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_price_protection)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_pricing)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_purchase_info)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_serial_template)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_surcharge)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_trade)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_weekly_truck_freight)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_x_restricted_class)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_x_rewards_program)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.supplier_zip_codes)
                .WithRequired(e => e.supplier)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.tag_detail)
                .WithRequired(e => e.supplier)
                .HasForeignKey(e => e.tag_supplier_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier>()
                .HasMany(e => e.tpcx_trading_partner)
                .WithOptional(e => e.supplier)
                .HasForeignKey(e => e.trading_partner_cd);

            modelBuilder.Entity<supplier_1348>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_1348>()
                .Property(e => e.apply_disc_from_supplier_list)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_1348>()
                .Property(e => e.discount1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_1348>()
                .Property(e => e.discount2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_1348>()
                .Property(e => e.discount3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_1348>()
                .Property(e => e.discount4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_1348>()
                .Property(e => e.discount5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_1348>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_1348>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_194>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_194>()
                .Property(e => e.bb_manufacturer_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_194>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_194>()
                .Property(e => e.exclude_from_lead_time)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_194>()
                .Property(e => e.exclude_from_core_processing)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_attribute_group>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_attribute_group>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_attribute_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.type)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.misc_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.per)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e._operator)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.per_value)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.ratelinx)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.stockable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.misc_charge_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.break10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .Property(e => e.calculation_value10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_charges>()
                .HasMany(e => e.oe_line_supplier_charges)
                .WithRequired(e => e.supplier_charges)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier_claim_detail>()
                .Property(e => e.supplier_claim_detail_desc)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_claim_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_claim_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_claim_detail>()
                .HasMany(e => e.supplier_dealer_warr_dtl)
                .WithRequired(e => e.supplier_claim_detail)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier_dealer_warr_dtl>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_dealer_warr_dtl>()
                .Property(e => e.required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_dealer_warr_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_dealer_warr_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_dealer_warr_dtl>()
                .HasMany(e => e.inv_hdr_x_supplier_detail)
                .WithRequired(e => e.supplier_dealer_warr_dtl)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier_failure_code>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_failure_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_failure_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_fascor_wms>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_fascor_wms>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_fascor_wms>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_form_template>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_form_template>()
                .Property(e => e.purchase_order_filename)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_form_template>()
                .Property(e => e.inv_return_filename)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_form_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_form_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_group_hdr>()
                .Property(e => e.supplier_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_group_hdr>()
                .Property(e => e.supplier_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_group_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_group_hdr>()
                .HasMany(e => e.supplier_group_line)
                .WithRequired(e => e.supplier_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<supplier_group_line>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_group_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_group_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_group_line>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_item_conversion>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_item_conversion>()
                .Property(e => e.from_uom)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_item_conversion>()
                .Property(e => e.to_uom)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_item_conversion>()
                .Property(e => e.round_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_item_conversion>()
                .Property(e => e.override_unitconv_purc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_item_conversion>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_item_conversion>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_lead_time>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_lead_time>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_lead_time>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_lead_time>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_lead_time>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_list_price>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_list_price>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_list_price>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_list_price>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_list_price>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_list_price>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_lot>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_lot>()
                .Property(e => e.thirty_day_month_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_lot>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_lot>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_lot>()
                .Property(e => e.shelf_life_guar_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_nickname>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_nickname>()
                .Property(e => e.supplier_nickname1)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_nickname>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_nickname>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_notepad>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notification_method>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_notification_method>()
                .Property(e => e.packing_list_email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notification_method>()
                .Property(e => e.packing_list_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notification_method>()
                .Property(e => e.packing_list_fax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notification_method>()
                .Property(e => e.packing_list_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notification_method>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_notification_method>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.purchase_discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.review_cycle)
                .HasPrecision(3, 0);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.lead_time_source)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.lead_time_safety_factor)
                .HasPrecision(19, 4);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.average_lead_time)
                .HasPrecision(3, 0);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.target_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.control_value)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_po_disc_group>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_po_rcpt_issue_msg>()
                .Property(e => e.issue_message)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_po_rcpt_issue_msg>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_po_rcpt_issue_msg>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_po_rcpt_issue_msg>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_po_rcpt_issue_msg>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_po_rcpt_issue_msg>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_price_protection>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_price_protection>()
                .Property(e => e.price_protection_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_price_protection>()
                .Property(e => e.do_not_protect_unrcvd_rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_price_protection>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_price_protection>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_pricing>()
                .Property(e => e.pricing_method)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing>()
                .Property(e => e.source_price)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_pricing>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing_detail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing_detail>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_pricing_detail>()
                .Property(e => e.purchase_price_library_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing_detail>()
                .Property(e => e.sequence_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_pricing_detail>()
                .Property(e => e.inactive)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing_detail>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_pricing_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_purchase_info>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_purchase_info>()
                .Property(e => e.po_cost_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_purchase_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_purchase_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_serial_template>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_serial_template>()
                .Property(e => e.serial_template)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_serial_template>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_serial_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_serial_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_surcharge>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_surcharge>()
                .Property(e => e.product_percent)
                .HasPrecision(9, 4);

            modelBuilder.Entity<supplier_surcharge>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_surcharge>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_trade>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_trade>()
                .Property(e => e.nafta_tax_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_trade>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_trade>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_weekly_truck_freight>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_weekly_truck_freight>()
                .Property(e => e.min_freight_in_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_weekly_truck_freight>()
                .Property(e => e.unit_id)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_weekly_truck_freight>()
                .Property(e => e.unit_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_weekly_truck_freight>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_weekly_truck_freight>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_x_restricted_class>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_x_restricted_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_x_restricted_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_x_rewards_program>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_x_rewards_program>()
                .Property(e => e.coop_dollar_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_x_rewards_program>()
                .Property(e => e.incentive_points_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<supplier_x_rewards_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_x_rewards_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_x_rewards_program>()
                .Property(e => e.exclude_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<supplier_zip_codes>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<supplier_zip_codes>()
                .Property(e => e.start_zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_zip_codes>()
                .Property(e => e.end_zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_zip_codes>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_zip_codes>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<support_sql>()
                .Property(e => e.view_name)
                .IsUnicode(false);

            modelBuilder.Entity<support_sql>()
                .Property(e => e.where_clause)
                .IsUnicode(false);

            modelBuilder.Entity<support_sql>()
                .Property(e => e.support_sql1)
                .IsUnicode(false);

            modelBuilder.Entity<support_sql>()
                .Property(e => e.p21_baseline)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<support_sql>()
                .Property(e => e.order_by_clause)
                .IsUnicode(false);

            modelBuilder.Entity<support_sql_column_detail>()
                .Property(e => e.column_label)
                .IsUnicode(false);

            modelBuilder.Entity<support_sql_column_detail>()
                .Property(e => e.column_token)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_audit_trail>()
                .Property(e => e.swisslog_transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_audit_trail>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_audit_trail>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_audit_trail>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_audit_trail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_audit_trail>()
                .Property(e => e.updated_via)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_confirmation>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<swisslog_confirmation>()
                .Property(e => e.port_id)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_confirmation>()
                .Property(e => e.order_tu_id)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_confirmation>()
                .Property(e => e.printer_name)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_confirmation>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_confirmation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_confirmation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.sku_qty_moved)
                .HasPrecision(19, 9);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.reason_code)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.reason_text)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_inventory_deviation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.transaction_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.transaction_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.sku_quantity)
                .HasPrecision(19, 6);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.p21_process_status)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.swisslog_process_status)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<swisslog_transaction>()
                .Property(e => e.updated_via)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.transaction_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.transaction_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.sku_quantity)
                .HasPrecision(19, 6);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.p21_process_status)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.swisslog_process_status)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.updated_via)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<swisslog_transaction_deleted>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<sys_params_p21>()
                .Property(e => e.module)
                .IsUnicode(false);

            modelBuilder.Entity<sys_params_p21>()
                .Property(e => e.sys_param_name)
                .IsUnicode(false);

            modelBuilder.Entity<sys_params_p21>()
                .Property(e => e.sys_param_value)
                .IsUnicode(false);

            modelBuilder.Entity<sys_params_p21>()
                .Property(e => e.sys_param_data_type)
                .IsUnicode(false);

            modelBuilder.Entity<sys_params_p21>()
                .Property(e => e.sys_param_description)
                .IsUnicode(false);

            modelBuilder.Entity<sys_params_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<system_alerts>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<system_alerts>()
                .Property(e => e.subject)
                .IsUnicode(false);

            modelBuilder.Entity<system_alerts>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<system_alerts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.security_active)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.comp_sec_active)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.last_modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.help_directory)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.no_of_retries)
                .HasPrecision(19, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.set_up_mode)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.inventory_module_installed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.used_in_us)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.foreign_currency)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.revenue_by_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.ap_module_installed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.ar_module_installed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.oe_module_installed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.po_module_installed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.prod_ord_module_installed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.jc_module_installed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.multi_lingual)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.currency_mask)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.number_of_sigs)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.sig1_path)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.sig2_path)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.printer_dpi)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.default_period)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.default_year)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.coa_mask_compliance)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.amount_req_two_sigs)
                .HasPrecision(19, 4);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.validate_cust_contacts_on_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.default_backorder_qty)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.calc_backorder_in_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.print_detail_on_checkstub)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.gl_intercompany_functionality)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.ap_intercompany_functionality)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.database_version)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.fire_gl_trigger)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.logo_path)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.use_billing_address)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.use_payable_groups)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.use_receivable_groups)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.commission_module_installed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.use_enter_key)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.character_sensitive_popups)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.default_previous_period_year)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.display_update_was_successful)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.buyer_only_to_place_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.using_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.sales_pricing_method)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.tab_sec_active)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.branch_sec_active)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.reserved1)
                .HasPrecision(1, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.job_id_mask)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.character_specific_popups)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.num_of_dec_places_unit_price)
                .HasPrecision(1, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.num_of_dec_places_unit_cost)
                .HasPrecision(1, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.min_char_for_char_specific)
                .HasPrecision(2, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.keystroke_for_popups)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.keystroke_for_new_line_item)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.mail_module_installed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.security_method)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.system_parameter_uid)
                .HasPrecision(19, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.oe_print_qty)
                .HasPrecision(5, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.pick_ticket_print_qty)
                .HasPrecision(5, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.invoice_print_qty)
                .HasPrecision(5, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.po_print_qty)
                .HasPrecision(5, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.transfer_print_qty)
                .HasPrecision(5, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.statement_print_qty)
                .HasPrecision(5, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.quote_print_qty)
                .HasPrecision(5, 0);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.crystal_directory)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.enable_fax)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.fax_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.voucher_entry_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.cr_dr_memo_entry_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.invoice_entry_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.misc_cash_receipts_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.cash_receipts_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.journal_entries_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.inv_transfer_rec_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.inv_adj_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.transfer_entry_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.physical_count_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.order_entry_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.rma_entry_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.prod_order_entry_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.process_prod_order_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.purchase_order_entry_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.convert_po_voucher_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.repetitive_jrn_entry_approvals)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.message_log_file_path)
                .IsUnicode(false);

            modelBuilder.Entity<system_parameters>()
                .Property(e => e.script_path)
                .IsUnicode(false);

            modelBuilder.Entity<system_setting>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<system_setting>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<system_setting>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail>()
                .Property(e => e.tag_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tag_detail>()
                .Property(e => e.tag_pkg_uom)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail>()
                .Property(e => e.tag_pkg_uom_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tag_detail>()
                .Property(e => e.tag_qty_per_pkg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail>()
                .Property(e => e.tag_total_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail>()
                .Property(e => e.tag_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.childs_parent_tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.bin_cd_before)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.bin_cd_after)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.top_parent_tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_pkg_uom)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_pkg_uom_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_qty_per_pkg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_qty_allocated_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_qty_allocated_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_qty_allocated_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_total_qty_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_total_qty_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.tag_total_qty_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.sql_current_user)
                .IsUnicode(false);

            modelBuilder.Entity<tag_detail_audit>()
                .Property(e => e.action_type)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_quality_cd)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_pkg_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_pkg_uom)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_pkg_uom_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_qty_per_pkg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_sku_qty_to_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_sku_qty_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_weight_change)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_volume_change)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_parent_tag)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_parent_tag_pkg_type)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_top_parent_tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_top_parent_pkg_type)
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.tdl_rf_sku_qty_picked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_document_line>()
                .Property(e => e.wwms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tag_document_line>()
                .HasMany(e => e.tag_detail)
                .WithRequired(e => e.tag_document_line)
                .HasForeignKey(e => e.original_tag_document_line_uid)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tag_document_line>()
                .HasMany(e => e.tag_document_line1)
                .WithOptional(e => e.tag_document_line2)
                .HasForeignKey(e => e.source_tdl_uid);

            modelBuilder.Entity<tag_hdr>()
                .Property(e => e.tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<tag_hdr>()
                .Property(e => e.tag_weight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tag_hdr>()
                .Property(e => e.tag_volume)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tag_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_hdr>()
                .Property(e => e.label_printed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tag_hdr>()
                .HasMany(e => e.rf_terminal_inventory)
                .WithOptional(e => e.tag_hdr)
                .WillCascadeOnDelete();

            modelBuilder.Entity<tag_hdr>()
                .HasMany(e => e.tag_detail)
                .WithRequired(e => e.tag_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tag_hold_class>()
                .Property(e => e.tag_hold_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<tag_hold_class>()
                .Property(e => e.tag_hold_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<tag_hold_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_hold_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_inv_tran_detail>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_inv_tran_detail>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_inv_tran_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_inv_tran_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_inv_tran_hdr>()
                .Property(e => e.weight)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tag_inv_tran_hdr>()
                .Property(e => e.volume)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tag_inv_tran_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_inv_tran_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_picking_criteria>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tag_picking_criteria>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tag_picking_criteria>()
                .Property(e => e.sku_qty_per_pkg)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_picking_criteria>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tag_picking_criteria>()
                .Property(e => e.lot_attribute_value)
                .IsUnicode(false);

            modelBuilder.Entity<tag_picking_criteria>()
                .Property(e => e.sku_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_picking_criteria>()
                .Property(e => e.sku_orig_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tag_picking_criteria>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tag_picking_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<task_area_x_user>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<task_area_x_user>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<task_area_x_user>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_assignee>()
                .Property(e => e.assigned_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_assignee>()
                .Property(e => e.reminder_flag)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_assignee>()
                .Property(e => e.activity_trans_no)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_assignee>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_assignee>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_assignee>()
                .Property(e => e.create_outlook_task_flag)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_contact>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_contact>()
                .Property(e => e.link_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<task_auxiliary_contact>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_contact>()
                .Property(e => e.activity_trans_no)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_contact>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<task_auxiliary_contact>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list>()
                .Property(e => e.tax_exception_list_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list>()
                .HasMany(e => e.tax_exception_list_x_inv_mast)
                .WithRequired(e => e.tax_exception_list)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_exception_list>()
                .HasMany(e => e.tax_exception_list_x_ship_to)
                .WithRequired(e => e.tax_exception_list)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_exception_list_x_inv_mast>()
                .Property(e => e.taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list_x_inv_mast>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list_x_inv_mast>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list_x_ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list_x_ship_to>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tax_exception_list_x_ship_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list_x_ship_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exception_list_x_ship_to>()
                .Property(e => e.ship_to_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_exempt_reason>()
                .Property(e => e.tax_exempt_reason1)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exempt_reason>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exempt_reason>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exemption_dtl>()
                .Property(e => e.rental_invoices_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_exemption_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exemption_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exemption_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exemption_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tax_exemption_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tax_exemption_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exemption_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_exemption_hdr>()
                .HasMany(e => e.tax_exemption_dtl)
                .WithRequired(e => e.tax_exemption_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_group_hdr>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr>()
                .Property(e => e.tax_group_description)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr>()
                .Property(e => e.override_fc_tax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.cust_defaults)
                .WithOptional(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id });

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.customer_vat)
                .WithOptional(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id });

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.freight_code)
                .WithOptional(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id });

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.inv_mast_default)
                .WithOptional(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id });

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.oe_hdr_vat)
                .WithOptional(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id });

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.prodorder_technician)
                .WithRequired(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.product_group)
                .WithOptional(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id });

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.service_labor_x_tax_group_hdr)
                .WithRequired(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.ship_to_vat)
                .WithOptional(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id });

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.tax_group_hdr_zip)
                .WithRequired(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_group_hdr>()
                .HasMany(e => e.tax_group_line)
                .WithRequired(e => e.tax_group_hdr)
                .HasForeignKey(e => new { e.tax_group_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_group_hdr_zip>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr_zip>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr_zip>()
                .Property(e => e.start_zip_cd)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr_zip>()
                .Property(e => e.end_zip_cd)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr_zip>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_hdr_zip>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_line>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_line>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_line>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_line>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_group_line>()
                .Property(e => e.taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_integration_error_log>()
                .Property(e => e.error_code)
                .IsUnicode(false);

            modelBuilder.Entity<tax_integration_error_log>()
                .Property(e => e.error_description)
                .IsUnicode(false);

            modelBuilder.Entity<tax_integration_error_log>()
                .Property(e => e.error_location_path)
                .IsUnicode(false);

            modelBuilder.Entity<tax_integration_error_log>()
                .Property(e => e.host_request_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_integration_error_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_integration_error_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_juris_date_range>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_juris_date_range>()
                .Property(e => e.tax_amount_per)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tax_juris_date_range>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_juris_date_range>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.jurisdiction_desc)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.tax_percentage)
                .HasPrecision(19, 8);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.line_item_limit)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.invoice_limit)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.freight_in_taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.freight_out_taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.tax_is_taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.tax_amount_per_unit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.after_units)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.after_maximum_units)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.see_schedule)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.tax_on_gross_net_qty_invoiced)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.calculate_tax_method)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.line_item_limit_or_range)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.min_line_item_range)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.max_line_item_range)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.incoming_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.outgoing_freight)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.tax_terms_taken_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.other_charge_freight_taxable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.tax_before_after_restock_fee)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.order_limit)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.vat_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.eco_fees_taxable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.freight_iva_withheld_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.rental_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.ioss_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.ioss_limit_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.flat_fee_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tax_jurisdiction>()
                .Property(e => e.apply_flat_fee_to_linked_rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.inv_mast_eco_fee)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.invoice_hdr_x_tax_juris_manual)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.invoice_line_taxes)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.invoice_line_taxes_perunit)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.jurisdiction_acct)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.jurisdiction_tax_is_taxable)
                .WithRequired(e => e.tax_jurisdiction)
                .HasForeignKey(e => e.jurisdiction_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.jurisdiction_tax_is_taxable1)
                .WithRequired(e => e.tax_jurisdiction1)
                .HasForeignKey(e => e.taxing_jurisdiction_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.location_jurisdiction)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.oe_line_service_labor_tax)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.oe_line_tax)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.ship_to_eco_fee)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.tax_group_line)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.tax_juris_date_range)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.tax_jurisdiction_schedule)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction>()
                .HasMany(e => e.tax_jurisdiction_x_tax_mx)
                .WithRequired(e => e.tax_jurisdiction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_jurisdiction_schedule>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction_schedule>()
                .Property(e => e.minimum_units)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tax_jurisdiction_schedule>()
                .Property(e => e.taxed_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<tax_jurisdiction_schedule>()
                .Property(e => e.taxed_based_on)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction_schedule>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction_x_tax_mx>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction_x_tax_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_jurisdiction_x_tax_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.tax_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.tax_desc)
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.isr_tax_withheld_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.isr_tax_transferred_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.local_or_federal)
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.state_validity)
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<tax_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<tax_mx>()
                .HasMany(e => e.tax_jurisdiction_x_tax_mx)
                .WithRequired(e => e.tax_mx)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tax_regime_mx>()
                .Property(e => e.tax_regime_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_regime_mx>()
                .Property(e => e.tax_regime_desc)
                .IsUnicode(false);

            modelBuilder.Entity<tax_regime_mx>()
                .Property(e => e.use_for_person_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_regime_mx>()
                .Property(e => e.use_for_company_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tax_regime_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_regime_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tax_regime_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<tax_regime_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<technician_clockinout>()
                .Property(e => e.technician_id)
                .IsUnicode(false);

            modelBuilder.Entity<technician_clockinout>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<technician_clockinout>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<technician_clockinout>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<technician_clockinout>()
                .HasMany(e => e.technician_clockinout_detail)
                .WithRequired(e => e.technician_clockinout)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<technician_clockinout_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<technician_clockinout_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<technician_clockinout_pause>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<technician_clockinout_pause>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<technician_default_shift>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<technician_default_shift>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_rents)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_royalties)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_other_income)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_fit_wh)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_fishing_boat_proceeds)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_medical_and_healthcare)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_non_employee_compensation)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_crop_insurance_proceeds)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_substitute_payments)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_excess_golden_parachute)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_rents)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_royalities)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_other_income)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_fit_wh)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_fishing_boat_proceeds)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_medical_and_healthcare)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_non_employee_compensation)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_crop_insurance_proceeds)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_substitute_payments)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_excess_golden_parachute)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_cash_liquidations)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_ordindary_dividends)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_cash_liquidations)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_ordindary_dividends)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_attorney_proceeds)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_attorney_proceeds)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.old_qualified_dividends)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_audit_trail>()
                .Property(e => e.new_qualified_dividends)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.vendor_id)
                .HasPrecision(18, 0);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.rents)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.royalties)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.other_income)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.fit_wh)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.fishing_boat_proceeds)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.medical_and_healthcare)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.non_employee_compensation)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.crop_insurance_proceeds)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.substitute_payments)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.excess_golden_parachute)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.cash_liquidations)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.ordindary_dividends)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.attorney_proceeds)
                .HasPrecision(19, 4);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.interest_income)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.isr_tax_withheld)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ten99_balances>()
                .Property(e => e.qualified_dividends)
                .HasPrecision(19, 9);

            modelBuilder.Entity<term_x_language>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<term_x_language>()
                .Property(e => e.translated_term)
                .IsUnicode(false);

            modelBuilder.Entity<term_x_language>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<term_x_language>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.terms_desc)
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.discount_pct)
                .HasPrecision(19, 4);

            modelBuilder.Entity<term>()
                .Property(e => e.discount_days)
                .HasPrecision(3, 0);

            modelBuilder.Entity<term>()
                .Property(e => e.net_days)
                .HasPrecision(3, 0);

            modelBuilder.Entity<term>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.day_of_month)
                .HasPrecision(2, 0);

            modelBuilder.Entity<term>()
                .Property(e => e.months)
                .HasPrecision(2, 0);

            modelBuilder.Entity<term>()
                .Property(e => e.terms_day_of_month)
                .HasPrecision(2, 0);

            modelBuilder.Entity<term>()
                .Property(e => e.terms_months)
                .HasPrecision(2, 0);

            modelBuilder.Entity<term>()
                .Property(e => e.net_day_of_month2)
                .HasPrecision(2, 0);

            modelBuilder.Entity<term>()
                .Property(e => e.terms_day_of_month2)
                .HasPrecision(2, 0);

            modelBuilder.Entity<term>()
                .Property(e => e.downpayment_pct)
                .HasPrecision(19, 4);

            modelBuilder.Entity<term>()
                .Property(e => e.use_current_month_net_day)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.use_current_month_terms_day)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.creditcard_required_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.cash_discount_eligible_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.merch_credit_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.exclude_direct_shipment_terms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.direct_shipment_terms_desc)
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .Property(e => e.otf_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<term>()
                .HasMany(e => e.cust_defaults)
                .WithOptional(e => e.term)
                .HasForeignKey(e => e.service_terms_id);

            modelBuilder.Entity<term>()
                .HasMany(e => e.cust_defaults1)
                .WithOptional(e => e.term1)
                .HasForeignKey(e => e.terms_id);

            modelBuilder.Entity<term>()
                .HasMany(e => e.customers)
                .WithOptional(e => e.term)
                .HasForeignKey(e => e.service_terms_id);

            modelBuilder.Entity<term>()
                .HasMany(e => e.customer_cons_inv_cardlock)
                .WithRequired(e => e.term)
                .HasForeignKey(e => e.consolidated_terms_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<term>()
                .HasMany(e => e.customer_terms)
                .WithRequired(e => e.term)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<term>()
                .HasMany(e => e.installment_plan_discount_pct)
                .WithRequired(e => e.term)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<term>()
                .HasMany(e => e.installment_plans_10005)
                .WithRequired(e => e.term)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<term>()
                .HasMany(e => e.oe_hdr)
                .WithOptional(e => e.term)
                .HasForeignKey(e => e.terms);

            modelBuilder.Entity<term>()
                .HasMany(e => e.ship_to)
                .WithOptional(e => e.term)
                .HasForeignKey(e => e.service_terms_id);

            modelBuilder.Entity<term>()
                .HasMany(e => e.terms_user_defined_days)
                .WithRequired(e => e.term)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<term>()
                .HasMany(e => e.terms_x_customer)
                .WithRequired(e => e.term)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<term>()
                .HasMany(e => e.vendors)
                .WithOptional(e => e.term)
                .HasForeignKey(e => e.default_terms_id);

            modelBuilder.Entity<terms_user_defined_days>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<terms_user_defined_days>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<terms_user_defined_days>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<terms_x_customer>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<terms_x_customer>()
                .Property(e => e.customer_terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<terms_x_customer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<terms_x_customer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory>()
                .Property(e => e.territory_id)
                .IsUnicode(false);

            modelBuilder.Entity<territory>()
                .Property(e => e.territory_desc)
                .IsUnicode(false);

            modelBuilder.Entity<territory>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory>()
                .Property(e => e.credit_manager_id)
                .IsUnicode(false);

            modelBuilder.Entity<territory>()
                .HasMany(e => e.territory_x_customer)
                .WithRequired(e => e.territory)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<territory>()
                .HasMany(e => e.territory_x_ship_to)
                .WithRequired(e => e.territory)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<territory>()
                .HasMany(e => e.territory_x_territory_grp)
                .WithRequired(e => e.territory)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<territory_grp>()
                .Property(e => e.territory_grp_id)
                .IsUnicode(false);

            modelBuilder.Entity<territory_grp>()
                .Property(e => e.territory_grp_desc)
                .IsUnicode(false);

            modelBuilder.Entity<territory_grp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory_grp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory_grp>()
                .HasMany(e => e.territory_x_territory_grp)
                .WithRequired(e => e.territory_grp)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<territory_x_customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<territory_x_customer>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<territory_x_customer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory_x_customer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory_x_ship_to>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<territory_x_ship_to>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<territory_x_ship_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory_x_ship_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory_x_territory_grp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<territory_x_territory_grp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<test_data>()
                .Property(e => e.test_data_identifier)
                .IsUnicode(false);

            modelBuilder.Entity<test_data>()
                .Property(e => e.error_messages)
                .IsUnicode(false);

            modelBuilder.Entity<test_data>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<test_data>()
                .HasMany(e => e.test_data_segment)
                .WithRequired(e => e.test_data)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<test_data_hdr>()
                .Property(e => e.test_data_label)
                .IsUnicode(false);

            modelBuilder.Entity<test_data_hdr>()
                .Property(e => e.baseline)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<test_data_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<test_data_hdr>()
                .HasMany(e => e.test_data)
                .WithRequired(e => e.test_data_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<test_data_segment>()
                .Property(e => e.data_segment)
                .IsUnicode(false);

            modelBuilder.Entity<test_data_segment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<test_data_segment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<test_script_hdr>()
                .Property(e => e.test_script_id)
                .IsUnicode(false);

            modelBuilder.Entity<test_script_hdr>()
                .Property(e => e.test_script_description)
                .IsUnicode(false);

            modelBuilder.Entity<test_script_hdr>()
                .Property(e => e.window_tag)
                .IsUnicode(false);

            modelBuilder.Entity<test_script_hdr>()
                .Property(e => e.test_type)
                .IsUnicode(false);

            modelBuilder.Entity<test_script_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<test_script_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<test_script_hdr>()
                .HasMany(e => e.test_script_line)
                .WithRequired(e => e.test_script_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<test_script_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<test_script_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_filetype>()
                .Property(e => e.filetype_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_filetype>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_filetype>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_filetype>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.filetype_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.monday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.tuesday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.wednesday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.thursday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.friday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.saturday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<thirdpartybill_output_file>()
                .Property(e => e.sunday_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<token>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<token>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<token>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<token>()
                .Property(e => e.user_lookup_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<token>()
                .HasMany(e => e.Alert_implementation_query)
                .WithRequired(e => e.token)
                .HasForeignKey(e => e.column_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<token>()
                .HasMany(e => e.alert_type_x_token)
                .WithRequired(e => e.token)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<token>()
                .HasMany(e => e.report_email_subject_x_token)
                .WithRequired(e => e.token)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<topic>()
                .Property(e => e.topic_id)
                .IsUnicode(false);

            modelBuilder.Entity<topic>()
                .Property(e => e.topic_description)
                .IsUnicode(false);

            modelBuilder.Entity<topic>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<topic>()
                .HasMany(e => e.customer_call)
                .WithRequired(e => e.topic)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tos_code>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<tos_code>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<tos_code>()
                .Property(e => e.type_of_sale)
                .IsUnicode(false);

            modelBuilder.Entity<tos_code>()
                .Property(e => e.exclude_from_claim_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tos_code>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tos_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tos_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tos_code>()
                .Property(e => e.net_billing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tos_code>()
                .Property(e => e.track_serials_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_dead_stock>()
                .Property(e => e.tpcx_item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_dead_stock>()
                .Property(e => e.tpcx_upc_cd)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_dead_stock>()
                .Property(e => e.tpcx_qty_available)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tpcx_dead_stock>()
                .Property(e => e.tpcx_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tpcx_dead_stock>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_dead_stock>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_disconnected_transaction>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_disconnected_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_disconnected_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_inbound_document>()
                .Property(e => e.document_preview)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_inbound_document>()
                .Property(e => e.handler_name)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_inbound_document>()
                .Property(e => e.handler_message)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_inbound_document>()
                .Property(e => e.full_document)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_inbound_document>()
                .Property(e => e.response_document)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_inbound_document>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_inbound_document>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_inbound_document>()
                .Property(e => e.transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_outbound_document>()
                .Property(e => e.application_server_location)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_outbound_document>()
                .Property(e => e.message_type)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_outbound_document>()
                .Property(e => e.queue_name)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_outbound_document>()
                .Property(e => e.error_message)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_outbound_document>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_outbound_document>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_outbound_document>()
                .Property(e => e.document_preview)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_outbound_document>()
                .Property(e => e.document)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_trading_partner>()
                .Property(e => e.trading_partner_cd)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tpcx_trading_partner>()
                .Property(e => e.trading_partner_name)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_trading_partner>()
                .Property(e => e.contact_name)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_trading_partner>()
                .Property(e => e.contact_title)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_trading_partner>()
                .Property(e => e.contact_email)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_trading_partner>()
                .Property(e => e.contact_phone_no)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_trading_partner>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_trading_partner>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpcx_trading_partner>()
                .HasMany(e => e.tpcx_dead_stock)
                .WithRequired(e => e.tpcx_trading_partner)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.end_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.end_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.end_customer_contract_number)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.end_customer_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.invoice_number)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.po_number)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.qty_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.pos_uom)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.distributors_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.contract_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.rebate_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_dtl>()
                .Property(e => e.end_customer_sec_salesrep)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_hdr>()
                .Property(e => e.tpw_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tpw_sales_history_hdr>()
                .Property(e => e.tpw_warehouse_id)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_hdr>()
                .Property(e => e.tpw_reference_number)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_hdr>()
                .Property(e => e.home_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<tpw_sales_history_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tpw_sales_history_hdr>()
                .HasMany(e => e.tpw_sales_history_dtl)
                .WithRequired(e => e.tpw_sales_history_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<trackabout_empty_cylinder>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_empty_cylinder>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<trackabout_empty_cylinder>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_empty_cylinder>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.error_message)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.fill_type)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.filled_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.work_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.vendor_type)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_fill>()
                .Property(e => e.purchase_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_log>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_log>()
                .Property(e => e.message)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_log>()
                .Property(e => e.error_message)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_log>()
                .Property(e => e.request_payload)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_log>()
                .Property(e => e.response_payload)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.trackabout_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.trackabout_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.customer_owned_asset)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.agreement_owned_asset)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.rental_method)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.rental_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.rental_class)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.lease_offset_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_cylinder>()
                .Property(e => e.trackabout_item_name)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.trackabout_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.trackabout_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.duration)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.duration_uom)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.rental_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.tag)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.rental_class)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.product_code_name)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.transaction_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_equipment>()
                .Property(e => e.trackabout_item_name)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.trackabout_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.total_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.purchase_order)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.territory)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.rental_message)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.replacement_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_hdr>()
                .Property(e => e.detail_invoice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_lease_renewal>()
                .Property(e => e.trackabout_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_lease_renewal>()
                .Property(e => e.trackabout_lease_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_lease_renewal>()
                .Property(e => e.rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_lease_renewal>()
                .Property(e => e.total)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_lease_renewal>()
                .Property(e => e.lease_asset_id)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_lease_renewal>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_lease_renewal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_balance>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_balance>()
                .Property(e => e.trackabout_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_balance>()
                .Property(e => e.rental_class)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_balance>()
                .Property(e => e.trackabout_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_balance>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_balance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_balance>()
                .Property(e => e.trackabout_item_name)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_rental_class>()
                .Property(e => e.trackabout_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_rental_class>()
                .Property(e => e.rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_line_rental_class>()
                .Property(e => e.rental_method)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_rental_class>()
                .Property(e => e.rental_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trackabout_rental_line_rental_class>()
                .Property(e => e.rental_class)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_rental_class>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_rental_line_rental_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_truck>()
                .Property(e => e.truck_id)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_truck>()
                .Property(e => e.truck_desc)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_truck>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<trackabout_truck>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_truck>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trackabout_truck>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trade_layer>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<trade_layer>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trade_layer>()
                .Property(e => e.layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trade_layer>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<trade_layer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trade_layer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trade_layer>()
                .Property(e => e.line_no)
                .HasPrecision(9, 0);

            modelBuilder.Entity<trade_layer>()
                .Property(e => e.pending_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trade_layer>()
                .HasMany(e => e.trade_layer1)
                .WithOptional(e => e.trade_layer2)
                .HasForeignKey(e => e.source_trade_layer_uid);

            modelBuilder.Entity<trade_layer>()
                .HasMany(e => e.trade_layer_transaction)
                .WithRequired(e => e.trade_layer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<trade_layer_transaction>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trade_layer_transaction>()
                .Property(e => e.transaction_document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<trade_layer_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trade_layer_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trade_layer_transaction>()
                .Property(e => e.pending)
                .HasPrecision(19, 9);

            modelBuilder.Entity<trailer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<trailer>()
                .Property(e => e.trailer_id)
                .IsUnicode(false);

            modelBuilder.Entity<trailer>()
                .Property(e => e.trailer_desc)
                .IsUnicode(false);

            modelBuilder.Entity<trailer>()
                .Property(e => e.trailer_subtype)
                .IsUnicode(false);

            modelBuilder.Entity<trailer>()
                .Property(e => e.license_plate_no)
                .IsUnicode(false);

            modelBuilder.Entity<trailer>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<trailer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trailer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trailer>()
                .HasMany(e => e.cartaporte_hdr_x_trailer)
                .WithRequired(e => e.trailer)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<trane_r12_org>()
                .Property(e => e.org_value)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<trane_r12_org>()
                .Property(e => e.org_desc)
                .IsUnicode(false);

            modelBuilder.Entity<trane_r12_org>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<trane_r12_org>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trane_r12_org>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trans_set_x_xml_dataobject>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension>()
                .Property(e => e.transaction_number)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension>()
                .Property(e => e.gl_dimension_id)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension>()
                .Property(e => e.gl_dimension_desc)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension_audit_trail>()
                .Property(e => e.gl_dimension_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<trans_x_gl_dimension_audit_trail>()
                .Property(e => e.gl_dimension_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<transaction_charge>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transaction_charge>()
                .Property(e => e.document_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transaction_charge>()
                .Property(e => e.charge_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<transaction_charge>()
                .Property(e => e.charge_amount_applied)
                .HasPrecision(19, 4);

            modelBuilder.Entity<transaction_charge>()
                .Property(e => e.document_cd)
                .IsUnicode(false);

            modelBuilder.Entity<transaction_charge>()
                .Property(e => e.modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<transaction_set>()
                .Property(e => e.transaction_set_id)
                .IsUnicode(false);

            modelBuilder.Entity<transaction_set>()
                .Property(e => e.transaction_set_desc)
                .IsUnicode(false);

            modelBuilder.Entity<transaction_set>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transaction_set>()
                .Property(e => e.enablefor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transaction_set>()
                .Property(e => e.allow_xml)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transaction_set>()
                .Property(e => e.edi_transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<transaction_set>()
                .HasMany(e => e.scheduled_import_def)
                .WithRequired(e => e.transaction_set)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transaction_set>()
                .HasMany(e => e.scheduled_import_master)
                .WithRequired(e => e.transaction_set)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transaction_set>()
                .HasMany(e => e.trans_set_x_xml_dataobject)
                .WithRequired(e => e.transaction_set)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transaction_set>()
                .HasMany(e => e.xml_document)
                .WithRequired(e => e.transaction_set)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transfer_backorders>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_backorders>()
                .Property(e => e.destination_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_backorders>()
                .Property(e => e.qty_backordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_backorders>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_backorders>()
                .Property(e => e.po_line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_backorders>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_backorders>()
                .Property(e => e.lock_transaction)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders>()
                .HasMany(e => e.transfer_backorders_detail)
                .WithRequired(e => e.transfer_backorders)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transfer_backorders>()
                .HasMany(e => e.transfer_backorders_notepad)
                .WithRequired(e => e.transfer_backorders)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transfer_backorders_detail>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_backorders_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders_notepad>()
                .Property(e => e.mandatory_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_backorders_notepad>()
                .Property(e => e.transfer_backorders_notepad_uid)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_bin_schedule>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_bin_schedule>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_bin_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_bin_schedule_exception>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_bin_schedule_exception>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_bin_schedule_exception>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.transfer_criteria_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.transfer_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.destination_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.purchase_transfer_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.requirement_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.beg_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.end_supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.beg_abc_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.end_abc_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.beg_purchase_discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.end_purchase_discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.beg_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.end_product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.usage_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.default_unit_of_measure)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.order_point_exception)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.look_ahead_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.safety_stock_days)
                .HasPrecision(19, 4);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.fill_partials)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.available_transfer_qty)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.exclude_due_in_quantity)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.use_replenishment_location)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.include_unfillable_trans_req)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.supplier_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.product_group_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.buyer_specific_transfers_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.supplier_buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.use_drp_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.beg_route_code)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.end_route_code)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.use_transfer_op_oq_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.deviation_mult_one_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.deviation_mult_two_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.deviation_mult_three_pd)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.crit_item_deviation_mult)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.crit_min_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_criteria>()
                .Property(e => e.crit_max_safety_stock_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.from_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.to_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.days)
                .HasPrecision(4, 1);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.create_order_based_transfers)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.mark_up_on_transfers)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.mark_up_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.mark_up_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.source_mark_up_account)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.mark_up_source)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.source_other_charge_account)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.destination_mark_up_acct)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.destination_other_charge_acct)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.auto_generate_transfer_in_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.limit_xfers_to_total_fulfillment)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.uom_conversion_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.aia_point_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.transfer_day_1_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.transfer_day_2_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.transfer_day_3_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.transfer_day_4_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.transfer_day_5_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.transfer_day_6_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.transfer_day_7_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_days>()
                .Property(e => e.exclude_obt_from_trans_sched)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.from_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.to_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.buyer_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.shipped_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.printed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.receipt_year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.receipt_period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.retrieved_by_wms_inbound)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.shipping_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.oe_transfer_reserve_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.omit_transfer_usage_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.slab_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.ship_complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .Property(e => e.created_from_oe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr>()
                .HasMany(e => e.transfer_shipment_hdr)
                .WithRequired(e => e.transfer_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transfer_hdr>()
                .HasMany(e => e.transfer_hdr_notepad)
                .WithRequired(e => e.transfer_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transfer_hdr_notepad>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_hdr_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_hdr_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_hdr_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.qty_to_transfer)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.qty_transferred)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.order_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.qty_reserved)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.sku_other_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.sku_markup)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.line_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.sku_freight_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.units_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.omit_transfer_usage_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.customer_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .Property(e => e.printed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line>()
                .HasMany(e => e.transfer_line_notepad)
                .WithRequired(e => e.transfer_line)
                .HasForeignKey(e => new { e.transfer_no, e.line_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transfer_line_notepad>()
                .Property(e => e.note_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_line_notepad>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_line_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_line_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_schedule_exception>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_schedule_exception>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_schedule_exception>()
                .HasMany(e => e.transfer_bin_schedule_exception)
                .WithRequired(e => e.transfer_schedule_exception)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.carrier_tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.retrieved_by_wms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.print_canadian_b3_forms_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .Property(e => e.sent_to_trackabout_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_hdr>()
                .HasMany(e => e.transfer_shipment_line)
                .WithRequired(e => e.transfer_shipment_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transfer_shipment_line>()
                .Property(e => e.sku_qty_shipped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_shipment_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_shipment_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_line>()
                .Property(e => e.sku_qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transfer_shipment_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_shipment_line>()
                .Property(e => e.country_of_origin)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.transfer_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.package_weight)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.carrier_name)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.total_charge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.handling_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.package_surcharge)
                .HasPrecision(19, 4);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transfer_tracking>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<translation_term>()
                .Property(e => e.native_term)
                .IsUnicode(false);

            modelBuilder.Entity<translation_term>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<translation_term>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<translation_term>()
                .HasMany(e => e.term_x_language)
                .WithRequired(e => e.translation_term)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<transport_shipping_info>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<transport_shipping_info>()
                .Property(e => e.trailer_no)
                .IsUnicode(false);

            modelBuilder.Entity<transport_shipping_info>()
                .Property(e => e.shipment_gross_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<transport_shipping_info>()
                .Property(e => e.internal_transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<transport_shipping_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<transport_shipping_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transport_shipping_info>()
                .Property(e => e.bill_of_lading_no)
                .IsUnicode(false);

            modelBuilder.Entity<transport_shipping_info>()
                .Property(e => e.commercial_invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<transportation_method>()
                .Property(e => e.transportation_method_cd)
                .IsUnicode(false);

            modelBuilder.Entity<transportation_method>()
                .Property(e => e.transportation_method_desc)
                .IsUnicode(false);

            modelBuilder.Entity<transportation_method>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<transportation_method>()
                .HasMany(e => e.invoice_hdr_asn)
                .WithRequired(e => e.transportation_method)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<tripos_instance>()
                .Property(e => e.tripos_instance_id)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_instance>()
                .Property(e => e.tripos_instance_description)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_instance>()
                .Property(e => e.service_url_base)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_instance>()
                .Property(e => e.developer_key1)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_instance>()
                .Property(e => e.developer_secret1)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_instance>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_instance>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_instance>()
                .Property(e => e.service_uri_scheme)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_lane_mapping>()
                .Property(e => e.tripos_instance_id)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_lane_mapping>()
                .Property(e => e.client_workstation_name)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_lane_mapping>()
                .Property(e => e.mapping_description)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_lane_mapping>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<tripos_lane_mapping>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.truck_id)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.truck_desc)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.truck_type)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.license_plate_no)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.model_year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<truck>()
                .Property(e => e.sct_permit_code)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.sct_permit_number)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.insurance_company_name)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.insurance_policy_number)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.environm_insurance_company)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.environm_insurance_policy_num)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.cargo_insurance_company)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.cargo_insurance_policy_num)
                .IsUnicode(false);

            modelBuilder.Entity<truck>()
                .Property(e => e.insurance_additional_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<truck>()
                .HasMany(e => e.cartaporte_hdr)
                .WithRequired(e => e.truck)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.tabpage_text)
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.tab_name)
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.select_on_open)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.use_filter_service)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.use_hscroll)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.use_vscroll)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.use_hsplitscroll)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.use_printpreviewservice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.use_rowfocusindicator)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.use_sortservice)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .Property(e => e.auto_refresh)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage>()
                .HasMany(e => e.ud_tabpage_parameter)
                .WithRequired(e => e.ud_tabpage)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<ud_tabpage_parameter>()
                .Property(e => e.field_name)
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage_parameter>()
                .Property(e => e.datawindow_object)
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage_parameter>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage_parameter>()
                .Property(e => e.retrieval_argument)
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage_parameter>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ud_tabpage_parameter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit>()
                .Property(e => e.unit_name)
                .IsUnicode(false);

            modelBuilder.Entity<unit>()
                .Property(e => e.room)
                .IsUnicode(false);

            modelBuilder.Entity<unit>()
                .Property(e => e.permit_number)
                .IsUnicode(false);

            modelBuilder.Entity<unit>()
                .Property(e => e.permit_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<unit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<unit>()
                .HasMany(e => e.unit_x_udf)
                .WithRequired(e => e.unit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit>()
                .HasMany(e => e.work_order_x_unit)
                .WithRequired(e => e.unit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .Property(e => e.unit_id)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure>()
                .Property(e => e.unit_description)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure>()
                .Property(e => e.display_description)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure>()
                .Property(e => e.repackaging_cost_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<unit_of_measure>()
                .Property(e => e.maritime_uom)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure>()
                .Property(e => e.packaging_unit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure>()
                .Property(e => e.dimension_scale)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.external_count_line)
                .WithRequired(e => e.unit_of_measure1)
                .HasForeignKey(e => e.unit_of_measure)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.inv_alloc_trans)
                .WithRequired(e => e.unit_of_measure)
                .HasForeignKey(e => e.uom)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.inv_xref_230)
                .WithRequired(e => e.unit_of_measure1)
                .HasForeignKey(e => e.unit_of_measure)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.inventory_defaults)
                .WithRequired(e => e.unit_of_measure)
                .HasForeignKey(e => e.sales_pricing_unit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.inventory_supplier)
                .WithOptional(e => e.unit_of_measure)
                .HasForeignKey(e => e.supplier_purchase_unit);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.inventory_supplier1)
                .WithOptional(e => e.unit_of_measure1)
                .HasForeignKey(e => e.dflt_purchase_pricing_unit);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.inventory_supplier2)
                .WithOptional(e => e.unit_of_measure2)
                .HasForeignKey(e => e.dflt_purchase_unit);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.item_package_type)
                .WithRequired(e => e.unit_of_measure)
                .HasForeignKey(e => e.item_package_uom)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.item_uom)
                .WithRequired(e => e.unit_of_measure1)
                .HasForeignKey(e => e.unit_of_measure)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.prod_order_line_component)
                .WithRequired(e => e.unit_of_measure1)
                .HasForeignKey(e => e.unit_of_measure)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page)
                .WithOptional(e => e.unit_of_measure)
                .HasForeignKey(e => e.uom1);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page1)
                .WithOptional(e => e.unit_of_measure1)
                .HasForeignKey(e => e.uom10);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page2)
                .WithOptional(e => e.unit_of_measure2)
                .HasForeignKey(e => e.uom11);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page3)
                .WithOptional(e => e.unit_of_measure3)
                .HasForeignKey(e => e.uom12);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page4)
                .WithOptional(e => e.unit_of_measure4)
                .HasForeignKey(e => e.uom13);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page5)
                .WithOptional(e => e.unit_of_measure5)
                .HasForeignKey(e => e.uom14);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page6)
                .WithOptional(e => e.unit_of_measure6)
                .HasForeignKey(e => e.uom2);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page7)
                .WithOptional(e => e.unit_of_measure7)
                .HasForeignKey(e => e.uom3);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page8)
                .WithOptional(e => e.unit_of_measure8)
                .HasForeignKey(e => e.uom4);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page9)
                .WithOptional(e => e.unit_of_measure9)
                .HasForeignKey(e => e.uom5);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page10)
                .WithOptional(e => e.unit_of_measure10)
                .HasForeignKey(e => e.uom6);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page11)
                .WithOptional(e => e.unit_of_measure11)
                .HasForeignKey(e => e.uom7);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page12)
                .WithOptional(e => e.unit_of_measure12)
                .HasForeignKey(e => e.uom8);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.purchase_pricing_page13)
                .WithOptional(e => e.unit_of_measure13)
                .HasForeignKey(e => e.uom9);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.shopping_cart_allocation)
                .WithRequired(e => e.unit_of_measure1)
                .HasForeignKey(e => e.unit_of_measure)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.stages)
                .WithOptional(e => e.unit_of_measure)
                .HasForeignKey(e => e.cost_uom);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.tax_jurisdiction)
                .WithOptional(e => e.unit_of_measure1)
                .HasForeignKey(e => e.unit_of_measure);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.unit_of_measure_x_integration)
                .WithRequired(e => e.unit_of_measure)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.uom_x_uom_mx)
                .WithRequired(e => e.unit_of_measure)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.vendor_invoice_line)
                .WithOptional(e => e.unit_of_measure1)
                .HasForeignKey(e => e.pricing_unit);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.vendor_invoice_line1)
                .WithOptional(e => e.unit_of_measure2)
                .HasForeignKey(e => e.unit_of_measure);

            modelBuilder.Entity<unit_of_measure>()
                .HasMany(e => e.work_order_item)
                .WithRequired(e => e.unit_of_measure1)
                .HasForeignKey(e => e.unit_of_measure)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure_153>()
                .Property(e => e.unit_id)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_153>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_mx>()
                .Property(e => e.unit_of_measure_cd)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_mx>()
                .Property(e => e.unit_of_measure_name)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_mx>()
                .Property(e => e.unit_of_measure_desc)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_mx>()
                .Property(e => e.unit_symbol)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_mx>()
                .Property(e => e.version_no)
                .HasPrecision(19, 9);

            modelBuilder.Entity<unit_of_measure_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_mx>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_mx>()
                .HasMany(e => e.uom_x_uom_mx)
                .WithRequired(e => e.unit_of_measure_mx)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_of_measure_x_integration>()
                .Property(e => e.unit_id)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_x_integration>()
                .Property(e => e.external_id)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_x_integration>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_x_integration>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_category>()
                .Property(e => e.unit_type_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_category>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_category>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_category>()
                .HasMany(e => e.product_group_x_unit_type_category)
                .WithRequired(e => e.unit_type_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_type_category>()
                .HasMany(e => e.unit_type_master_detail)
                .WithRequired(e => e.unit_type_category)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_type_master_detail>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_master_detail>()
                .Property(e => e.unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<unit_type_master_detail>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<unit_type_master_detail>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<unit_type_master_detail>()
                .Property(e => e.unit_type)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_master_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_master_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_master_hdr>()
                .Property(e => e.property_name)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_master_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_master_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<unit_type_master_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_master_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_type_master_hdr>()
                .HasMany(e => e.unit_type_master_detail)
                .WithRequired(e => e.unit_type_master_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<unit_x_udf>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<unit_x_udf>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<unit_x_udf>()
                .HasMany(e => e.work_order_x_unit_x_unit_udf)
                .WithRequired(e => e.unit_x_udf)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<uom_x_uom_mx>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<uom_x_uom_mx>()
                .Property(e => e.unit_id)
                .IsUnicode(false);

            modelBuilder.Entity<uom_x_uom_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<uom_x_uom_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<uom_x_uom_mx>()
                .Property(e => e.unit_of_measure_cd)
                .IsUnicode(false);

            modelBuilder.Entity<uom_x_uom_mx>()
                .Property(e => e.unit_of_measure_name)
                .IsUnicode(false);

            modelBuilder.Entity<upos_device_mapping>()
                .Property(e => e.client_name)
                .IsUnicode(false);

            modelBuilder.Entity<upos_device_mapping>()
                .Property(e => e.logical_device_name)
                .IsUnicode(false);

            modelBuilder.Entity<upos_device_mapping>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<upos_device_mapping>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<upos_device_mapping>()
                .Property(e => e.terminal_id)
                .IsUnicode(false);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.pick_ticket_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.shipment_id)
                .IsUnicode(false);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.ship_via)
                .IsUnicode(false);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.package_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.shipping_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.handling_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.package_count)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.billing_option)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.hazmat_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.hazmat_charge)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ups_connectship_freight>()
                .Property(e => e.bulk_package_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user_assign_to>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<user_assign_to>()
                .Property(e => e.assign_to_user_id)
                .IsUnicode(false);

            modelBuilder.Entity<user_assign_to>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user_assign_to>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_assign_to>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_authority>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<user_authority>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_authority>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_code_hdr>()
                .Property(e => e.user_code_hdr_id)
                .IsUnicode(false);

            modelBuilder.Entity<user_code_hdr>()
                .Property(e => e.user_code_hdr_desc)
                .IsUnicode(false);

            modelBuilder.Entity<user_code_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_code_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_code_hdr>()
                .HasMany(e => e.user_code_line)
                .WithRequired(e => e.user_code_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user_code_line>()
                .Property(e => e.user_code_line_id)
                .IsUnicode(false);

            modelBuilder.Entity<user_code_line>()
                .Property(e => e.user_code_line_desc)
                .IsUnicode(false);

            modelBuilder.Entity<user_code_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_code_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_configured_tabpage>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<user_configured_tabpage>()
                .Property(e => e.window_classname)
                .IsUnicode(false);

            modelBuilder.Entity<user_configured_tabpage>()
                .Property(e => e.tabpage_name)
                .IsUnicode(false);

            modelBuilder.Entity<user_configured_tabpage>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_code>()
                .Property(e => e.code_type)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_code>()
                .Property(e => e.code_id)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_code>()
                .Property(e => e.code_description)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_column>()
                .Property(e => e.base_table)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_column>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_column>()
                .Property(e => e.data_type)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_column>()
                .Property(e => e.column_description)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_column>()
                .Property(e => e.column_label)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_column>()
                .Property(e => e.new_table_name)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_column>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_field>()
                .Property(e => e.udf_name)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_field>()
                .Property(e => e.udf_description)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_field>()
                .Property(e => e.edit_mask)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_field>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_defined_field>()
                .HasMany(e => e.unit_x_udf)
                .WithRequired(e => e.user_defined_field)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user_defined_field>()
                .HasMany(e => e.work_order_type_x_udf)
                .WithRequired(e => e.user_defined_field)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user_preference>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<user_preference>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<user_preference>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_preference>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_window_pref>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<user_window_pref>()
                .Property(e => e.object_name)
                .IsUnicode(false);

            modelBuilder.Entity<user_window_pref>()
                .Property(e => e.object_property)
                .IsUnicode(false);

            modelBuilder.Entity<user_window_pref>()
                .Property(e => e.object_value)
                .IsUnicode(false);

            modelBuilder.Entity<user_window_pref>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_window_pref>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user_window_pref>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.id)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.password)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.active)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_company)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_branch)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_quote_order)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.create_customers)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.create_ship_tos)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<user>()
                .Property(e => e.prompt_before_clearing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<user>()
                .Property(e => e.remote_user)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.company_security)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.window_security)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.system_security)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.create_items_at_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_application)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.script_path)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.designer_rights)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.class_id)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.auto_generate_transfer_in_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.receive_system_alerts)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.receive_import_failure_alert)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_to_advanced_search)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.link_stock_item_to_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.historical_cost_in_sales_hist)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.order_cost_basis_order_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.order_cost_basis_comm_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.order_cost_basis_other_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.update_cost_from_rfq_receipt)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.display_transaction_tasks)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.allow_nonstock_tbo)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.create_contract_from_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.mgmt_allow_branch_edit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.mgmt_use_default_branch)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.oe_price_library_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_label_printer)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.update_prospects_only_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.suppress_manual_adj_alloc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.shipping_control_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.cnvrt_prospect_to_customer_oe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.auto_display_rooms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.display_purchaseprice_breaks)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_salesrep_on_order)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_rep_on_comm_rpt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.order_validation_password)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.machine_name)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.sales_supervisor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.doe_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.doe_user_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.vacation_end_date_mod_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.use_po_approval_threshold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.po_approval_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<user>()
                .Property(e => e.prev_requests_search)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.view_cost_on_oe_line)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.bypass_check_verify_password)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.active_directory_role)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.update_branch_oe_reports_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.oe_allow_shipment_edits)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.oe_allow_packing_list_reprint)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.salesrep_security_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.user_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_as_taker_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.make_items_sellable_in_oe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.add_item_locations_in_oe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.confirm_dea_pt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.dflt_wwms_forms_printer)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.search_item_catalog_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.clear_item_catalog_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.cash_drawer_id)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.show_components_in_sales_hist)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.allow_post_to_closed_gl_period)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_send_to_outlook_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.create_items_at_soe)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.restricted_class_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.allow_ship_to_edit_in_oe_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.show_ar_cc_failed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.override_cust_pallet_warn_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.logo_path_filename)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.user_report_path)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.allow_shipment_confirmation)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.over_redeem_rewards_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.extended_item_info_porg_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.fedex_label_printer_path)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_item_search_in_imi)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.add_customer_part_number_in_oe)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.override_754_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.allow_add_labor_to_completed_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.allow_postprint_edit_labor_est)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.do_not_export_carrier_po_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.network_name)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.order_cost_basis_rebate_cost)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.convert_quote_to_order_prompt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_pick_ticket_printer)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_invoice_printer)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.user_signature_path)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.disable_item_category_tree_by_desc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.imi_default_user_location)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.dflt_ucc128_label_printer)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.allow_edi_855_manual_orders_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.oe_change_customer_with_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.allow_edit_labor_time_entry)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.email_signature)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.default_bss_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<user>()
                .Property(e => e.rebuild_drill_security_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.show_cc_on_save_cash_receipts)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.p21_client_log_path)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.enterprise_search_url)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.region)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .Property(e => e.docstar_server_password)
                .IsUnicode(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.activity_reminder)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.assigned_to_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.activity_trans)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.assigned_by_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.activity_trans1)
                .WithOptional(e => e.user1)
                .HasForeignKey(e => e.assigned_to_id);

            modelBuilder.Entity<user>()
                .HasMany(e => e.ad_role_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.bin_replenishment_order)
                .WithOptional(e => e.user)
                .HasForeignKey(e => e.replenishment_order_user);

            modelBuilder.Entity<user>()
                .HasMany(e => e.bin_zone)
                .WithOptional(e => e.user)
                .HasForeignKey(e => e.bin_replenishment_user);

            modelBuilder.Entity<user>()
                .HasMany(e => e.business_rule_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.call_log)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.cash_drawer_default_user)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.cash_drawer_history)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.check_payment_details)
                .WithOptional(e => e.user)
                .HasForeignKey(e => e.bypass_user_id);

            modelBuilder.Entity<user>()
                .HasMany(e => e.creditcard_payment_details)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.taker)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.creditcard_proc_comp_user)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.creditcard_processor_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.custom_objects)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.datasource_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.dc_nav_drill_source_user)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.dc_nav_drill_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.dc_security_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.direction_recent_search)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.dispatch_user_setting)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.dispatch_users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.dw_syntax_cache)
                .WithOptional(e => e.user)
                .HasForeignKey(e => e.user_id);

            modelBuilder.Entity<user>()
                .HasMany(e => e.email_signature_dflt_user_x_cust)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.eva_skill_security_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.fast_edit_template)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.fast_edit_template_class)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.fastedit_results)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.grow_metric_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.master_inquiry_tab_default)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.mru_window)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.opportunities)
                .WithOptional(e => e.user)
                .HasForeignKey(e => e.assigned_to_id);

            modelBuilder.Entity<user>()
                .HasMany(e => e.order_import_exception)
                .WithOptional(e => e.user)
                .HasForeignKey(e => e.taker);

            modelBuilder.Entity<user>()
                .HasMany(e => e.pc_user_def)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.portal_assignment)
                .WithOptional(e => e.user)
                .HasForeignKey(e => e.user_id);

            modelBuilder.Entity<user>()
                .HasMany(e => e.prod_order_hdr)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.entered_by)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.report_metadata_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.reporting_export_log)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.report_user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.research_tracking_hdr)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.taker)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.rf_found_item)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.rf_terminal)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.current_user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.ribbon_metric_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.scheduled_job_x_users)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.sort_dragdrop)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.system_alerts)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.task_area_x_user)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.task_auxiliary_assignee)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.assigned_to_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.user_authority)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.user_configured_tabpage)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.user_preference)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.user_window_pref)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.users_x_company)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.users_crm)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.users_direct_ship_edit)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.users_portal)
                .WithRequired(e => e.user)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.users_x_application_security)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.users_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.users_x_branch)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.users_x_cash_drawer)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.users_x_location)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<user>()
                .HasMany(e => e.users_x_salesrep)
                .WithRequired(e => e.user)
                .HasForeignKey(e => e.user_id)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<users_crm>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_crm>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_crm>()
                .Property(e => e.restrict_access_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<users_crm>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_crm>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_direct_ship_edit>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_direct_ship_edit>()
                .Property(e => e.edit_direct_ship_oe_lines_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<users_direct_ship_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_direct_ship_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_portal>()
                .Property(e => e.id)
                .IsUnicode(false);

            modelBuilder.Entity<users_portal>()
                .Property(e => e.preferred_url)
                .IsUnicode(false);

            modelBuilder.Entity<users_portal>()
                .Property(e => e.view_portal_as_salesrep)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<users_portal>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_portal>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_portal>()
                .Property(e => e.portal_salesrep)
                .IsUnicode(false);

            modelBuilder.Entity<users_portal>()
                .Property(e => e.shop_floor_manager)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<users_portal>()
                .Property(e => e.shop_floor_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_portal>()
                .Property(e => e.credit_manager_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_regional>()
                .Property(e => e.id)
                .IsUnicode(false);

            modelBuilder.Entity<users_regional>()
                .Property(e => e.short_date_pattern)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<users_regional>()
                .Property(e => e.use_24_hour_clock)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<users_regional>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_regional>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_application_security>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_application_security>()
                .Property(e => e.decimal_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<users_x_application_security>()
                .Property(e => e.string_value)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_application_security>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_application_security>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_branch>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_branch>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_branch>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_branch>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_branch>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_cash_drawer>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_cash_drawer>()
                .Property(e => e.cash_drawer_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_cash_drawer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_cash_drawer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_cash_drawer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_company>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_company>()
                .Property(e => e.Last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_company>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_company>()
                .Property(e => e.user_defined1)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_company>()
                .Property(e => e.user_defined2)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_location>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<users_x_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_oe_line_panel>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_oe_line_panel>()
                .Property(e => e.panel_name)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_oe_line_panel>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_oe_line_panel>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_salesrep>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_salesrep>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_salesrep>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<users_x_salesrep>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<value_list>()
                .Property(e => e.value_list_name)
                .IsUnicode(false);

            modelBuilder.Entity<value_list>()
                .Property(e => e.value_list_desc)
                .IsUnicode(false);

            modelBuilder.Entity<value_list>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<value_list>()
                .HasMany(e => e.value_list_value)
                .WithRequired(e => e.value_list)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<value_list_value>()
                .Property(e => e.value_list_value1)
                .IsUnicode(false);

            modelBuilder.Entity<value_list_value>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.set_pressure)
                .HasPrecision(19, 9);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.service_cd)
                .IsUnicode(false);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.seat_diameter)
                .HasPrecision(19, 9);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.capacity_no)
                .HasPrecision(19, 9);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.cd_stamp)
                .IsUnicode(false);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.spring_no)
                .IsUnicode(false);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.capacity_rating)
                .IsUnicode(false);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.part_no_suffix)
                .IsUnicode(false);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<valve_info>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<valvoline_export_history>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<valvoline_export_history>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<valvoline_export_history>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.vat_cd)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.reverse_vat_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.reverse_vat_percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.ioss_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.ioss_limit_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vat_code>()
                .Property(e => e.tax_category)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_code>()
                .HasMany(e => e.apinv_hdr_vat)
                .WithRequired(e => e.vat_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vat_code>()
                .HasMany(e => e.vat_code_group_line)
                .WithRequired(e => e.vat_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vat_code>()
                .HasMany(e => e.vendor_vat)
                .WithRequired(e => e.vat_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vat_code_group_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_group_hdr>()
                .Property(e => e.vat_code_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_group_hdr>()
                .Property(e => e.vat_code_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_group_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_group_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_group_hdr>()
                .HasMany(e => e.vat_code_group_line)
                .WithRequired(e => e.vat_code_group_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vat_code_group_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_group_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_wkst_mappings>()
                .Property(e => e.vat_cd)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_wkst_mappings>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_wkst_mappings>()
                .Property(e => e.include_in_box1_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_wkst_mappings>()
                .Property(e => e.include_in_box4_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_wkst_mappings>()
                .Property(e => e.include_in_box6_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_wkst_mappings>()
                .Property(e => e.include_in_box7_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_wkst_mappings>()
                .Property(e => e.ec_acquisitions_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_wkst_mappings>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_code_wkst_mappings>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit>()
                .Property(e => e.uk_mtd_period_key)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit>()
                .Property(e => e.report_submitted)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit>()
                .Property(e => e.report_response)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit>()
                .Property(e => e.response_message)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit>()
                .Property(e => e.submitted_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit>()
                .HasMany(e => e.vat_return_uk_mtd_submit_det)
                .WithRequired(e => e.vat_return_uk_mtd_submit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit_det>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_uk_mtd_submit_det>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.vat_return_desc)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.vat_sales_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.ec_acquisitions_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.vat_purchases_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.sales_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.purchases_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.ec_sales_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.ec_purchases_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.ec_acquisitions_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.box1_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.box4_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.box6_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.box7_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.box8_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .Property(e => e.box9_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst>()
                .HasMany(e => e.vat_return_uk_mtd_submit_det)
                .WithRequired(e => e.vat_return_wkst)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vat_return_wkst>()
                .HasMany(e => e.vat_return_wkst_x_trans)
                .WithRequired(e => e.vat_return_wkst)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.include_on_vat_return_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.exclude_on_all_vat_returns_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.eu_member_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.verified_with_c79_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.worksheet_vat_cd)
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.include_in_box1_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.include_in_box4_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.include_in_box6_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.include_in_box7_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.ec_acquisitions_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_return_wkst_x_trans>()
                .Property(e => e.ec_acquisitions_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vat_x_transaction>()
                .Property(e => e.percentage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vat_x_transaction>()
                .Property(e => e.taxable_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vat_x_transaction>()
                .Property(e => e.taxable_amount_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vat_x_transaction>()
                .Property(e => e.tax_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vat_x_transaction>()
                .Property(e => e.tax_amount_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vat_x_transaction>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_x_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vat_x_transaction>()
                .Property(e => e.entity_type_cd)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vat_x_transaction>()
                .Property(e => e.entity_type_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.default_1099_type)
                .HasPrecision(3, 0);

            modelBuilder.Entity<vendor>()
                .Property(e => e.ap_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.default_purch_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.default_terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.vendor_id_string)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.default_pay_freight_to)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.currency_id)
                .HasPrecision(3, 0);

            modelBuilder.Entity<vendor>()
                .Property(e => e.edi_or_paper)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.security_info)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.interchg_receiver_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.intl_san)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.federal_id_number)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.default_invoice_desc)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.payable_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.tqm_tracking)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.always_take_terms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.job_id_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.vendor_name)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.trading_partner_name)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.track_rebates)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.rebate_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.rebate_allowance_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.allow_rebate_pay_imp_variance)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.legacy_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.wildcard_acct_in_voucher_entry)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.attorney_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.IRS_1099_state_1)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.IRS_1099_state_1_id_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.IRS_1099_state_2)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.IRS_1099_state_2_id_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.warranty_receivable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.warranty_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.warranty_allowance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.commission_receivable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.commission_revenue_acct)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.commission_allowance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.track_cores_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.bank_cores_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.isr_tax_withheld_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.isr_tax_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor>()
                .Property(e => e.isr_tax_acct)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.invoice_line_variance_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor>()
                .Property(e => e.invoice_line_variance_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.vendor_on_hold_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.max_customer_sales_discount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor>()
                .Property(e => e.separate_checks_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.credit_limit)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor>()
                .Property(e => e.asb_main_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .Property(e => e.override_mro_tax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.apinv_hdr)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_no })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.asb_call_criteria)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.contacts)
                .WithOptional(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id });

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.custom_column_data_vendor)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.customer_x_vendor)
                .WithOptional(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id });

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.dealer_commission)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.dealer_commission_payments)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.export_matrix)
                .WithOptional(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id });

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.inventory_return_hdr)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.job_price_vendor)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.landed_cost_driver)
                .WithOptional(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id });

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.oe_hdr_mfr)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.passive_rebate_hdr)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.service_warranty_claim)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.stages)
                .WithOptional(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id });

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_111)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_ach)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_asb_subaccounts)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_contract)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_core_tracking)
                .WithOptional(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id });

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_dealer_warranty)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_edi_setting)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_edi_transaction)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_eft)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_form_template)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_iva_tax)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_notification_method)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_pass_through)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_po_options)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_vat)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_vmi)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_wit)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_invoice_hdr)
                .WithOptional(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id });

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.vendor_notepad)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.warranty_claim_hdr)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor>()
                .HasMany(e => e.warranty_claim_payments)
                .WithRequired(e => e.vendor)
                .HasForeignKey(e => new { e.vendor_id, e.company_id })
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor_111>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_111>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_111>()
                .Property(e => e.inv_subtotal_variance_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_111>()
                .Property(e => e.inv_subtotal_variance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_111>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_111>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_111>()
                .Property(e => e.inv_subtotal_variance_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.routing_number)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.check_digit)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.account_number)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.payment_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.file_id_modifier)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.remittance_language)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.transaction_code)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.bank_iban_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.bank_country_code)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.bank_address1)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.bank_address2)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.bank_city)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.bank_state)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.bank_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.send_edi_820_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.bank_name)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.ccr_division)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.payment_type)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.intl_receiving_bank_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.standard_entry_class)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach>()
                .Property(e => e.payment_contact_id_list)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach_contacts>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach_contacts>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_ach_contacts>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach_contacts>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_ach_contacts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_asb_subaccounts>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_asb_subaccounts>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_asb_subaccounts>()
                .Property(e => e.asb_sub_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_asb_subaccounts>()
                .Property(e => e.sub_account_extension)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_asb_subaccounts>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_asb_subaccounts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_asb_subaccounts>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.fee_based_vendor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.contracted_sale_fee_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.non_contracted_sale_fee_pct)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.calc_rebates_on_rma_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.allow_multiple_gpos_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.shop_gpos_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.debit_on_rebate_creation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.freight_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .Property(e => e.auto_assign_base_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract>()
                .HasMany(e => e.vendor_contract_hierarchy)
                .WithRequired(e => e.vendor_contract)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor_contract_freight_factor_exclusion>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_freight_factor_exclusion>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_contract_freight_factor_exclusion>()
                .Property(e => e.exclude_from_on_contract_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_freight_factor_exclusion>()
                .Property(e => e.exclude_from_off_contract_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_freight_factor_exclusion>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_freight_factor_exclusion>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_hierarchy>()
                .Property(e => e.hierarchy)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_contract_hierarchy>()
                .Property(e => e.gpo_primary_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_hierarchy>()
                .Property(e => e.gpo_secondary_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_hierarchy>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_hierarchy>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_type>()
                .Property(e => e.vendor_contract_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_contract_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_core_tracking>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_core_tracking>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_core_tracking>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_core_tracking>()
                .Property(e => e.document_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_core_tracking>()
                .Property(e => e.core_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_core_tracking>()
                .Property(e => e.core_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_core_tracking>()
                .Property(e => e.trans_type)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_core_tracking>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_core_tracking>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_dealer_warranty>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_dealer_warranty>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_dealer_warranty>()
                .Property(e => e.accept_claims_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_dealer_warranty>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_dealer_warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_defaults>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_defaults>()
                .Property(e => e.ap_account_number)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_defaults>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_defaults>()
                .Property(e => e.edi_or_paper)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_defaults>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_defaults>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.interchg_receiver_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.intl_san)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.trading_partner_name)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.edi_interchange_id_qualifier)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.edi_interchange_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.application_code)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.element_separator)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.sub_element_separator)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.segment_terminator)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.repetition_separator)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.append_line_feed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.functional_ack_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.testing_mode_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.eighty_column_line_break_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.validate_x12_document_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_setting>()
                .Property(e => e.additional_freight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_edi_transaction>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_transaction>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_edi_transaction>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_transaction>()
                .HasMany(e => e.vendor_edi_transaction_detail)
                .WithRequired(e => e.vendor_edi_transaction)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor_edi_transaction_detail>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_transaction_detail>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_transaction_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_edi_transaction_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.eft_vendor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.destination_sorting_code_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.destination_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.non_bank_of_ireland_user_name)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank_of_ireland_user_reference)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.remittance_language)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.transaction_code)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank_iban_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank_country_code)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank_address1)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank_address2)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank_city)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank_state)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.send_remittance_advice_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.remittance_advice_contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.branch)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.suffix)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.reference)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.vendor_code)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.particulars)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bsb_number)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.bank_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.branch_transit_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.payee_name)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_eft>()
                .Property(e => e.institutional_identification_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_form_template>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_form_template>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_form_template>()
                .Property(e => e.warranty_claim_filename)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_form_template>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_form_template>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_edi>()
                .Property(e => e.sac_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_edi>()
                .Property(e => e.amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<vendor_invoice_edi>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_edi>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_edi>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_edi>()
                .Property(e => e.purchase_desc)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.exchange_rate)
                .HasPrecision(19, 6);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.invoice_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.invoice_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.freight_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.terms_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.terms_amount_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.reconciled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.invoice_amount_vouched)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.invoice_amount_vouched_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.freight_amount_vouched)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.freight_amount_vouched_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.prepaid_voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.customer_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.carrier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.tracking_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.description)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.terms_discount_pct)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.partially_process_flag)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .Property(e => e.requires_cviv_processing_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .HasMany(e => e.vendor_invoice_edi)
                .WithRequired(e => e.vendor_invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor_invoice_hdr>()
                .HasMany(e => e.vendor_invoice_line)
                .WithRequired(e => e.vendor_invoice_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.vendor_invoice_hdr_import_results_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.invoice_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.freight_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.terms_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.terms_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.import_status)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.error_message)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.processed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_hdr_import_results>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.po_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.po_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.quantity_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.unit_cost_invoiced)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.unit_cost_invoiced_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.freight_invoiced)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.freight_invoiced_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.freight_received)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.freight_received_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.quantity_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.reconciled_flag)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.quantity_vouched)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.freight_amount_vouched)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.freight_amount_vouched_display)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.commission_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.purchase_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.purchase_description)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.job_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_invoice_line>()
                .Property(e => e.disputed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notepad>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notepad>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notepad>()
                .Property(e => e.notepad_class)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notepad>()
                .Property(e => e.mandatory)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.dealer_warranty_email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.dealer_warranty_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.dealer_warranty_fax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.dealer_warranty_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.credit_memo_email_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.credit_memo_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.credit_memo_fax_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.credit_memo_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_notification_method>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_pass_through>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_pass_through>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_pass_through>()
                .Property(e => e.link_vouchers_to_cust_inv)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_pass_through>()
                .Property(e => e.handling_fee_percentage)
                .HasPrecision(19, 2);

            modelBuilder.Entity<vendor_pass_through>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_pass_through>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_po_options>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_po_options>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_po_options>()
                .Property(e => e.intrastat_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_po_options>()
                .Property(e => e.consignment_country)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_po_options>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_po_options>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_po_options>()
                .Property(e => e.eu_member_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.vendor_id)
                .HasPrecision(18, 0);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.purchase_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.core_acct_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.freight_estimated_acct_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.freight_difference_acct_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.allocation_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.purchase_desc)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_purchase_acct>()
                .Property(e => e.purchase_company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.rebate_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.rebate_due)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.paid_in_full_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.exclude_rebate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.base_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.after_rebate_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.allowed_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.sent_via_edi844)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.contract_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.vendor_auth_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.exception_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.source_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.rebate_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.pegmost_batch_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rebate>()
                .Property(e => e.exclude_on_edi844_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_hdr>()
                .HasMany(e => e.vendor_rfq_hdr_x_oe_hdr)
                .WithRequired(e => e.vendor_rfq_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor_rfq_hdr>()
                .HasMany(e => e.vendor_rfq_hdr_x_po_hdr)
                .WithRequired(e => e.vendor_rfq_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor_rfq_hdr_x_oe_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_hdr_x_oe_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_hdr_x_po_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_hdr_x_po_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_line>()
                .Property(e => e.qty_converted)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_rfq_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_line>()
                .Property(e => e.delivery_info)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_line>()
                .Property(e => e.rfqanalysis_complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_line>()
                .HasMany(e => e.vendor_rfq_line_analysis)
                .WithRequired(e => e.vendor_rfq_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor_rfq_line_analysis>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_rfq_line_analysis>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_rfq_line_analysis>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vendor_rfq_line_analysis>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_rfq_line_analysis>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_supplier>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_supplier>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_supplier>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_supplier>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_supplier>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_supplier>()
                .Property(e => e.primary_vendor)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_supplier>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.registration_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.vat_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.vendor_source_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.process_type_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.ioss_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vat>()
                .Property(e => e.eori_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.location_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.beg_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.end_location)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.beg_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.end_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.vmi_status_full)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.vmi_status_exclude)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.vmi_status_partial)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.vmi_status_remove)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.full_listing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.export_source)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.xml_document_definition)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.export_path)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.look_ahead_days)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_vmi>()
                .Property(e => e.status_since_last_send_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi>()
                .HasMany(e => e.vendor_vmi_x_location)
                .WithRequired(e => e.vendor_vmi)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vendor_vmi_x_location>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_vmi_x_location>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_vmi_x_location>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_wit>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_wit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_wit>()
                .Property(e => e.wit_vendor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_wit>()
                .Property(e => e.duns_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_wit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_wit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_wit>()
                .Property(e => e.wit_vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<version_code>()
                .Property(e => e.servent_release)
                .IsUnicode(false);

            modelBuilder.Entity<version_code>()
                .Property(e => e.release_prefix)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<version_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_container>()
                .Property(e => e.container_name)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_container>()
                .Property(e => e.container_capacity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vessel_receipts_container>()
                .Property(e => e.container_seal_id)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_container>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_container>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_container>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_container>()
                .Property(e => e.container_packaging_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vessel_receipts_container>()
                .HasMany(e => e.container_receipts_hdr)
                .WithRequired(e => e.vessel_receipts_container)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.vessel_receipt_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.vessel_name)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.loading_port)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.loading_country)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.discharge_port)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.discharge_country)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.delivery_method)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.documents_received_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.apply_landed_costs_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .HasMany(e => e.vessel_receipts_container)
                .WithRequired(e => e.vessel_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vessel_receipts_hdr>()
                .HasMany(e => e.vessel_receipts_line)
                .WithRequired(e => e.vessel_receipts_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.container_qty_received)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.container_uom)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.container_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.container_qty_unloaded)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.po_sku_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.po_sku_cost_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.sku_vessel_line_lc_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.reduce_po_line_qty_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_line>()
                .Property(e => e.exclude_from_landed_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vessel_receipts_line>()
                .HasMany(e => e.b3_customs_info)
                .WithRequired(e => e.vessel_receipts_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vessel_receipts_line>()
                .HasMany(e => e.container_receipts_line)
                .WithRequired(e => e.vessel_receipts_line)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vessel_receipts_repair>()
                .Property(e => e.vessel_receipts_hdr_uid)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.vics_bol_number)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.pallet_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.pallet_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.consolidated856_sent_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.billing_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.trailer_number)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.seal_number)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.pro_number)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.handling_unit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.truckload_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.freight_charge_term_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.me_routing_number)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.alternate_ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vics_bill_of_lading>()
                .Property(e => e.master_vics_bol_number)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bol_pallet>()
                .Property(e => e.vics_bol_number)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bol_pallet>()
                .Property(e => e.unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vics_bol_pallet>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bol_pallet>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bol_pallet>()
                .HasMany(e => e.vics_bol_pallet_container)
                .WithRequired(e => e.vics_bol_pallet)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<vics_bol_pallet_container>()
                .Property(e => e.serial_no)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bol_pallet_container>()
                .Property(e => e.unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<vics_bol_pallet_container>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<vics_bol_pallet_container>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bol_pallet_container>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vics_bol_pallet_container>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vies_rpt>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vies_rpt>()
                .Property(e => e.start_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vies_rpt>()
                .Property(e => e.end_customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vies_rpt>()
                .Property(e => e.start_vat_no)
                .IsUnicode(false);

            modelBuilder.Entity<vies_rpt>()
                .Property(e => e.end_vat_no)
                .IsUnicode(false);

            modelBuilder.Entity<vies_rpt>()
                .Property(e => e.report_by)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vies_rpt>()
                .Property(e => e.return_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vies_rpt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vies_rpt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.accept_invoice_without_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.expense_account)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.purchase_description)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.vouch_unreconciled_invoices)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.approve_unreconciled_vouchers)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.prepaid_invoice_acct)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.auto_convert_vi_direct_po)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.validate_item_id)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.validate_unit_size)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_automation_company_settings>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_class>()
                .Property(e => e.voucher_class1)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_class>()
                .Property(e => e.voucher_class_desc)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_class>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_class>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_class>()
                .Property(e => e.freight_voucher_class_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_class>()
                .HasMany(e => e.apinv_hdr)
                .WithOptional(e => e.voucher_class1)
                .HasForeignKey(e => e.voucher_class);

            modelBuilder.Entity<voucher_class>()
                .HasMany(e => e.locations)
                .WithOptional(e => e.voucher_class1)
                .HasForeignKey(e => e.voucher_class);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.purchase_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.purchase_amt)
                .HasPrecision(19, 2);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.purchase_amt_display)
                .HasPrecision(19, 2);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.purchase_desc)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.disputed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.iva_withheld_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.iva_received_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.take_terms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.iva_received_percent)
                .HasPrecision(19, 2);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.iva_withheld_percent)
                .HasPrecision(19, 6);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.iva_received_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct>()
                .Property(e => e.iva_withheld_edited_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit>()
                .Property(e => e.purchase_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit>()
                .Property(e => e.purchase_desc)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit>()
                .Property(e => e.purchase_amt_display)
                .HasPrecision(19, 9);

            modelBuilder.Entity<voucher_purchase_acct_edit>()
                .Property(e => e.disputed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit>()
                .Property(e => e.take_terms)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit>()
                .Property(e => e.tax_driver_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit>()
                .Property(e => e.landed_cost_driver_complete)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty>()
                .Property(e => e.warranty_name)
                .IsUnicode(false);

            modelBuilder.Entity<warranty>()
                .Property(e => e.warranty_description)
                .IsUnicode(false);

            modelBuilder.Entity<warranty>()
                .Property(e => e.warranty_time_type)
                .IsUnicode(false);

            modelBuilder.Entity<warranty>()
                .Property(e => e.warranty_price)
                .HasPrecision(19, 2);

            modelBuilder.Entity<warranty>()
                .Property(e => e.default_parts_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<warranty>()
                .Property(e => e.default_labor_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<warranty>()
                .Property(e => e.extended_warranty)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<warranty>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty>()
                .HasMany(e => e.item_warranty_x_warranty)
                .WithRequired(e => e.warranty)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<warranty_claim_detail>()
                .Property(e => e.total_claim_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<warranty_claim_detail>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_detail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.external_claim_number)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.claim_amount)
                .HasPrecision(19, 9);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.claim_amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.claim_amount_allowed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<warranty_claim_hdr>()
                .Property(e => e.paid_in_full_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_hdr>()
                .HasMany(e => e.warranty_claim_detail)
                .WithRequired(e => e.warranty_claim_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<warranty_claim_hdr>()
                .HasMany(e => e.warranty_claim_receipts)
                .WithRequired(e => e.warranty_claim_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.warranty_claim_payment_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.warranty_claim_allowed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.check_no)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.cash_acct)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.accounts_payable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.warranty_allowance_acct)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.warranty_receivable_acct)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.deposit_number)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .Property(e => e.cleared_bank)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_payments>()
                .HasMany(e => e.warranty_claim_receipts)
                .WithRequired(e => e.warranty_claim_payments)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<warranty_claim_receipts>()
                .Property(e => e.warranty_claim_recpt_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<warranty_claim_receipts>()
                .Property(e => e.warranty_claim_allowed_amt)
                .HasPrecision(19, 4);

            modelBuilder.Entity<warranty_claim_receipts>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_claim_receipts>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_reason>()
                .Property(e => e.warranty_reason_name)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_reason>()
                .Property(e => e.warranty_reason_desc)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_reason>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_reason>()
                .HasMany(e => e.item_warranty_x_warranty_reason)
                .WithRequired(e => e.warranty_reason)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<warranty_state_req>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_state_req>()
                .Property(e => e.over_dealer_percent)
                .HasPrecision(19, 9);

            modelBuilder.Entity<warranty_state_req>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<warranty_state_req>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<web_display_type>()
                .Property(e => e.web_display_type_id)
                .IsUnicode(false);

            modelBuilder.Entity<web_display_type>()
                .Property(e => e.web_display_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<web_display_type>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<web_display_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<web_display_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<web_display_type>()
                .HasMany(e => e.item_category_image)
                .WithRequired(e => e.web_display_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<web_display_type>()
                .HasMany(e => e.item_category_link)
                .WithRequired(e => e.web_display_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<web_display_type>()
                .HasMany(e => e.item_category_text)
                .WithRequired(e => e.web_display_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<weboe_ship_to_unique>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_unique>()
                .Property(e => e.address_key)
                .IsUnicode(false);

            modelBuilder.Entity<wee_tax_code>()
                .Property(e => e.wee_tax_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<wee_tax_code>()
                .Property(e => e.ret_charge_tax_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wee_tax_code>()
                .Property(e => e.prod_charge_tax_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wee_tax_code>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<wee_tax_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wee_tax_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<weight_uom_mx>()
                .Property(e => e.weight_uom_cd)
                .IsUnicode(false);

            modelBuilder.Entity<weight_uom_mx>()
                .Property(e => e.weight_uom_name)
                .IsUnicode(false);

            modelBuilder.Entity<weight_uom_mx>()
                .Property(e => e.weight_uom_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weight_uom_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<weight_uom_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wf_ach_counter>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wf_ach_counter>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<window_tab_navigation>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<window_tab_navigation>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<window_x_menu>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<window_x_menu>()
                .Property(e => e.menu_name)
                .IsUnicode(false);

            modelBuilder.Entity<window_x_menu>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<window_x_menu>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .Property(e => e.period)
                .HasPrecision(3, 0);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .Property(e => e.year_for_period)
                .HasPrecision(4, 0);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .Property(e => e.gl_transaction_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .Property(e => e.gl_transaction_no_reversal)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .Property(e => e.process_cost_calculated_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .Property(e => e.include_other_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .HasMany(e => e.wip_worksheet_x_assembly)
                .WithRequired(e => e.wip_worksheet_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .HasMany(e => e.wip_worksheet_x_component)
                .WithRequired(e => e.wip_worksheet_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wip_worksheet_hdr>()
                .HasMany(e => e.wip_worksheet_x_labor)
                .WithRequired(e => e.wip_worksheet_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.qty_to_make)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.qty_completed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.material_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.freight_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.labor_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.labor_cost_indirect)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.other_charge_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.process_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_assembly>()
                .Property(e => e.inventory_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_needed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_requested)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_on_pick_tickets)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_confirmed)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_canceled)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_scrapped)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_unallocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_allocated_wip)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.qty_confirmed_wip)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.sku_cost_wip)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.inventory_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.used_specific_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.used_lot_cost_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_component>()
                .Property(e => e.include_other_charge_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_labor>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_labor>()
                .Property(e => e.extended_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_labor>()
                .Property(e => e.extended_cost_remaining)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wip_worksheet_x_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wip_worksheet_x_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_hdr>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wireless_trans_audit_hdr>()
                .Property(e => e.wireless_transaction_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wireless_trans_audit_hdr>()
                .Property(e => e.group_pick_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_hdr>()
                .HasMany(e => e.wireless_trans_audit_line)
                .WithRequired(e => e.wireless_trans_audit_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wireless_trans_audit_line>()
                .Property(e => e.transaction_line_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wireless_trans_audit_line>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_line>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_line>()
                .Property(e => e.bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_line>()
                .Property(e => e.unit_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wireless_trans_audit_line>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_line>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<wireless_trans_audit_line>()
                .Property(e => e.tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<wireless_trans_audit_line>()
                .Property(e => e.employee_id)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.work_order_summary)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.work_order_no)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<work_order>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<work_order>()
                .Property(e => e.taker)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<work_order>()
                .Property(e => e.permit_number)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.scheduled_hours)
                .HasPrecision(19, 4);

            modelBuilder.Entity<work_order>()
                .Property(e => e.actual_hours)
                .HasPrecision(19, 4);

            modelBuilder.Entity<work_order>()
                .Property(e => e.source_type)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.source_id)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.print_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<work_order>()
                .HasMany(e => e.invoice_x_work_order)
                .WithRequired(e => e.work_order)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order>()
                .HasMany(e => e.work_order_schedule)
                .WithRequired(e => e.work_order)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order>()
                .HasMany(e => e.work_order_x_unit)
                .WithRequired(e => e.work_order)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order>()
                .HasMany(e => e.work_order_x_unit_x_unit_udf)
                .WithRequired(e => e.work_order)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order>()
                .HasMany(e => e.work_order_notepad)
                .WithRequired(e => e.work_order)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order>()
                .HasMany(e => e.work_order_x_labor_type)
                .WithRequired(e => e.work_order)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order_audit_trail>()
                .Property(e => e.changed_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_audit_trail>()
                .Property(e => e.what_changed)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.source_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.ship_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.unit_qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.pricing_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<work_order_item>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<work_order_labor>()
                .Property(e => e.actual_hours)
                .HasPrecision(19, 2);

            modelBuilder.Entity<work_order_labor>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<work_order_labor>()
                .Property(e => e.rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<work_order_labor>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_labor>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_notepad>()
                .Property(e => e.notepad_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_notepad>()
                .Property(e => e.topic)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_notepad>()
                .Property(e => e.note)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_notepad>()
                .Property(e => e.mandatory_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<work_order_notepad>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<work_order_notepad>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_notepad>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_schedule>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_schedule>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_type>()
                .Property(e => e.work_order_type_name)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_type>()
                .Property(e => e.work_order_type_desc)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_type>()
                .Property(e => e.update_oe_req_date_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<work_order_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_type>()
                .HasMany(e => e.work_order_type_x_skillset)
                .WithRequired(e => e.work_order_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order_type>()
                .HasMany(e => e.work_order_type_x_udf)
                .WithRequired(e => e.work_order_type)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order_type_x_skillset>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_type_x_udf>()
                .Property(e => e.required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<work_order_type_x_udf>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_unit_room>()
                .Property(e => e.room_desc)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_unit_room>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_unit_room>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_x_labor_type>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_x_labor_type>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_x_unit>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_x_unit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_x_unit>()
                .HasMany(e => e.oe_line_work_order)
                .WithRequired(e => e.work_order_x_unit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order_x_unit>()
                .HasMany(e => e.work_order_item)
                .WithRequired(e => e.work_order_x_unit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order_x_unit>()
                .HasMany(e => e.work_order_labor)
                .WithRequired(e => e.work_order_x_unit)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<work_order_x_unit_x_unit_udf>()
                .Property(e => e.value)
                .IsUnicode(false);

            modelBuilder.Entity<work_order_x_unit_x_unit_udf>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.workbench_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.workbench_desc)
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.auto_assign_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.create_groups_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.zone_picking_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.resort_picker_queue_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.saved_sort)
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.active_user)
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.group_so_by_shipto_carrier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .Property(e => e.group_tfr_by_dest_carrier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench>()
                .HasMany(e => e.workbench_x_users)
                .WithRequired(e => e.workbench)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<workbench_allocation_dflt>()
                .Property(e => e.included_zones)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_allocation_dflt>()
                .Property(e => e.excluded_zones)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_allocation_dflt>()
                .Property(e => e.split_picks_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_allocation_dflt>()
                .Property(e => e.minimize_picks_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_allocation_dflt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_allocation_dflt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.workbench_query_hdr_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.workbench_query_hdr_desc)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.retrieve_pt_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.retrieve_transfer_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.retrieve_production_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.retrieve_process_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.retrieve_returns_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.retrieve_replenishment_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .Property(e => e.retrieve_inventory_movement_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .HasMany(e => e.workbench_query_inventory)
                .WithRequired(e => e.workbench_query_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .HasMany(e => e.workbench_query_prod)
                .WithRequired(e => e.workbench_query_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<workbench_query_hdr>()
                .HasMany(e => e.workbench_query_pt)
                .WithRequired(e => e.workbench_query_hdr)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<workbench_query_inventory>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_inventory>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<workbench_query_inventory>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_inventory>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_inventory>()
                .Property(e => e.qty_to_move)
                .HasPrecision(19, 9);

            modelBuilder.Entity<workbench_query_inventory>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_inventory>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_process>()
                .Property(e => e.transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_process>()
                .Property(e => e.process_cd)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_process>()
                .Property(e => e.process_date_created)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_process>()
                .Property(e => e.begin_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_process>()
                .Property(e => e.expected_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_process>()
                .Property(e => e.raw_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_process>()
                .Property(e => e.finished_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_process>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_process>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_prod>()
                .Property(e => e.prod_pick_ticket_number)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_prod>()
                .Property(e => e.prod_order_number)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_prod>()
                .Property(e => e.order_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_prod>()
                .Property(e => e.required_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_prod>()
                .Property(e => e.expected_completion_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_prod>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_prod>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.number_of_lines)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.pick_ticket_no)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.print_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.required_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.customer_po_no)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.shipping_route)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.packing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.will_call_flag)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.front_counter_flag)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.order_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.carrier_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.order_priority_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.order_priority)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.corporate_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.customer_order_priority_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_pt>()
                .Property(e => e.carrier_order_priority_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_replenishment>()
                .Property(e => e.bin_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_replenishment>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_replenishment>()
                .Property(e => e.replenishment_date_created)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_replenishment>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_replenishment>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_transfer>()
                .Property(e => e.to_location_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_transfer>()
                .Property(e => e.transfer_no)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_transfer>()
                .Property(e => e.carrier_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_transfer>()
                .Property(e => e.shipping_route)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_transfer>()
                .Property(e => e.planned_recpt_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_transfer>()
                .Property(e => e.printed_date)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_transfer>()
                .Property(e => e.number_of_lines)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_transfer>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_query_transfer>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_queue>()
                .Property(e => e.priority_pick_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<workbench_queue>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_queue>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_user_zone>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_user_zone>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_x_users>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_x_users>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_x_users>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_x_users>()
                .HasMany(e => e.workbench_queue)
                .WithRequired(e => e.workbench_x_users)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<workbench_x_users>()
                .HasMany(e => e.workbench_x_users_pick)
                .WithRequired(e => e.workbench_x_users)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<workbench_x_users_pick>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_x_users_pick>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<workbench_x_users_pick>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_in_process>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_in_process>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_in_process>()
                .Property(e => e.subkey)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_in_process>()
                .Property(e => e.from_workbench_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.print_labels_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.print_item_labels_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.item_label_qty_option)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.reprint_contplat_labels_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.print_new_tags_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.one_label_per_package_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.include_dest_pkg_tag_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_label_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.pom_pt_find_same_shipto_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.pom_pt_find_same_carrier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.pom_pt_find_same_route_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.pom_ts_find_same_dest_loc_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.pom_ts_find_same_carrier_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.pom_ts_find_same_route_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.dflt_wwms_forms_printer)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.pom_pt_find_fully_allocated_dbin)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_loc_session_defaults>()
                .Property(e => e.pom_ts_find_fully_allocated_dbin)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_receipt_defaults>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<wwms_receipt_defaults>()
                .Property(e => e.approved_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_receipt_defaults>()
                .Property(e => e.complete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_receipt_defaults>()
                .Property(e => e.allocate_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_receipt_defaults>()
                .Property(e => e.enter_lot_attributes_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wwms_receipt_defaults>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<wwms_receipt_defaults>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_app_p21>()
                .Property(e => e.app_exe)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_app_p21>()
                .Property(e => e.module_nm)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_app_p21>()
                .Property(e => e.module_frame)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_app_p21>()
                .Property(e => e.modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_app_p21>()
                .HasMany(e => e.wzd_process_p21)
                .WithRequired(e => e.wzd_app_p21)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wzd_prcs_sesn_state_p21>()
                .Property(e => e.wizard_state_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wzd_prcs_sesn_state_p21>()
                .Property(e => e.wizard_state_desc)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_prcs_sesn_state_p21>()
                .Property(e => e.modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_prcs_sesn_state_p21>()
                .HasMany(e => e.wzd_prcs_x_wzd_sesn_p21)
                .WithRequired(e => e.wzd_prcs_sesn_state_p21)
                .HasForeignKey(e => e.process_session_state_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wzd_prcs_status_p21>()
                .Property(e => e.wizard_status_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wzd_prcs_status_p21>()
                .Property(e => e.wizard_status_desc)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_prcs_status_p21>()
                .Property(e => e.modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_prcs_status_p21>()
                .HasMany(e => e.wzd_process_p21)
                .WithRequired(e => e.wzd_prcs_status_p21)
                .HasForeignKey(e => e.step_status_code)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wzd_prcs_x_wzd_sesn_p21>()
                .Property(e => e.process_session_state_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wzd_prcs_x_wzd_sesn_p21>()
                .Property(e => e.modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_ext_p21>()
                .Property(e => e.panel_tx)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_ext_p21>()
                .Property(e => e.panel_pic)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_ext_p21>()
                .Property(e => e.panel_obj)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_ext_p21>()
                .Property(e => e.addtl_tx)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_ext_p21>()
                .Property(e => e.modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_p21>()
                .Property(e => e.step_nm)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_p21>()
                .Property(e => e.step_status_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_p21>()
                .Property(e => e.window_nm)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_p21>()
                .Property(e => e.dataobject_nm)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_p21>()
                .Property(e => e.instruct_tx)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_process_p21>()
                .HasMany(e => e.wzd_prcs_x_wzd_sesn_p21)
                .WithRequired(e => e.wzd_process_p21)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wzd_process_p21>()
                .HasOptional(e => e.wzd_process_ext_p21)
                .WithRequired(e => e.wzd_process_p21);

            modelBuilder.Entity<wzd_session_p21>()
                .Property(e => e.user_id)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_session_p21>()
                .Property(e => e.session_desc)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_session_p21>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_session_p21>()
                .HasMany(e => e.wzd_prcs_x_wzd_sesn_p21)
                .WithRequired(e => e.wzd_session_p21)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wzd_type_p21>()
                .Property(e => e.wizard_nm)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_type_p21>()
                .Property(e => e.wizard_exe)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_type_p21>()
                .Property(e => e.wizard_pic)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_type_p21>()
                .Property(e => e.wizard_mode)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_type_p21>()
                .Property(e => e.modified_by)
                .IsUnicode(false);

            modelBuilder.Entity<wzd_type_p21>()
                .HasMany(e => e.wzd_process_p21)
                .WithRequired(e => e.wzd_type_p21)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<wzd_type_p21>()
                .HasMany(e => e.wzd_session_p21)
                .WithRequired(e => e.wzd_type_p21)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.xm_api_transaction_id)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.p21_transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.p21_transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.xm_api_return_value)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.xm_api_return_message)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.xm_api_response_payload)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.xm_api_request_payload)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.p21_api_request_payload)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.p21_api_response_payload)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.p21_api_return_message)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_inbound_log>()
                .Property(e => e.p21_api_return_value)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.p21_transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.p21_transaction_type)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.request_payload)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.response_payload)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.response_id)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.return_value)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.return_message)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.status)
                .IsUnicode(false);

            modelBuilder.Entity<xm_api_outbound_log>()
                .Property(e => e.status_error)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject>()
                .Property(e => e.dataobject_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject>()
                .Property(e => e.business_object_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject>()
                .Property(e => e.setup_event_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject>()
                .HasMany(e => e.trans_set_x_xml_dataobject)
                .WithRequired(e => e.xml_dataobject)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<xml_dataobject>()
                .HasMany(e => e.xml_dataobject_x_config)
                .WithRequired(e => e.xml_dataobject)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<xml_dataobject>()
                .HasMany(e => e.xml_dataobject_column)
                .WithRequired(e => e.xml_dataobject)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<xml_dataobject_column>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject_column>()
                .Property(e => e.column_label)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject_column>()
                .Property(e => e.column_type)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject_column>()
                .Property(e => e.column_db_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject_column>()
                .Property(e => e.edit_required)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject_column>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject_column>()
                .Property(e => e.custom_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject_column>()
                .HasMany(e => e.xml_document_element)
                .WithRequired(e => e.xml_dataobject_column)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<xml_dataobject_x_config>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<xml_dataobject_x_config>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .Property(e => e.document_version)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .Property(e => e.document_schema)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .Property(e => e.template_filename)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .Property(e => e.document_desc)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .Property(e => e.default_document)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .Property(e => e.document_template)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .Property(e => e.root_element)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .Property(e => e.document_section_prefix)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document>()
                .HasMany(e => e.xml_document_element)
                .WithRequired(e => e.xml_document)
                .WillCascadeOnDelete(false);

            modelBuilder.Entity<xml_document_element>()
                .Property(e => e.element_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document_element>()
                .Property(e => e.element_type_coded)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document_element>()
                .Property(e => e.value_element_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document_element>()
                .Property(e => e.converted_element_value)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document_element>()
                .Property(e => e.identifying_node_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document_element>()
                .Property(e => e.listof_node_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document_element>()
                .Property(e => e.value_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<xml_document_element>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<xml_document_element>()
                .Property(e => e.listof_parent_node_name)
                .IsUnicode(false);

            modelBuilder.Entity<xml_stylesheet>()
                .Property(e => e.document_version)
                .IsUnicode(false);

            modelBuilder.Entity<xml_stylesheet>()
                .Property(e => e.xml_stylesheet1)
                .IsUnicode(false);

            modelBuilder.Entity<xml_stylesheet>()
                .Property(e => e.document_desc)
                .IsUnicode(false);

            modelBuilder.Entity<xml_stylesheet>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<xml_stylesheet>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<year_control>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<year_control>()
                .Property(e => e.year)
                .HasPrecision(4, 0);

            modelBuilder.Entity<year_control>()
                .Property(e => e.closed_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<year_control>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<year_control>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<year_control>()
                .Property(e => e.gl_rollup_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<z_lookup>()
                .Property(e => e.z_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<zip_code>()
                .Property(e => e.zip_code1)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_coordinates>()
                .Property(e => e.zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_coordinates>()
                .Property(e => e.city)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_coordinates>()
                .Property(e => e.state)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_coordinates>()
                .Property(e => e.latitude)
                .HasPrecision(19, 9);

            modelBuilder.Entity<zip_code_coordinates>()
                .Property(e => e.longitude)
                .HasPrecision(19, 9);

            modelBuilder.Entity<zip_code_coordinates>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_coordinates>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_local>()
                .Property(e => e.zip_code)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_local>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_local>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_mx>()
                .Property(e => e.zip_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_mx>()
                .Property(e => e.state_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_mx>()
                .Property(e => e.municipality_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_mx>()
                .Property(e => e.location_cd)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_mx>()
                .Property(e => e.version_no)
                .HasPrecision(9, 5);

            modelBuilder.Entity<zip_code_mx>()
                .Property(e => e.revision_no)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_mx>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<zip_code_mx>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_name)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.mail_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_mail_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_initiator_audit>()
                .Property(e => e.old_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_name)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.mail_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_mail_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<address_CAD_target_audit>()
                .Property(e => e.old_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.old_phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.old_phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.old_phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.old_phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.old_phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.old_phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_initiator_audit>()
                .Property(e => e.old_phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.old_phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.old_phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.old_phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.old_phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.old_phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.old_phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUCO_target_audit>()
                .Property(e => e.old_phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_name)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.mail_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_mail_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.delivery_instructions1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_delivery_instructions1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.delivery_instructions2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_delivery_instructions2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.delivery_instructions3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_delivery_instructions3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address_CUS_initiator_audit>()
                .Property(e => e.old_preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.name)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_name)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_mail_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_mail_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.mail_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_mail_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_mail_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_mail_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_mail_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_mail_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_phys_address1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_phys_address2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_phys_address3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_phys_city)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_phys_state)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_phys_country)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_phys_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.delivery_instructions1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_delivery_instructions1)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.delivery_instructions2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_delivery_instructions2)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.delivery_instructions3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_delivery_instructions3)
                .IsUnicode(false);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<address_CUS_target_audit>()
                .Property(e => e.old_preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.ProductID)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.Features)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.Heading)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.Mfg_Name)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.Product_Subhead)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.SpecHeading01)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.SpecHeading02)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.SpecHeading03)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.SpecHeading04)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.SpecHeading05)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.SpecHeading06)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.SpecHeading07)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.SpecHeading08)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Prod>()
                .Property(e => e.TmBrand)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.ProductID)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.ITEMID)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.Attrtxt01)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.Attrtxt02)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.Attrtxt03)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.Attrtxt04)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.Attrtxt05)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.Attrtxt06)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.Attrtxt07)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.Attrtxt08)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.MfgNumber)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.ShipWt)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.UPC)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Web>()
                .Property(e => e.Description)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Webimage>()
                .Property(e => e.ProductID)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Webimage>()
                .Property(e => e.ImageID)
                .IsUnicode(false);

            modelBuilder.Entity<ADPIM_Webimage>()
                .Property(e => e.ThImageID)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.company_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.company_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.vendor_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.vendor_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.branch_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.branch_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.po_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.po_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.invoice_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.invoice_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.invoice_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.invoice_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.invoice_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.invoice_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.invoice_amount_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.invoice_amount_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.period_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.period_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.year_for_period_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.year_for_period_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.voucher_class_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.voucher_class_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.voucher_description_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.voucher_description_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.voucher_all_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.voucher_all_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.freight_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.freight_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.freight_amount_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.freight_amount_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.prorate_freight_by_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.prorate_freight_by_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_amount_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_amount_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_due_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_due_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.net_due_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.net_due_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_discount_pct_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.terms_discount_pct_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.always_take_terms_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.always_take_terms_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.source_type_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.source_type_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.row_status_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.row_status_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.retrieve_type_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.retrieve_type_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.external_reference_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.external_reference_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.transaction_type_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_edit_audit_trail>()
                .Property(e => e.transaction_type_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_not_delete>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_hdr_not_delete>()
                .Property(e => e.reason)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.purchase_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.purchase_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.purchase_amount_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.purchase_amount_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.purchase_account_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.purchase_account_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.type_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.type_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.description_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.description_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.disputed_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.disputed_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.inv_mast_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.inv_mast_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.unit_price_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.unit_price_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.unit_price_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.unit_price_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.quantity_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.quantity_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.ten99_type_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.ten99_type_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.job_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.job_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.apinv_line_uid)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.old_disputed_amt)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.new_disputed_amt)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.company_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.company_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.item_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.item_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.sequence_number)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.gl_dimension_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_audit_trail>()
                .Property(e => e.gl_dimension_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.receipt_number_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.receipt_number_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.receipt_line_number_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.receipt_line_number_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.unit_of_measure_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.unit_of_measure_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.unit_size_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.unit_size_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.pricing_unit_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.pricing_unit_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.pricing_unit_size_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.pricing_unit_size_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.unit_quantity_invoiced_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.unit_quantity_invoiced_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.unit_cost_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.unit_cost_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.extended_cost_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.extended_cost_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.extended_cost_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.extended_cost_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.freight_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.freight_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.disputed_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.disputed_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.disputed_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.disputed_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.acct_desc_old)
                .IsUnicode(false);

            modelBuilder.Entity<apinv_line_edit_audit_trail>()
                .Property(e => e.acct_desc_new)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr_STK_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr_STK_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr_STK_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_hdr_STK_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line_STK_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line_STK_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line_STK_initiator_audit>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line_STK_initiator_audit>()
                .Property(e => e.old_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line_STK_target_audit>()
                .Property(e => e.delete_flag)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line_STK_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsUnicode(false);

            modelBuilder.Entity<assembly_line_STK_target_audit>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<assembly_line_STK_target_audit>()
                .Property(e => e.old_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<auto_test_saved_vars_dtl>()
                .Property(e => e.variable_name)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_saved_vars_dtl>()
                .Property(e => e.variable_value)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_saved_vars_dtl>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_saved_vars_dtl>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_saved_vars_hdr>()
                .Property(e => e.auto_test_saved_vars_hdr_id)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_saved_vars_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<auto_test_saved_vars_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_custom_table_statements>()
                .Property(e => e.table_type)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_custom_table_statements>()
                .Property(e => e.statement_type)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_custom_table_statements>()
                .Property(e => e.sql_statement)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_country>()
                .Property(e => e.two_letter_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_country>()
                .Property(e => e.three_letter_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_country>()
                .Property(e => e.country_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer_x_rewards_program>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer_x_rewards_program>()
                .Property(e => e.invoiced_coop_dollar_basis)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_customer_x_rewards_program>()
                .Property(e => e.invoiced_incentive_points_basis)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_customer_x_rewards_program>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_customer_x_rewards_program>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.reconciliation_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.notes)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.signature_required)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.driver_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.route_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.completed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_delivery_stop>()
                .Property(e => e.recipient_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_inventory_cross_reference>()
                .Property(e => e.manufacturer)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_inventory_cross_reference>()
                .Property(e => e.model_number)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_inventory_cross_reference>()
                .Property(e => e.major_category)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_inventory_cross_reference>()
                .Property(e => e.minor_category)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.rewarded_coop_dollars)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.rewarded_incentive_points)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.adjustment_reason)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.threshold_deferred_coop_dollars)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.threshold_deferred_incentive_points)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.coop_dollars_basis_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.incentive_points_basis_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.invoice_class)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_invoice_line_rewards>()
                .Property(e => e.invoice_line_remarks)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_price_contract>()
                .Property(e => e.contract_sku_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_item_price_contract>()
                .Property(e => e.contract_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_item_price_contract>()
                .Property(e => e.contract_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.product_group_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.asset_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.cos_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.parker_product_code)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.landed_cost_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.environmental_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.admin_fee_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.include_in_size_analysis_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.rma_revenue_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.price_rounding_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.price_rounding_threshold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_product_group>()
                .Property(e => e.apply_min_margin_rules_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.rewards_program_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.rewards_program_desc)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.accum_coop_dollars_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.accum_incentive_points_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.coop_dollar_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.incentive_points_accum_rate)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.coop_dollar_accum_basis)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.incentive_points_accum_basis)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.universal_program_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.coop_dollar_basis_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.incentive_points_basis_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.allow_registration_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.allow_retroactive_rewards_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program>()
                .Property(e => e.web_visible_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program_entry_form>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program_entry_form>()
                .Property(e => e.internal_notes)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program_entry_form>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program_entry_form>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program_entry_goal>()
                .Property(e => e.goal_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_rewards_program_entry_goal>()
                .Property(e => e.goal_extended_description)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_sale_statistics>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_sale_statistics>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_sale_statistics>()
                .Property(e => e.total_qty_sold)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_sale_statistics>()
                .Property(e => e.total_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.salutation)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.first_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.mi)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.last_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.title)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.direct_phone)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.phone_ext)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.direct_fax)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.fax_ext)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.beeper)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.cellular)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.email_address2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.comment_1)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.comment_2)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.comment_3)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.comment_4)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.upper_combined_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.descending_combined_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_salesrep>()
                .Property(e => e.commission_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_state>()
                .Property(e => e.two_letter_code)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<b2b_temp_state>()
                .Property(e => e.state_name)
                .IsUnicode(false);

            modelBuilder.Entity<b2b_web_reference_info>()
                .Property(e => e.web_shopper_email)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation_audit_trail>()
                .Property(e => e.bank_stmt_balance_old)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation_audit_trail>()
                .Property(e => e.bank_stmt_balance_new)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation_audit_trail>()
                .Property(e => e.gl_transaction_number_old)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation_audit_trail>()
                .Property(e => e.gl_transaction_number_new)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation_audit_trail>()
                .Property(e => e.approved_old)
                .IsUnicode(false);

            modelBuilder.Entity<bank_accounts_reconciliation_audit_trail>()
                .Property(e => e.approved_new)
                .IsUnicode(false);

            modelBuilder.Entity<buy_list_line_backup>()
                .Property(e => e.buy_list_value)
                .IsUnicode(false);

            modelBuilder.Entity<buy_list_line_backup>()
                .Property(e => e.is_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<buy_list_line_backup>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<buy_list_line_backup>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<buying_trend_normality>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<buying_trend_normality>()
                .Property(e => e.bucket_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_normality>()
                .Property(e => e.f1i)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_normality>()
                .Property(e => e.C1_f1i)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_normality>()
                .Property(e => e.f2i)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_normality>()
                .Property(e => e.si)
                .HasPrecision(19, 9);

            modelBuilder.Entity<buying_trend_normality>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<CAD_target_audit>()
                .Property(e => e.source_area)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_bin>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_bin>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_bin>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_bin>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_bin>()
                .Property(e => e.source_transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_bin>()
                .Property(e => e.source_document_line_bin_uid)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.trans_type)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.unit_cost_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.freight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.reserved_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.on_hand_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.allocated_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.backordered_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.on_po_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.in_transit_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.qty_on_bo)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.qty_on_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.qty_in_transit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.qty_reserved_due_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.in_process_before_trans)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_item>()
                .Property(e => e.qty_in_process)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_lot>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_lot>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_lot>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_lot>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_lot>()
                .Property(e => e.sku_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<cancel_pick_ticket_lot>()
                .Property(e => e.source_transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_lot>()
                .Property(e => e.source_document_line_lot_uid)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_serial>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_serial>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_serial>()
                .Property(e => e.source_transaction_no)
                .IsUnicode(false);

            modelBuilder.Entity<cancel_pick_ticket_serial>()
                .Property(e => e.source_document_line_serial_uid)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_company_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_company_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.period_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.period_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.year_for_period_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.year_for_period_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.transaction_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.transaction_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.description_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.description_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.approved_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.approved_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_bank_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_bank_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_transfer_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_transfer_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_transfer_amount_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_transfer_amount_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_clearing_chart_of_accts_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.source_clearing_chart_of_accts_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_bank_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_bank_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_transfer_amount_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_transfer_amount_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_chart_of_accts_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_chart_of_accts_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_transfer_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_transfer_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_clearing_chart_of_accts_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<cash_transfer_audit_trail>()
                .Property(e => e.destination_clearing_chart_of_accts_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion>()
                .Property(e => e.schema_name)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion>()
                .Property(e => e.null_state)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion>()
                .Property(e => e.done)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion_view>()
                .Property(e => e.schema_name)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion_view>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion_view>()
                .Property(e => e.table_type)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion_view>()
                .Property(e => e.done)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion_view_error>()
                .Property(e => e.schema_name)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion_view_error>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<class_expansion_view_error>()
                .Property(e => e.table_type)
                .IsUnicode(false);

            modelBuilder.Entity<class_STK_target_audit>()
                .Property(e => e.class_type)
                .IsUnicode(false);

            modelBuilder.Entity<class_STK_target_audit>()
                .Property(e => e.class_id)
                .IsUnicode(false);

            modelBuilder.Entity<class_STK_target_audit>()
                .Property(e => e.class_description)
                .IsUnicode(false);

            modelBuilder.Entity<class_STK_target_audit>()
                .Property(e => e.old_class_description)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.title)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_title)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.direct_phone)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_direct_phone)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.phone_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_phone_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.direct_fax)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_direct_fax)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.fax_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_fax_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.first_name)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_first_name)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.mi)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_mi)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.last_name)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_initiator_audit>()
                .Property(e => e.old_last_name)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.title)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_title)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.direct_phone)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_direct_phone)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.phone_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_phone_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.direct_fax)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_direct_fax)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.fax_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_fax_ext)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_email_address)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_class_1id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_class_2id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_class_3id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_class_4id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_class_5id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.first_name)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_first_name)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.mi)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_mi)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.last_name)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_CUCO_target_audit>()
                .Property(e => e.old_last_name)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_ship_to_CUCO_initiator_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_ship_to_CUCO_initiator_audit>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_ship_to_CUCO_target_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<contacts_x_ship_to_CUCO_target_audit>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.top)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.a_to_b)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.b_to_c)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.c_to_d)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.d_to_f)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.bottom)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.weight)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.metric_value)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.weighted_metric_score)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.metric_score)
                .HasPrecision(38, 4);

            modelBuilder.Entity<cpa_scorecard_customer_detail_working>()
                .Property(e => e.grade_letter)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<CUCO_target_audit>()
                .Property(e => e.source_area)
                .IsUnicode(false);

            modelBuilder.Entity<CUS_target_audit>()
                .Property(e => e.source_area)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_backup>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_backup>()
                .Property(e => e._object)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_backup>()
                .Property(e => e.mod_string)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_backup>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_backup>()
                .Property(e => e.version_id)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_backup>()
                .Property(e => e.version_desc)
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_backup>()
                .Property(e => e.type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_backup>()
                .Property(e => e.object_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<custom_objects_backup>()
                .Property(e => e.default_values)
                .IsUnicode(false);

            modelBuilder.Entity<customer_335>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_335>()
                .Property(e => e.prelim_notice_tracking)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_335>()
                .Property(e => e.default_credit_amount)
                .HasPrecision(19, 7);

            modelBuilder.Entity<customer_335>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_335>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_335>()
                .Property(e => e.tax_terms_acct_no)
                .IsUnicode(false);

            modelBuilder.Entity<customer_45>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_45>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_45>()
                .Property(e => e.send_news)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_45>()
                .Property(e => e.send_offers_from_partners)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_45>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_45>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_initiator_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_initiator_audit>()
                .Property(e => e.web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_initiator_audit>()
                .Property(e => e.old_web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_target_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_target_audit>()
                .Property(e => e.web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_target_audit>()
                .Property(e => e.old_web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CAD_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_initiator_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_initiator_audit>()
                .Property(e => e.web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_initiator_audit>()
                .Property(e => e.old_web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_target_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_target_audit>()
                .Property(e => e.web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_target_audit>()
                .Property(e => e.old_web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUCO_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.credit_limit)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_credit_limit)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.minimum_order_dollar_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_minimum_order_dollar_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.job_pricing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_job_pricing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.allow_item_level_contract_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_allow_item_level_contract_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.always_use_job_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_always_use_job_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.allow_non_job_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_initiator_audit>()
                .Property(e => e.old_allow_non_job_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_web_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.credit_limit)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_credit_limit)
                .HasPrecision(22, 4);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_currency_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.minimum_order_dollar_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_minimum_order_dollar_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_default_disposition)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.job_pricing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_job_pricing)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.allow_item_level_contract_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_allow_item_level_contract_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.always_use_job_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_always_use_job_price)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.allow_non_job_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_CUS_target_audit>()
                .Property(e => e.old_allow_non_job_item)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<customer_integration_response_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_integration_response_audit>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_integration_trigger_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_integration_trigger_audit>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_list_temp>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<customer_list_temp>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<customer_list_temp>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<customer_list_temp>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<dc_migration_working>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<dc_migration_working>()
                .Property(e => e.datawindow_name)
                .IsUnicode(false);

            modelBuilder.Entity<dc_migration_working>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<dc_migration_working>()
                .Property(e => e.version_id)
                .IsUnicode(false);

            modelBuilder.Entity<dc_migration_working>()
                .Property(e => e.version_desc)
                .IsUnicode(false);

            modelBuilder.Entity<dc_migration_working>()
                .Property(e => e.base_version_name)
                .IsUnicode(false);

            modelBuilder.Entity<dc_migration_working>()
                .Property(e => e.type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<drill_security>()
                .Property(e => e.users_id)
                .IsUnicode(false);

            modelBuilder.Entity<drill_security>()
                .Property(e => e.menu_name)
                .IsUnicode(false);

            modelBuilder.Entity<drill_security>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<drill_security>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<drill_security>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<drill_security_additional_menus>()
                .Property(e => e.base_menu)
                .IsUnicode(false);

            modelBuilder.Entity<drill_security_additional_menus>()
                .Property(e => e.duplicate_menu)
                .IsUnicode(false);

            modelBuilder.Entity<drill_security_additional_menus>()
                .Property(e => e.window_name)
                .IsUnicode(false);

            modelBuilder.Entity<drill_security_additional_menus>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<drill_security_additional_menus>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_run_date>()
                .Property(e => e.last_processed_key)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_run_date>()
                .Property(e => e.last_syn_id)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sync_area_settings>()
                .Property(e => e.sync_area_code)
                .IsUnicode(false);

            modelBuilder.Entity<ecc_sync_area_settings>()
                .Property(e => e.sync_area_description)
                .IsUnicode(false);

            modelBuilder.Entity<edi_852_log>()
                .Property(e => e.po_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<edi_852_log>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<edi_852_log>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<edi_852_log>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<edi_852_log>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<edi_852_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_token>()
                .Property(e => e.token_name)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_token>()
                .Property(e => e.token_description)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_token>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<email_notification_token>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_production_orders>()
                .Property(e => e.ftp_code)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_production_orders>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_production_orders>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_production_orders>()
                .Property(e => e.before_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_production_orders>()
                .Property(e => e.after_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_production_orders>()
                .Property(e => e.audit_inserted)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_purchase_orders>()
                .Property(e => e.ftp_code)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_purchase_orders>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_purchase_orders>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_purchase_orders>()
                .Property(e => e.before_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_purchase_orders>()
                .Property(e => e.after_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_purchase_orders>()
                .Property(e => e.audit_inserted)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_sales_orders>()
                .Property(e => e.ftp_code)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_sales_orders>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_sales_orders>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_sales_orders>()
                .Property(e => e.before_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_sales_orders>()
                .Property(e => e.after_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_sales_orders>()
                .Property(e => e.audit_inserted)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_transfers>()
                .Property(e => e.ftp_code)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_transfers>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_transfers>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_transfers>()
                .Property(e => e.before_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_transfers>()
                .Property(e => e.after_value)
                .IsUnicode(false);

            modelBuilder.Entity<fault_tolerance_transfers>()
                .Property(e => e.audit_inserted)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<fbff_criteria>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fbff_criteria>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<fbff_forecasts>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fbff_forecasts>()
                .Property(e => e.formula_factor_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fbff_forecasts_per_item_location_formula>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fbff_forecasts_per_item_location_formula>()
                .Property(e => e.formula_forecast)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fbff_forecasts_per_item_location_formula>()
                .Property(e => e.forecast_error)
                .HasPrecision(28, 4);

            modelBuilder.Entity<fbff_sum_error_per_item_location_formula>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fbff_sum_error_per_item_location_formula>()
                .Property(e => e.sum_error)
                .HasPrecision(28, 4);

            modelBuilder.Entity<fbff_to_update>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fc_table_join>()
                .Property(e => e.base_table)
                .IsUnicode(false);

            modelBuilder.Entity<fc_table_join>()
                .Property(e => e.base_dataobject)
                .IsUnicode(false);

            modelBuilder.Entity<fc_table_join>()
                .Property(e => e.join_table)
                .IsUnicode(false);

            modelBuilder.Entity<fc_table_join>()
                .Property(e => e.join_syntax)
                .IsUnicode(false);

            modelBuilder.Entity<fc_table_join>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<fc_table_join>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fifo_layers_STK_initiator_audit>()
                .Property(e => e.fifo_layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layers_STK_initiator_audit>()
                .Property(e => e.old_fifo_layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layers_STK_target_audit>()
                .Property(e => e.fifo_layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<fifo_layers_STK_target_audit>()
                .Property(e => e.old_fifo_layer_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<final_dc_dupes>()
                .Property(e => e.version_id)
                .IsUnicode(false);

            modelBuilder.Entity<for_unit_of_measure>()
                .Property(e => e.unit_id)
                .IsUnicode(false);

            modelBuilder.Entity<for_unit_of_measure>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<for_unit_of_measure>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<fuel_pricing>()
                .Property(e => e.supplier_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fuel_pricing>()
                .Property(e => e.terminal_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<fuel_pricing>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<fuel_pricing>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_dynamic_look_ahead>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<gpor_dynamic_look_ahead>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_dynamic_look_ahead>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_dynamic_look_ahead>()
                .Property(e => e.drp_item_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.order_point_days)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.period_forecast_usage)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.up_to_periods)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.op_forecast_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.op_applied_forecast)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.oq_forecast_factor)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.oq_applied_forecast)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.eoq_periods_to_supply_min_forecast)
                .HasPrecision(19, 9);

            modelBuilder.Entity<gpor_run_drp_forecasts>()
                .Property(e => e.eoq_periods_to_supply_max_forecast)
                .HasPrecision(19, 9);

            modelBuilder.Entity<grow_data_source>()
                .Property(e => e.data_source_name)
                .IsUnicode(false);

            modelBuilder.Entity<grow_data_source>()
                .Property(e => e.data_source_desc)
                .IsUnicode(false);

            modelBuilder.Entity<grow_data_source>()
                .Property(e => e.key_column1)
                .IsUnicode(false);

            modelBuilder.Entity<grow_data_source>()
                .Property(e => e.key_column2)
                .IsUnicode(false);

            modelBuilder.Entity<grow_data_source>()
                .Property(e => e.key_column3)
                .IsUnicode(false);

            modelBuilder.Entity<integration_trigger_audit>()
                .Property(e => e.update_table)
                .IsUnicode(false);

            modelBuilder.Entity<integration_trigger_audit>()
                .Property(e => e.trigger_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_accessory_ALT_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_accessory_ALT_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.adjustment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.reason_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.reason_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.inv_adj_description_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.inv_adj_description_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.delete_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.delete_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.approved_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.approved_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.override_dec_prec_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.override_dec_prec_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.year_for_period_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.year_for_period_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.period_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_hdr_audit_trail>()
                .Property(e => e.period_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.adjustment_number)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.unit_quantity_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.unit_quantity_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.unit_of_measure_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.unit_of_measure_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.cost_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.cost_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.inv_mast_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_adj_line_audit_trail>()
                .Property(e => e.inv_mast_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.qty_allocated_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.qty_allocated_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.qty_allocated_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.quantity_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.quantity_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.quantity_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.sql_current_user)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin_audit>()
                .Property(e => e.action_type)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin_deletion_inv_bin_hdr>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin_hdr_not_delete>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin_hdr_not_delete>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin_hdr_not_delete>()
                .Property(e => e.reason)
                .IsUnicode(false);

            modelBuilder.Entity<inv_bin_STK_target_audit>()
                .Property(e => e.quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin_STK_target_audit>()
                .Property(e => e.old_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin_STK_target_audit>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_bin_STK_target_audit>()
                .Property(e => e.old_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.company_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.company_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.location_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.location_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.inv_mast_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.inv_mast_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.new_cost_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.new_cost_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.variance_account_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.variance_account_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.row_status_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.row_status_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.year_for_period_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.year_for_period_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.period_old)
                .IsUnicode(false);

            modelBuilder.Entity<inv_cost_edit_audit_trail>()
                .Property(e => e.period_new)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.qty_backordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.qty_in_transit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.qty_reserved_due_in)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.inv_min)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.inv_max)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.safety_stock)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.order_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.replenishment_method)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.purchase_class)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.qty_in_process)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_gtor_ns>()
                .Property(e => e.qty_quarantined)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.sellable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_sellable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.discontinued)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_discontinued)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.allow_ds_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_allow_ds_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.allow_sp_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_allow_sp_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.last_rec_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_last_rec_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.next_due_in_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_next_due_in_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_initiator_audit>()
                .Property(e => e.old_price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.sellable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_sellable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.discontinued)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_discontinued)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.allow_ds_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_allow_ds_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.allow_sp_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_allow_sp_discontinued_items)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.last_rec_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_last_rec_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.next_due_in_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_next_due_in_po_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_loc_STK_target_audit>()
                .Property(e => e.old_price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_335>()
                .Property(e => e.non_prelim_notice_tracking)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_335>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_335>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language_STT_target_audit>()
                .Property(e => e.language_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language_STT_target_audit>()
                .Property(e => e.language_item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language_STT_target_audit>()
                .Property(e => e.old_language_item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language_STT_target_audit>()
                .Property(e => e.language_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_language_STT_target_audit>()
                .Property(e => e.old_language_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STK_initiator_audit>()
                .Property(e => e.link_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STK_initiator_audit>()
                .Property(e => e.old_link_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STK_initiator_audit>()
                .Property(e => e.link_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STK_initiator_audit>()
                .Property(e => e.old_link_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STK_target_audit>()
                .Property(e => e.link_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STK_target_audit>()
                .Property(e => e.old_link_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STK_target_audit>()
                .Property(e => e.link_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STK_target_audit>()
                .Property(e => e.old_link_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STT_target_audit>()
                .Property(e => e.link_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STT_target_audit>()
                .Property(e => e.old_link_name)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STT_target_audit>()
                .Property(e => e.link_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_links_STT_target_audit>()
                .Property(e => e.old_link_path)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_SGP_target_audit>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_SGP_target_audit>()
                .Property(e => e.old_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_SGP_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_SGP_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_SGP_target_audit>()
                .Property(e => e.ecc_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_SGP_target_audit>()
                .Property(e => e.old_ecc_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.short_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_short_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.sales_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_sales_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.purchase_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_purchase_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.default_selling_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_default_selling_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.ecc_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_initiator_audit>()
                .Property(e => e.old_ecc_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_weight)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.short_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_short_code)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_class_id1)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_class_id2)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_class_id3)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_class_id4)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_class_id5)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.sales_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_sales_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.purchase_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_purchase_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.default_selling_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_default_selling_unit)
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price9)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_price10)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.ecc_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_STK_target_audit>()
                .Property(e => e.old_ecc_enabled_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_mast_x_company_STK_initiator_audit>()
                .Property(e => e.moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_company_STK_initiator_audit>()
                .Property(e => e.old_moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_company_STK_target_audit>()
                .Property(e => e.moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_mast_x_company_STK_target_audit>()
                .Property(e => e.old_moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inv_sub_ALT_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub_ALT_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub_ALT_target_audit>()
                .Property(e => e.interchangeable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inv_sub_ALT_target_audit>()
                .Property(e => e.old_interchangeable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<inventory_issues_document_summary>()
                .Property(e => e.document_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_issues_document_summary>()
                .Property(e => e.document_type)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_issues_item_loc>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_issues_item_loc>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_STK_initiator_audit>()
                .Property(e => e.supplier_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_STK_initiator_audit>()
                .Property(e => e.old_supplier_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_STK_initiator_audit>()
                .Property(e => e.list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_STK_initiator_audit>()
                .Property(e => e.old_list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_STK_initiator_audit>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_STK_initiator_audit>()
                .Property(e => e.old_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_STK_target_audit>()
                .Property(e => e.supplier_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_STK_target_audit>()
                .Property(e => e.old_supplier_part_no)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_supplier_STK_target_audit>()
                .Property(e => e.list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_STK_target_audit>()
                .Property(e => e.old_list_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_STK_target_audit>()
                .Property(e => e.cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_supplier_STK_target_audit>()
                .Property(e => e.old_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.non_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.qty_not_special_cost)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.weighted_average_non_special_cost)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.qty_on_special_cost)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.weighted_average_special_cost)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.inventory_costing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.value_type)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.inventory_value_delta)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.sum_qoh_delta)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_items>()
                .Property(e => e.sum_inventory_value_delta)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_location>()
                .Property(e => e.inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_location>()
                .Property(e => e.special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_location>()
                .Property(e => e.non_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_location>()
                .Property(e => e.value_type)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_location>()
                .Property(e => e.delta_total_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_location>()
                .Property(e => e.delta_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_location>()
                .Property(e => e.delta_non_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.branch_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.total_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.non_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.delta_total_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.delta_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.delta_non_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.delta_gl_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.delta_gl_special_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.delta_gl_non_special_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.delta_gl_general_journal_special)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.delta_gl_general_journal_regular)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.delta_gl_general_journal_all)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_branch>()
                .Property(e => e.value_type)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.total_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.non_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.delta_total_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.delta_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.delta_non_special_cost_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.delta_gl_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.delta_gl_special_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.delta_gl_non_special_inventory_value)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.delta_gl_general_journal_special)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.delta_gl_general_journal_regular)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.delta_gl_general_journal_all)
                .HasPrecision(38, 9);

            modelBuilder.Entity<inventory_value_review_company>()
                .Property(e => e.value_type)
                .IsUnicode(false);

            modelBuilder.Entity<inventoryissuestest_x_rebuild>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<inventoryissuestest_x_rebuild>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.Description)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_desc)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token1)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token2)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token3)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token4)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token5)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token6)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token7)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token8)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token9)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token10)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_desc_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token1_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token2_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token3_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token4_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token5_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token6_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token7_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token8_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token9_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_token10_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_rebuild)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_rebuild_custom)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_replace_sql)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_custom_replace_sql)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_rebuild_replace_sql)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_rebuild_custom_replace_sql)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_p21_item_info_replace_sql)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTestDesc>()
                .Property(e => e.debug_sql_extended_rebuild_replace_sql)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTest>()
                .Property(e => e.SQL)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTest>()
                .Property(e => e.OrderBy)
                .IsUnicode(false);

            modelBuilder.Entity<InventoryIssuesTest>()
                .Property(e => e.Description)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_deletion_invoice_hdr>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_deletion_invoice_hdr>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_deletion_oe_hdr>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.amount_paid_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.amount_paid_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.approved_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.approved_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.branch_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.branch_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.company_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.company_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.consolidated_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.consolidated_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.customer_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.customer_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.downpayment_applied_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.downpayment_applied_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.freight_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.freight_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.freight_code_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.freight_code_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_adjustment_type_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_adjustment_type_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_class_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_class_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.original_document_type_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.original_document_type_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.other_charge_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.other_charge_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.shipping_cost_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.shipping_cost_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.tax_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.tax_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.total_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.total_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.ship_to_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.ship_to_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_batch_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_batch_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.shipping_route_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.shipping_route_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.po_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.po_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.period_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.period_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.year_for_period_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.year_for_period_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.brokerage_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.brokerage_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.terms_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.terms_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.commission_cost_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.commission_cost_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_reference_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_reference_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_desc_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_audit_trail>()
                .Property(e => e.invoice_desc_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.total_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_total_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.memo_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_memo_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.bad_debt_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_bad_debt_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.allowed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_allowed)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.terms_taken)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_terms_taken)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.tax_terms_taken)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_tax_terms_taken)
                .HasPrecision(19, 9);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_amount_paid)
                .HasPrecision(19, 4);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.paid_in_full_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_paid_in_full_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.consolidated)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_consolidated)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_approved)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.remove_from_open_def_rev_window)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_CUS_target_audit>()
                .Property(e => e.old_remove_from_open_def_rev_window)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.invoice_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.invoice_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.rebilled_invoice_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.rebilled_invoice_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.invoice_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.invoice_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.invoice_batch_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.invoice_batch_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.po_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.po_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.period_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.period_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.year_for_period_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.year_for_period_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.invoice_class_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.invoice_class_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.rebill_invoice_reason_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.rebill_invoice_reason_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.shipping_route_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.shipping_route_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.terms_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.terms_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.freight_code_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.freight_code_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.freight_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.freight_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.commission_cost_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.commission_cost_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.row_status_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_edit_audit_trail>()
                .Property(e => e.row_status_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_not_delete>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_not_delete>()
                .Property(e => e.reason)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.salesrep_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.salesrep_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.primary_salesrep_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.primary_salesrep_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.commission_percentage_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.commission_percentage_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.delete_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.delete_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.exclude_split_validation_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_audit_trail>()
                .Property(e => e.exclude_split_validation_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.salesrep_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.salesrep_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.delete_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.delete_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.exclude_split_validation_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.exclude_split_validation_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.primary_salesrep_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.primary_salesrep_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.commission_percentage_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_salesrep_edit_audit_trail>()
                .Property(e => e.commission_percentage_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit_audit_trail>()
                .Property(e => e.jurisdiction_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit_audit_trail>()
                .Property(e => e.jurisdiction_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit_audit_trail>()
                .Property(e => e.taxable_invoice_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit_audit_trail>()
                .Property(e => e.taxable_invoice_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit_audit_trail>()
                .Property(e => e.taxable_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_tax_juris_edit_audit_trail>()
                .Property(e => e.taxable_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual_audit_trail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual_audit_trail>()
                .Property(e => e.jurisdiction_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual_audit_trail>()
                .Property(e => e.jurisdiction_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual_audit_trail>()
                .Property(e => e.taxable_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual_audit_trail>()
                .Property(e => e.taxable_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_hdr_x_tax_juris_manual_audit_trail>()
                .Property(e => e.jurisdiction_id)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.order_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.order_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.oe_line_number_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.oe_line_number_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.invoice_line_type_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.invoice_line_type_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.tax_item_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.tax_item_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.cogs_amount_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.cogs_amount_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.extended_price_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.extended_price_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.item_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.item_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.unit_price_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.unit_price_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.invoice_line_uid_parent_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.invoice_line_uid_parent_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.other_cost_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.other_cost_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.qty_shipped_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.qty_shipped_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.commission_cost_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.commission_cost_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.company_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.company_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.item_desc_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.item_desc_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.gl_revenue_account_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.gl_revenue_account_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.job_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.job_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.qty_requested_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.qty_requested_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.unit_of_measure_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.unit_of_measure_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.gl_dimen_type_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.gl_dimension_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_audit_trail>()
                .Property(e => e.gl_dimension_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_edit_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_edit_audit_trail>()
                .Property(e => e.line_no)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_edit_audit_trail>()
                .Property(e => e.unit_price_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_edit_audit_trail>()
                .Property(e => e.unit_price_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_edit_audit_trail>()
                .Property(e => e.extended_price_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_edit_audit_trail>()
                .Property(e => e.extended_price_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_audit_trail>()
                .Property(e => e.jurisdiction_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_audit_trail>()
                .Property(e => e.jurisdiction_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_audit_trail>()
                .Property(e => e.taxable_old)
                .IsUnicode(false);

            modelBuilder.Entity<invoice_line_taxes_audit_trail>()
                .Property(e => e.taxable_new)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_hierarchy_delete_audit>()
                .Property(e => e.parent_item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_hierarchy_delete_audit>()
                .Property(e => e.child_item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_hierarchy_delete_audit>()
                .Property(e => e.item_category_path)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_hierarchy_delete_audit>()
                .Property(e => e.item_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<item_category_hierarchy_delete_audit>()
                .Property(e => e.cat_level)
                .IsUnicode(false);

            modelBuilder.Entity<item_quantity_integration_response_audit>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_quantity_integration_trigger_audit>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.inventory_costing_basis)
                .IsUnicode(false);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.diff)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.sku_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.qty_on_hand_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.qty_on_hand_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.inventory_value_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_rebuild_inventory_value_delta>()
                .Property(e => e.account_no)
                .IsUnicode(false);

            modelBuilder.Entity<item_rebuild_inventory_value_hdr>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_rebuild_inventory_value_hdr>()
                .Property(e => e.from_location_id)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_rebuild_inventory_value_hdr>()
                .Property(e => e.to_location_id)
                .HasPrecision(19, 9);

            modelBuilder.Entity<item_rebuild_inventory_value_hdr>()
                .Property(e => e.from_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_rebuild_inventory_value_hdr>()
                .Property(e => e.to_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<item_rebuild_inventory_value_hdr>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_rebuild_inventory_value_hdr>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<item_uom_STK_initiator_audit>()
                .Property(e => e.unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<item_uom_STK_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_uom_STK_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_uom_STK_initiator_audit>()
                .Property(e => e.b2b_unit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<item_uom_STK_initiator_audit>()
                .Property(e => e.old_b2b_unit_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier_STK_target_audit>()
                .Property(e => e.lead_time_source)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier_STK_target_audit>()
                .Property(e => e.old_lead_time_source)
                .IsUnicode(false);

            modelBuilder.Entity<location_supplier_STK_target_audit>()
                .Property(e => e.average_lead_time)
                .HasPrecision(3, 0);

            modelBuilder.Entity<location_supplier_STK_target_audit>()
                .Property(e => e.old_average_lead_time)
                .HasPrecision(3, 0);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.qty_allocated_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.qty_allocated_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.qty_allocated_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.qty_linked_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.qty_linked_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.qty_linked_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.sql_current_user)
                .IsUnicode(false);

            modelBuilder.Entity<lot_bin_xref_audit>()
                .Property(e => e.action_type)
                .IsUnicode(false);

            modelBuilder.Entity<lot_rebuild_inventory_value_delta>()
                .Property(e => e.diff)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_rebuild_inventory_value_delta>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<lot_rebuild_inventory_value_delta>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<lot_rebuild_inventory_value_delta>()
                .Property(e => e.sku_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_rebuild_inventory_value_delta>()
                .Property(e => e.qty_on_hand_before)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_rebuild_inventory_value_delta>()
                .Property(e => e.qty_on_hand_after)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_rebuild_inventory_value_delta>()
                .Property(e => e.inventory_value_delta)
                .HasPrecision(19, 9);

            modelBuilder.Entity<lot_rebuild_inventory_value_delta>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<metrics_customer_detail_working>()
                .Property(e => e.metric_column)
                .IsUnicode(false);

            modelBuilder.Entity<metrics_customer_detail_working>()
                .Property(e => e.metric_value)
                .HasPrecision(38, 2);

            modelBuilder.Entity<nsp_smtp_mail_error_log>()
                .Property(e => e.error_message)
                .IsUnicode(false);

            modelBuilder.Entity<nsp_smtp_mail_error_log>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<nsp_smtp_mail_error_log>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer_CUCO_initiator_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer_CUCO_initiator_audit>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer_CUCO_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer_CUCO_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer_CUCO_target_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer_CUCO_target_audit>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer_CUCO_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_contacts_customer_CUCO_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_deletion_oe_hdr>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_deletion_oe_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_deletion_oe_hdr>()
                .Property(e => e.completed)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_deletion_oe_hdr>()
                .Property(e => e.type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_integration_response_audit>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_integration_trigger_audit>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_not_delete>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_hdr_not_delete>()
                .Property(e => e.reason)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_integration_response_audit>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_integration_response_audit>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_integration_trigger_audit>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_integration_trigger_audit>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<oe_line_service_labor_delete>()
                .Property(e => e.total_extended_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor_delete>()
                .Property(e => e.hours_worked)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor_delete>()
                .Property(e => e.total_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<oe_line_service_labor_delete>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<oe_line_service_labor_time_delete>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_database_changes>()
                .Property(e => e.change)
                .IsUnicode(false);

            modelBuilder.Entity<p21_database_changes>()
                .Property(e => e.object_type)
                .IsUnicode(false);

            modelBuilder.Entity<p21_database_changes>()
                .Property(e => e.object_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_database_changes>()
                .Property(e => e.table_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_database_changes>()
                .Property(e => e.version)
                .IsUnicode(false);

            modelBuilder.Entity<p21_deletion_other_columns>()
                .Property(e => e.column_name)
                .IsUnicode(false);

            modelBuilder.Entity<p21_deletion_other_columns>()
                .Property(e => e.col_value_num1)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_deletion_other_columns>()
                .Property(e => e.col_value_num2)
                .HasPrecision(19, 0);

            modelBuilder.Entity<p21_deletion_other_columns>()
                .Property(e => e.col_value_str)
                .IsUnicode(false);

            modelBuilder.Entity<p21_deletion_sql>()
                .Property(e => e.deletion_db)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_deletion_sql>()
                .Property(e => e.deletion_action)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_deletion_sql>()
                .Property(e => e.deletion_table)
                .IsUnicode(false);

            modelBuilder.Entity<p21_price_engine_run_audit_deleted_price_pages>()
                .Property(e => e.delete_reason)
                .IsUnicode(false);

            modelBuilder.Entity<p21_rebuild_inv_tran_insert>()
                .Property(e => e.alloc_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.sales_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.base_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.combinable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.price_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.sales_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.next_calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.next_break)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.other_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.calculatortype)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.commission_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.strategic_unit_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.strategic_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_sales_pricing_debug>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_bin_info>()
                .Property(e => e.qty_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_bin_info>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_bin_info>()
                .Property(e => e.qty_to_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_bin_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_bin_info>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_bin_info>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_lot_bin_info>()
                .Property(e => e.qty_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_lot_bin_info>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_lot_bin_info>()
                .Property(e => e.qty_to_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_lot_bin_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_lot_bin_info>()
                .Property(e => e.lot_cd)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_lot_bin_info>()
                .Property(e => e.bin_cd)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_lot_bin_info>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_lot_info>()
                .Property(e => e.qty_applied)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_lot_info>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_lot_info>()
                .Property(e => e.qty_to_change)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_lot_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_lot_info>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_lot_info>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_lot_info>()
                .Property(e => e.sku_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_order_line_info>()
                .Property(e => e.qty_allocated)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_order_line_info>()
                .Property(e => e.scheduled)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_order_line_info>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_order_line_info>()
                .Property(e => e.unit_cost_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_order_line_schedule_info>()
                .Property(e => e.allocated_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<p21_unallocate_orders_order_line_schedule_info>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<p21_unallocate_orders_order_line_schedule_info>()
                .Property(e => e.unit_cost_amt)
                .HasPrecision(19, 9);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.check_no)
                .IsUnicode(false);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.void_period_old)
                .IsUnicode(false);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.void_period_new)
                .IsUnicode(false);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.void_year_old)
                .IsUnicode(false);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.void_year_new)
                .IsUnicode(false);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.void_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<payments_audit_trail>()
                .Property(e => e.void_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<po_deletion_po_hdr>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<po_hdr_not_delete>()
                .Property(e => e.reason)
                .IsUnicode(false);

            modelBuilder.Entity<price_cache>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<price_cache>()
                .Property(e => e.base_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_cache>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_cache>()
                .Property(e => e.price_calc_type)
                .IsUnicode(false);

            modelBuilder.Entity<price_cache>()
                .Property(e => e.cost_calc_type)
                .IsUnicode(false);

            modelBuilder.Entity<price_method>()
                .Property(e => e.price_method1)
                .IsUnicode(false);

            modelBuilder.Entity<price_method>()
                .Property(e => e.multiplier)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_method>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<price_method_x_customer>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_page_type_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_page_type_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.mfg_class_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.mfg_class_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.supplier_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.supplier_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.product_group_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.product_group_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.discount_group_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.discount_group_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.major_group_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.major_group_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.description_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.description_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.pricing_method_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.pricing_method_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.source_price_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.source_price_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.effective_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.effective_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.expiration_date_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.expiration_date_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.contract_number_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.contract_number_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_method_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_method_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value1_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value1_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value2_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value2_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value3_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value3_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value4_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value4_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value5_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value5_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value6_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value6_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value7_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value7_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value8_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value8_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value9_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value9_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value10_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value10_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value11_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value11_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value12_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value12_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value13_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value13_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value14_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value14_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value15_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculation_value15_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break1_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break1_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break2_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break2_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break3_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break3_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break4_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break4_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break5_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break5_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break6_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break6_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break7_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break7_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break8_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break8_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break9_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break9_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break10_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break10_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break11_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break11_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break12_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break12_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break13_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break13_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break14_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.break14_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost1_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost1_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost2_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost2_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost3_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost3_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost4_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost4_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost5_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost5_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost6_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost6_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost7_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost7_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost8_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost8_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost9_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost9_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost10_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost10_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost11_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost11_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost12_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost12_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost13_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost13_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost14_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost14_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost15_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost15_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom1_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom1_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom2_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom2_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom3_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom3_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom4_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom4_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom5_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom5_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom6_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom6_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom7_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom7_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom8_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom8_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom9_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom9_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom10_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom10_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom11_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom11_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom12_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom12_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom13_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom13_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom14_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.uom14_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.totaling_method_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.totaling_method_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.totaling_basis_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.totaling_basis_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.row_status_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.row_status_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost_type_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost_type_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost_value_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost_value_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost_source_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.other_cost_source_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.cost_calculation_method_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.cost_calculation_method_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.cost_calculation_value_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.cost_calculation_value_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_type_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_type_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_value_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_value_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_source_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_source_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_calc_method_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_calc_method_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_calc_value_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.commission_cost_calc_value_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_page_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_page_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.customer_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.customer_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.customer_part_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.customer_part_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.company_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.company_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.inv_mast_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.inv_mast_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.currency_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.currency_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.values_currency_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.values_currency_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.apply_pp_to_mro_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.apply_pp_to_mro_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value1_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value1_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value2_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value2_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value3_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value3_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value4_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value4_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value5_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value5_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value6_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value6_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value7_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value7_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value8_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value8_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value9_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value9_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value10_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value10_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value11_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value11_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value12_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value12_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value13_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value13_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value14_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value14_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value15_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.comm_cost_calc_value15_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculator_type_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.calculator_type_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.date_last_sent_on_832_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.date_last_sent_on_832_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.date_page_deleted_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.date_page_deleted_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_family_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_family_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.peer_price_page_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.peer_price_page_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.contract_line_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.contract_line_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.on_contract_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.on_contract_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.strategic_price_applies_to_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.strategic_price_applies_to_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.round_to_next_dollar_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.round_to_next_dollar_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.apply_freight_factor_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.apply_freight_factor_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.freight_factor_source_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.freight_factor_source_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.no_charge_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.no_charge_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.non_stock_items_only_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.non_stock_items_only_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.apply_pp_to_sop_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.apply_pp_to_sop_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_override_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.price_override_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.rebate_margin_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.rebate_margin_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.upper_margin_variance_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.upper_margin_variance_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.lower_margin_variance_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.lower_margin_variance_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.exclude_order_level_disc_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.exclude_order_level_disc_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.rolled_item_pricing_type_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_audit_trail>()
                .Property(e => e.rolled_item_pricing_type_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_location_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_location_audit_trail>()
                .Property(e => e.location_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_location_audit_trail>()
                .Property(e => e.location_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_location_audit_trail>()
                .Property(e => e.row_status_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_location_audit_trail>()
                .Property(e => e.row_status_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc_audit_trail>()
                .Property(e => e.company_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc_audit_trail>()
                .Property(e => e.company_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc_audit_trail>()
                .Property(e => e.customer_id_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc_audit_trail>()
                .Property(e => e.customer_id_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc_audit_trail>()
                .Property(e => e.contract_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc_audit_trail>()
                .Property(e => e.contract_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc_audit_trail>()
                .Property(e => e.po_cost_multiplier_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_po_cost_calc_audit_trail>()
                .Property(e => e.po_cost_multiplier_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate_audit_trail>()
                .Property(e => e.secondary_rebate_type_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate_audit_trail>()
                .Property(e => e.secondary_rebate_type_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate_audit_trail>()
                .Property(e => e.secondary_rebate_calc_meth_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate_audit_trail>()
                .Property(e => e.secondary_rebate_calc_meth_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate_audit_trail>()
                .Property(e => e.secondary_rebate_value_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate_audit_trail>()
                .Property(e => e.secondary_rebate_value_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate_audit_trail>()
                .Property(e => e.secondary_rebate_source_cd_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_secondary_rebate_audit_trail>()
                .Property(e => e.secondary_rebate_source_cd_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_x_book_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_x_book_audit_trail>()
                .Property(e => e.price_book_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_x_book_audit_trail>()
                .Property(e => e.price_book_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_x_book_audit_trail>()
                .Property(e => e.price_page_uid_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_x_book_audit_trail>()
                .Property(e => e.price_page_uid_new)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_x_book_audit_trail>()
                .Property(e => e.row_status_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<price_page_x_book_audit_trail>()
                .Property(e => e.row_status_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.qty_ordered_new)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.discount_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.product_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.manufacturing_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.customer_part_number)
                .IsUnicode(false);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.sales_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.sales_price_new)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.calculation_value)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.calculation_value_new)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.price_page_calculation_type)
                .IsUnicode(false);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.price_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.price_size_new)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.sales_size)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.sales_size_new)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.base_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.base_price_new)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.combinable)
                .IsUnicode(false);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.combinable_new)
                .IsUnicode(false);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.next_break)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.next_break_new)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.next_price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_price_results>()
                .Property(e => e.next_price_new)
                .HasPrecision(19, 9);

            modelBuilder.Entity<sales_pricing_option>()
                .Property(e => e.pricing_option)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_integration_response_audit>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_integration_response_audit>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<serial_number_integration_trigger_audit>()
                .Property(e => e.serial_number)
                .IsUnicode(false);

            modelBuilder.Entity<serial_number_integration_trigger_audit>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_CAD_initiator_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CAD_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CAD_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CAD_target_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CAD_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CAD_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUCO_initiator_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUCO_initiator_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUCO_initiator_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUCO_target_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUCO_target_audit>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUCO_target_audit>()
                .Property(e => e.old_delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUS_initiator_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUS_initiator_audit>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUS_initiator_audit>()
                .Property(e => e.old_tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUS_initiator_audit>()
                .Property(e => e.preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_CUS_initiator_audit>()
                .Property(e => e.old_preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_CUS_target_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUS_target_audit>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUS_target_audit>()
                .Property(e => e.old_tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_CUS_target_audit>()
                .Property(e => e.preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_CUS_target_audit>()
                .Property(e => e.old_preferred_location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_integration_response_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_integration_response_audit>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_integration_response_audit>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_integration_trigger_audit>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ship_to_integration_trigger_audit>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ship_to_integration_trigger_audit>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<ssis_shopping_list_contract>()
                .Property(e => e.uom)
                .IsUnicode(false);

            modelBuilder.Entity<ssis_shopping_list_contract>()
                .Property(e => e.price)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ssis_shopping_list_contract>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.restricted_class_id)
                .IsUnicode(false);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.user_can_override_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.limit_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.limit_time_period)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.restriction_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.period_qty_used)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.restriction_qty_per_time)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.specific_qty_limit)
                .HasPrecision(19, 9);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.order_restriction_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<ssis_temp_restricted_item_quantity_limits>()
                .Property(e => e.class_description)
                .IsUnicode(false);

            modelBuilder.Entity<ssis_temp_restricted_items>()
                .Property(e => e.item_code)
                .IsUnicode(false);

            modelBuilder.Entity<ssis_temp_restricted_items>()
                .Property(e => e.restriction_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<stage_po_description_temp>()
                .Property(e => e.stage_po_description)
                .IsUnicode(false);

            modelBuilder.Entity<STK_target_audit>()
                .Property(e => e.source_area)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_STK_target_audit>()
                .Property(e => e.supplier_name)
                .IsUnicode(false);

            modelBuilder.Entity<supplier_STK_target_audit>()
                .Property(e => e.old_supplier_name)
                .IsUnicode(false);

            modelBuilder.Entity<tag_created_from_rebuild_info>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<tag_created_from_rebuild_info>()
                .Property(e => e.tag_no)
                .IsUnicode(false);

            modelBuilder.Entity<tag_created_from_rebuild_info>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<tag_created_from_rebuild_info>()
                .Property(e => e.lot)
                .IsUnicode(false);

            modelBuilder.Entity<tag_created_from_rebuild_info>()
                .Property(e => e.bin)
                .IsUnicode(false);

            modelBuilder.Entity<tag_created_from_rebuild_info>()
                .Property(e => e.tag_qty)
                .HasPrecision(19, 9);

            modelBuilder.Entity<unit_of_measure_integration_response_audit>()
                .Property(e => e.unit_id)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_integration_trigger_audit>()
                .Property(e => e.unit_id)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_STK_target_audit>()
                .Property(e => e.unit_id)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_STK_target_audit>()
                .Property(e => e.unit_description)
                .IsUnicode(false);

            modelBuilder.Entity<unit_of_measure_STK_target_audit>()
                .Property(e => e.old_unit_description)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.vendor_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.iva_percentage_withheld)
                .HasPrecision(19, 6);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.freight_vendor_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.created_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.domestic_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.iva_exemption_number)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.iva_withheld_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.iva_received_percentage)
                .HasPrecision(2, 0);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.iva_paid_account_no)
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.vendor_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<vendor_iva_tax>()
                .Property(e => e.transaction_type)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<voucher_deletion_apinv_hdr>()
                .Property(e => e.voucher_no)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_deletion_payments>()
                .Property(e => e.bank_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<voucher_deletion_payments>()
                .Property(e => e.check_no)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_deletion_payments>()
                .Property(e => e.company_no)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.last_maintained_by)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.purchase_acct_no_old)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.purchase_acct_no_new)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.purchase_desc_old)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.purchase_desc_new)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.purchase_amt_display_old)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.purchase_amt_display_new)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.disputed_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.disputed_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.take_terms_old)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.take_terms_new)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.tax_driver_flag_old)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.tax_driver_flag_new)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.landed_cost_driver_complete_old)
                .IsUnicode(false);

            modelBuilder.Entity<voucher_purchase_acct_edit_audit_trail>()
                .Property(e => e.landed_cost_driver_complete_new)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ar_transaction_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ar_transaction_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ar_transaction_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_ar_transaction_data>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ar_transaction_data>()
                .Property(e => e.trans_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ar_transaction_data>()
                .Property(e => e.trans_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_ar_transaction_data>()
                .Property(e => e.trans_code)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_audit_trail_detail>()
                .Property(e => e.sql_statement)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_audit_trail_detail_history>()
                .Property(e => e.sql_statement)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.customer_item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.item_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.parent_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.parent_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.default_sales_unit)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.sales_pricing_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.last_invoice_qty)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.ytd_invoice_qty)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.last_invoice_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.current_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.stockable)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.upc_code)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.substitute_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.last_invoice_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.tax_group_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.item_contract_flag)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.contract_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_bcbi_data>()
                .Property(e => e.previous_invoice_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_code>()
                .Property(e => e.weboe_code_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.item_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.supplier_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.supplier_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.old_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.new_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.sales_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_cost_changes_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.customer_bill_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.contact_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.contact_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.title)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.comments)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.direct_phone)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.direct_extension)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.direct_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_contact_data>()
                .Property(e => e.email_address)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.bill_to_address1)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.bill_to_address2)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.bill_to_city)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.bill_to_state)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.bill_to_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.bill_to_country)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.bill_to_attention)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.corp_address_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.central_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.central_fax_number)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.legacy_customer_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.cwoe_flag)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.cwab_flag)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.cpa_flag)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.swoe_flag)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_data>()
                .Property(e => e.spda_flag)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.credit_status)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.mtd_sales)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.mtd_margin)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.ytd_sales)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.ytd_margin)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.current_month_ar)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.total_ar)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.current_ar)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.over_30_ar)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.over_60_ar)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.over_90_ar)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_customer_statistics_data>()
                .Property(e => e.over_120_ar)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_file>()
                .Property(e => e.weboe_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_file>()
                .Property(e => e.weboe_old_file_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_file>()
                .Property(e => e.weboe_file_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_file>()
                .Property(e => e.file_sql)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.corporate_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.ship_to_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.order_line_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.customer_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.ship_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.ship_to_city)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.order_type)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.shipping_route)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.supplier_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.item_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.parent_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.parent_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.stockable)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.qty_ordered)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.qty_shipped)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.sales_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.pricing_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.pricing_unit_size)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_invoice_history_data>()
                .Property(e => e.extended_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_item_category_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_category_data>()
                .Property(e => e.item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_category_data>()
                .Property(e => e.item_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_category_data>()
                .Property(e => e.parent_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_category_group_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_category_group_data>()
                .Property(e => e.item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_category_group_data>()
                .Property(e => e.item_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.extended_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.default_purchase_unit)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.default_sales_pricing_unit)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.pricing_unit_size)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.parent_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.upc_code)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_data>()
                .Property(e => e.substitute_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.buying_code)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.tax_flag)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.qty_on_hand)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.qty_available)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.current_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.stockable_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.moving_average_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.standard_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.last_rec_po)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_location_data>()
                .Property(e => e.primary_supplier_cost)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.price1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.qty1)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.price2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.qty2)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.price3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.qty3)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.price4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.qty4)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.price5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.qty5)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.price6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.qty6)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.price7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.qty7)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.price8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_item_pricebreaks_data>()
                .Property(e => e.qty8)
                .HasPrecision(19, 9);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.bill_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.unit_qty_ordered)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.unit_qty_on_backorder)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.unit_size)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.sales_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_items_on_backorder_data>()
                .Property(e => e.qty_on_order)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.invoice_reference_number)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.bill_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.delivery_instructions)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.status)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.tentative)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.pick_ticket_printed)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.total_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.total_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.total_margin)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.ship_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.ship_to_address1)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.ship_to_address2)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.ship_to_city)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.ship_to_state)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.ship_to_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.ship_to_country)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_header_data>()
                .Property(e => e.ship_to_attn)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.invoice_reference_number)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.line_no)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.ytd_qty_invoiced)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.ytd_unit_of_measure)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.unit_quantity)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.sales_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.unit_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.unit_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.pricing_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.last_qty_invoiced)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.last_sales_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.last_unit_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.last_unit_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.last_pricing_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.new_sell_price)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.new_sell_cost)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_new_order_line_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_open_account_balance_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_open_account_balance_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_open_account_balance_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_open_account_balance_data>()
                .Property(e => e.corp_address_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_open_account_balance_data>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_open_account_balance_data>()
                .Property(e => e.invoice_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_open_account_balance_data>()
                .Property(e => e.total_amount)
                .HasPrecision(19, 4);

            modelBuilder.Entity<weboe_open_account_balance_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_header_change_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_header_change_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_header_change_data>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_header_change_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_header_change_data>()
                .Property(e => e.customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_header_change_data>()
                .Property(e => e.bill_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_header_change_data>()
                .Property(e => e.delete_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.line_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.customer_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.bill_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.old_qty_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.old_qty_ordered)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.old_qty_shipped)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.old_qty_backorder)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.old_price)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.old_price_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.new_qty_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.new_qty_ordered)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.new_qty_shipped)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.new_qty_backorder)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.new_price)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.new_price_uom)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.new_margin)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_order_line_change_data>()
                .Property(e => e.change_flag)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.salesrep_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.bill_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.customer_phone_number)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.contact_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.order_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.po_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_orders_on_credit_hold_data>()
                .Property(e => e.total_amount)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.customer_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.ship_to_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.ship_to_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.ship_to_address1)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.ship_to_address2)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.ship_to_city)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.ship_to_state)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.ship_to_postal_code)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.ship_to_country)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.ship_to_attn)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.tax_flag)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.preferred_location_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_ship_to_data>()
                .Property(e => e.legacy_ship_to_no)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.refresh_append)
                .IsFixedLength()
                .IsUnicode(false);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.item_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.location_id)
                .HasPrecision(19, 0);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.item_category_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.item_category_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.supplier_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.supplier_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.item_desc)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.default_sales_unit)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_stock_outs_data>()
                .Property(e => e.company_id)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_variable_data>()
                .Property(e => e.variable_area)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_variable_data>()
                .Property(e => e.variable_name)
                .IsUnicode(false);

            modelBuilder.Entity<weboe_variable_data>()
                .Property(e => e.variable_value)
                .IsUnicode(false);
        }
    }
}
